/*
Deployment script for DVMeta

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DVMeta"
:setvar DefaultFilePrefix "DVMeta"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [model]...';


GO
CREATE SCHEMA [model]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [stage]...';


GO
CREATE SCHEMA [stage]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [meta]...';


GO
CREATE SCHEMA [meta]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [etl]...';


GO
CREATE SCHEMA [etl]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [audit]...';


GO
CREATE SCHEMA [audit]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [stage].[EDWAttribute]...';


GO
CREATE TABLE [stage].[EDWAttribute] (
    [AttributeId]        INT            NOT NULL,
    [AttributeName]      VARCHAR (50)   NOT NULL,
    [EDWEntityId]        INT            NOT NULL,
    [DataTypeId]         INT            NOT NULL,
    [Order]              SMALLINT       NULL,
    [IsStagingOnly]      BIT            NOT NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL
);


GO
PRINT N'Creating [stage].[EDWEntity]...';


GO
CREATE TABLE [stage].[EDWEntity] (
    [EntityId]           INT            NOT NULL,
    [EntityName]         VARCHAR (50)   NOT NULL,
    [EntityDescription]  VARCHAR (255)  NULL,
    [EntityTypeId]       VARCHAR (4)    NOT NULL,
    [StorageTypeId]      VARCHAR (3)    NOT NULL,
    [PartitioningTypeId] CHAR (1)       NOT NULL,
    [CreateEntity]       BIT            NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL
);


GO
PRINT N'Creating [stage].[DataType]...';


GO
CREATE TABLE [stage].[DataType] (
    [DataTypeId]         INT            NOT NULL,
    [DataTypeName]       VARCHAR (50)   NOT NULL,
    [Size]               INT            NULL,
    [Precision]          INT            NULL,
    [Scale]              INT            NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL
);


GO
PRINT N'Creating [stage].[EntityType]...';


GO
CREATE TABLE [stage].[EntityType] (
    [EntityTypeId]       VARCHAR (4)    NOT NULL,
    [EntityTypeName]     VARCHAR (50)   NOT NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL
);


GO
PRINT N'Creating [stage].[StorageType]...';


GO
CREATE TABLE [stage].[StorageType] (
    [StorageTypeId]      VARCHAR (3)    NOT NULL,
    [StorageTypeName]    VARCHAR (50)   NOT NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL
);


GO
PRINT N'Creating [stage].[EDWEntityRelationship]...';


GO
CREATE TABLE [stage].[EDWEntityRelationship] (
    [EntityRelationshipId] INT            NOT NULL,
    [HubLnk]               INT            NOT NULL,
    [UsedBy]               INT            NOT NULL,
    [HashKeySuffix]        VARCHAR (50)   NULL,
    [LastUpdateTime]       DATETIME2 (7)  NULL,
    [LastChangeUserName]   NVARCHAR (128) NULL
);


GO
PRINT N'Creating [stage].[PartitioningType]...';


GO
CREATE TABLE [stage].[PartitioningType] (
    [PartitioningTypeId]   CHAR (1)       NOT NULL,
    [PartitioningTypeName] VARCHAR (50)   NOT NULL,
    [LastUpdateTime]       DATETIME2 (7)  NULL,
    [LastChangeUserName]   NVARCHAR (128) NULL
);


GO
PRINT N'Creating [stage].[ProcessEntityRelationship]...';


GO
CREATE TABLE [stage].[ProcessEntityRelationship] (
    [ProcessEntityRelationshipId] INT            NOT NULL,
    [ProcessId]                   INT            NOT NULL,
    [EntityId]                    INT            NOT NULL,
    [LastUpdateTime]              DATETIME2 (7)  NULL,
    [LastChangeUserName]          NVARCHAR (128) NULL
);


GO
PRINT N'Creating [stage].[SourceSystemType]...';


GO
CREATE TABLE [stage].[SourceSystemType] (
    [SourceSystemTypeId]   VARCHAR (3)    NOT NULL,
    [SourceSystemTypeName] VARCHAR (50)   NOT NULL,
    [LastUpdateTime]       DATETIME2 (7)  NULL,
    [LastChangeUserName]   NVARCHAR (128) NULL
);


GO
PRINT N'Creating [stage].[ProcessType]...';


GO
CREATE TABLE [stage].[ProcessType] (
    [ProcessTypeId]      VARCHAR (3)    NOT NULL,
    [ProcessTypeName]    VARCHAR (50)   NOT NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL
);


GO
PRINT N'Creating [stage].[Process]...';


GO
CREATE TABLE [stage].[Process] (
    [ProcessId]          INT            NOT NULL,
    [ProcessName]        VARCHAR (50)   NOT NULL,
    [ProcessDescription] VARCHAR (255)  NULL,
    [ProcessTypeId]      VARCHAR (3)    NOT NULL,
    [SourceSystemTypeId] VARCHAR (3)    NOT NULL,
    [ContactInfo]        VARCHAR (255)  NULL,
    [SupportGroup]       VARCHAR (255)  NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL
);


GO
PRINT N'Creating [stage].[Template]...';


GO
CREATE TABLE [stage].[Template] (
    [TemplateId]          VARCHAR (50)   NOT NULL,
    [TemplateDescription] VARCHAR (255)  NULL,
    [TemplateAttribute]   VARCHAR (20)   NOT NULL,
    [TemplateText]        NVARCHAR (MAX) NOT NULL,
    [LastUpdateTime]      DATETIME2 (7)  NULL,
    [LastChangeUserName]  NVARCHAR (128) NULL
);


GO
PRINT N'Creating [meta].[EDWAttribute]...';


GO
CREATE TABLE [meta].[EDWAttribute] (
    [AttributeId]        INT            IDENTITY (1, 1) NOT NULL,
    [AttributeName]      VARCHAR (50)   NOT NULL,
    [EDWEntityId]        INT            NOT NULL,
    [DataTypeId]         INT            NOT NULL,
    [Order]              SMALLINT       NULL,
    [IsStagingOnly]      BIT            NOT NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL,
    CONSTRAINT [PK_EDWAttribute] PRIMARY KEY CLUSTERED ([AttributeId] ASC)
);


GO
PRINT N'Creating [meta].[EDWEntity]...';


GO
CREATE TABLE [meta].[EDWEntity] (
    [EntityId]           INT            IDENTITY (1, 1) NOT NULL,
    [EntityName]         VARCHAR (50)   NOT NULL,
    [EntityDescription]  VARCHAR (255)  NULL,
    [EntityTypeId]       VARCHAR (4)    NOT NULL,
    [StorageTypeId]      VARCHAR (3)    NOT NULL,
    [PartitioningTypeId] CHAR (1)       NOT NULL,
    [CreateEntity]       BIT            NOT NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL,
    CONSTRAINT [PK_EDWEntity] PRIMARY KEY CLUSTERED ([EntityId] ASC)
);


GO
PRINT N'Creating [meta].[EDWEntity].[IX_EDWEntity_Key]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EDWEntity_Key]
    ON [meta].[EDWEntity]([EntityTypeId] ASC, [EntityName] ASC);


GO
PRINT N'Creating [meta].[DataType]...';


GO
CREATE TABLE [meta].[DataType] (
    [DataTypeId]         INT            NOT NULL,
    [DataTypeName]       VARCHAR (50)   NOT NULL,
    [Size]               INT            NULL,
    [Precision]          INT            NULL,
    [Scale]              INT            NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL,
    CONSTRAINT [PK_DataType] PRIMARY KEY CLUSTERED ([DataTypeId] ASC)
);


GO
PRINT N'Creating [meta].[EntityType]...';


GO
CREATE TABLE [meta].[EntityType] (
    [EntityTypeId]       VARCHAR (4)    NOT NULL,
    [EntityTypeName]     VARCHAR (50)   NOT NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL,
    CONSTRAINT [PK_EntityType] PRIMARY KEY CLUSTERED ([EntityTypeId] ASC)
);


GO
PRINT N'Creating [meta].[StorageType]...';


GO
CREATE TABLE [meta].[StorageType] (
    [StorageTypeId]      VARCHAR (3)    NOT NULL,
    [StorageTypeName]    VARCHAR (50)   NOT NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL,
    CONSTRAINT [PK_StorageType] PRIMARY KEY CLUSTERED ([StorageTypeId] ASC)
);


GO
PRINT N'Creating [meta].[Configuration]...';


GO
CREATE TABLE [meta].[Configuration] (
    [Id]          VARCHAR (50)  NOT NULL,
    [Value]       VARCHAR (50)  NOT NULL,
    [Description] VARCHAR (MAX) NULL
);


GO
PRINT N'Creating [meta].[DataTypeMapping]...';


GO
CREATE TABLE [meta].[DataTypeMapping] (
    [DataTypeId]  INT          NOT NULL,
    [SqlDataType] VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_DataTypeMapping] PRIMARY KEY CLUSTERED ([DataTypeId] ASC)
);


GO
PRINT N'Creating [meta].[Environment]...';


GO
CREATE TABLE [meta].[Environment] (
    [Id]    VARCHAR (50) NOT NULL,
    [Value] VARCHAR (50) NOT NULL
);


GO
PRINT N'Creating [meta].[EDWEntityRelationship]...';


GO
CREATE TABLE [meta].[EDWEntityRelationship] (
    [EntityRelationshipId] INT            IDENTITY (1, 1) NOT NULL,
    [HubLnk]               INT            NOT NULL,
    [UsedBy]               INT            NOT NULL,
    [HashKeySuffix]        VARCHAR (50)   NULL,
    [LastUpdateTime]       DATETIME2 (7)  NULL,
    [LastChangeUserName]   NVARCHAR (128) NULL,
    CONSTRAINT [PK_EDWEntityRelationship] PRIMARY KEY CLUSTERED ([EntityRelationshipId] ASC)
);


GO
PRINT N'Creating [meta].[EDWEntityRelationship].[IX_EDWEntityRelationship_Key]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EDWEntityRelationship_Key]
    ON [meta].[EDWEntityRelationship]([HubLnk] ASC, [UsedBy] ASC, [HashKeySuffix] ASC);


GO
PRINT N'Creating [meta].[PartitioningType]...';


GO
CREATE TABLE [meta].[PartitioningType] (
    [PartitioningTypeId]   CHAR (1)       NOT NULL,
    [PartitioningTypeName] VARCHAR (50)   NOT NULL,
    [LastUpdateTime]       DATETIME2 (7)  NULL,
    [LastChangeUserName]   NVARCHAR (128) NULL,
    CONSTRAINT [PK_PartitioningType] PRIMARY KEY CLUSTERED ([PartitioningTypeId] ASC)
);


GO
PRINT N'Creating [meta].[ProcessEntityRelationship]...';


GO
CREATE TABLE [meta].[ProcessEntityRelationship] (
    [ProcessEntityRelationshipId] INT            IDENTITY (1, 1) NOT NULL,
    [ProcessId]                   INT            NOT NULL,
    [EntityId]                    INT            NOT NULL,
    [LastUpdateTime]              DATETIME2 (7)  NULL,
    [LastChangeUserName]          NVARCHAR (128) NULL,
    CONSTRAINT [PK_ProcessEntityRelationship] PRIMARY KEY CLUSTERED ([ProcessEntityRelationshipId] ASC)
);


GO
PRINT N'Creating [meta].[Process]...';


GO
CREATE TABLE [meta].[Process] (
    [ProcessId]          INT            IDENTITY (1, 1) NOT NULL,
    [ProcessName]        VARCHAR (50)   NOT NULL,
    [ProcessDescription] VARCHAR (255)  NULL,
    [ProcessTypeId]      VARCHAR (3)    NOT NULL,
    [SourceSystemTypeId] VARCHAR (3)    NOT NULL,
    [ContactInfo]        VARCHAR (255)  NULL,
    [SupportGroup]       VARCHAR (255)  NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL,
    CONSTRAINT [PK_Process] PRIMARY KEY CLUSTERED ([ProcessId] ASC)
);


GO
PRINT N'Creating [meta].[Process].[IX_Process_Key]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Process_Key]
    ON [meta].[Process]([ProcessName] ASC);


GO
PRINT N'Creating [meta].[SourceSystemType]...';


GO
CREATE TABLE [meta].[SourceSystemType] (
    [SourceSystemTypeId]   VARCHAR (3)    NOT NULL,
    [SourceSystemTypeName] VARCHAR (50)   NOT NULL,
    [LastUpdateTime]       DATETIME2 (7)  NULL,
    [LastChangeUserName]   NVARCHAR (128) NULL,
    CONSTRAINT [PK_SourceSystemType] PRIMARY KEY CLUSTERED ([SourceSystemTypeId] ASC)
);


GO
PRINT N'Creating [meta].[ProcessType]...';


GO
CREATE TABLE [meta].[ProcessType] (
    [ProcessTypeId]      VARCHAR (3)    NOT NULL,
    [ProcessTypeName]    VARCHAR (50)   NOT NULL,
    [LastUpdateTime]     DATETIME2 (7)  NULL,
    [LastChangeUserName] NVARCHAR (128) NULL,
    CONSTRAINT [PK_ProcessType] PRIMARY KEY CLUSTERED ([ProcessTypeId] ASC)
);


GO
PRINT N'Creating [meta].[Template]...';


GO
CREATE TABLE [meta].[Template] (
    [TemplateId]          VARCHAR (50)   NOT NULL,
    [TemplateDescription] VARCHAR (255)  NULL,
    [TemplateAttribute]   VARCHAR (20)   NOT NULL,
    [TemplateText]        NVARCHAR (MAX) NOT NULL,
    [LastUpdateTime]      DATETIME2 (7)  NULL,
    [LastChangeUserName]  NVARCHAR (128) NULL,
    CONSTRAINT [PK_Template] PRIMARY KEY CLUSTERED ([TemplateId] ASC)
);


GO
PRINT N'Creating [audit].[ProcessEntityRelationship]...';


GO
CREATE TABLE [audit].[ProcessEntityRelationship] (
    [LoadDate]                    DATETIME2 (7)  NOT NULL,
    [ProcessEntityRelationshipId] INT            NOT NULL,
    [ProcessId]                   INT            NULL,
    [EntityId]                    INT            NULL,
    [UserName]                    NVARCHAR (128) NULL,
    [Operation]                   CHAR (6)       NOT NULL,
    CONSTRAINT [PK_ProcessEntityRelationship] PRIMARY KEY CLUSTERED ([LoadDate] ASC, [ProcessEntityRelationshipId] ASC)
);


GO
PRINT N'Creating [audit].[EDWEntity]...';


GO
CREATE TABLE [audit].[EDWEntity] (
    [LoadDate]           DATETIME2 (7)  NOT NULL,
    [EntityId]           INT            NOT NULL,
    [EntityName]         VARCHAR (50)   NULL,
    [EntityDescription]  VARCHAR (255)  NULL,
    [EntityTypeId]       VARCHAR (4)    NULL,
    [StorageTypeId]      VARCHAR (3)    NULL,
    [PartitioningTypeId] CHAR (1)       NULL,
    [CreateEntity]       BIT            NULL,
    [UserName]           NVARCHAR (128) NULL,
    [Operation]          CHAR (6)       NOT NULL,
    CONSTRAINT [PK_EDWEntity] PRIMARY KEY CLUSTERED ([LoadDate] ASC, [EntityId] ASC)
);


GO
PRINT N'Creating [audit].[Template]...';


GO
CREATE TABLE [audit].[Template] (
    [LoadDate]            DATETIME2 (7)  NOT NULL,
    [TemplateId]          VARCHAR (50)   NOT NULL,
    [TemplateDescription] VARCHAR (255)  NULL,
    [TemplateAttribute]   VARCHAR (20)   NOT NULL,
    [TemplateText]        NVARCHAR (MAX) NOT NULL,
    [UserName]            NVARCHAR (128) NULL,
    [Operation]           CHAR (6)       NOT NULL,
    CONSTRAINT [PK_Template] PRIMARY KEY CLUSTERED ([LoadDate] ASC, [TemplateId] ASC)
);


GO
PRINT N'Creating [audit].[Tag]...';


GO
CREATE TABLE [audit].[Tag] (
    [LoadDate] DATETIME2 (7) NOT NULL,
    [TagId]    VARCHAR (50)  NOT NULL,
    [TagName]  VARCHAR (255) NULL,
    CONSTRAINT [PK_Tag] PRIMARY KEY CLUSTERED ([LoadDate] ASC, [TagId] ASC)
);


GO
PRINT N'Creating [audit].[Configuration]...';


GO
CREATE TABLE [audit].[Configuration] (
    [LoadDate]  DATETIME2 (7)  NOT NULL,
    [Id]        VARCHAR (50)   NOT NULL,
    [Value]     VARCHAR (50)   NULL,
    [UserName]  NVARCHAR (128) NULL,
    [Operation] CHAR (6)       NOT NULL
);


GO
PRINT N'Creating [audit].[EDWAttribute]...';


GO
CREATE TABLE [audit].[EDWAttribute] (
    [LoadDate]      DATETIME2 (7)  NOT NULL,
    [AttributeId]   INT            NOT NULL,
    [AttributeName] VARCHAR (50)   NULL,
    [EDWEntityId]   INT            NULL,
    [DataTypeId]    INT            NULL,
    [Order]         SMALLINT       NULL,
    [IsStagingOnly] BIT            NULL,
    [UserName]      NVARCHAR (128) NULL,
    [Operation]     CHAR (6)       NOT NULL,
    CONSTRAINT [PK_EDWAttribute] PRIMARY KEY CLUSTERED ([LoadDate] ASC, [AttributeId] ASC)
);


GO
PRINT N'Creating [audit].[EDWEntityRelationship]...';


GO
CREATE TABLE [audit].[EDWEntityRelationship] (
    [LoadDate]             DATETIME2 (7)  NOT NULL,
    [EntityRelationshipId] INT            NOT NULL,
    [HubLnk]               INT            NULL,
    [UsedBy]               INT            NULL,
    [HashKeySuffix]        VARCHAR (50)   NULL,
    [UserName]             NVARCHAR (128) NULL,
    [Operation]            CHAR (6)       NOT NULL,
    CONSTRAINT [PK_EDWEntityRelationship] PRIMARY KEY CLUSTERED ([LoadDate] ASC, [EntityRelationshipId] ASC)
);


GO
PRINT N'Creating [audit].[Process]...';


GO
CREATE TABLE [audit].[Process] (
    [LoadDate]           DATETIME2 (7)  NOT NULL,
    [ProcessId]          INT            NOT NULL,
    [ProcessName]        VARCHAR (50)   NULL,
    [ProcessDescription] VARCHAR (255)  NULL,
    [ProcessTypeId]      VARCHAR (3)    NULL,
    [SourceSystemTypeId] VARCHAR (3)    NULL,
    [ContactInfo]        VARCHAR (255)  NULL,
    [SupportGroup]       VARCHAR (255)  NULL,
    [UserName]           NVARCHAR (100) NULL,
    [Operation]          CHAR (6)       NOT NULL,
    CONSTRAINT [PK_Process] PRIMARY KEY CLUSTERED ([LoadDate] ASC, [ProcessId] ASC)
);


GO
PRINT N'Creating [meta].[DF_EDWEntity_CreateEntity]...';


GO
ALTER TABLE [meta].[EDWEntity]
    ADD CONSTRAINT [DF_EDWEntity_CreateEntity] DEFAULT ((1)) FOR [CreateEntity];


GO
PRINT N'Creating [meta].[FK_EDWAttribute_EDWDataType]...';


GO
ALTER TABLE [meta].[EDWAttribute]
    ADD CONSTRAINT [FK_EDWAttribute_EDWDataType] FOREIGN KEY ([DataTypeId]) REFERENCES [meta].[DataType] ([DataTypeId]);


GO
PRINT N'Creating [meta].[FK_EDWAttribute_EDWEntity]...';


GO
ALTER TABLE [meta].[EDWAttribute]
    ADD CONSTRAINT [FK_EDWAttribute_EDWEntity] FOREIGN KEY ([EDWEntityId]) REFERENCES [meta].[EDWEntity] ([EntityId]);


GO
PRINT N'Creating [meta].[FK_EDWEntity_EntityType]...';


GO
ALTER TABLE [meta].[EDWEntity]
    ADD CONSTRAINT [FK_EDWEntity_EntityType] FOREIGN KEY ([EntityTypeId]) REFERENCES [meta].[EntityType] ([EntityTypeId]);


GO
PRINT N'Creating [meta].[FK_EDWEntity_PartitioningType]...';


GO
ALTER TABLE [meta].[EDWEntity]
    ADD CONSTRAINT [FK_EDWEntity_PartitioningType] FOREIGN KEY ([PartitioningTypeId]) REFERENCES [meta].[PartitioningType] ([PartitioningTypeId]);


GO
PRINT N'Creating [meta].[FK_EDWEntity_StorageType]...';


GO
ALTER TABLE [meta].[EDWEntity]
    ADD CONSTRAINT [FK_EDWEntity_StorageType] FOREIGN KEY ([StorageTypeId]) REFERENCES [meta].[StorageType] ([StorageTypeId]);


GO
PRINT N'Creating [meta].[FK_EDWEntityRelationship_HubLnk_EDWEntity]...';


GO
ALTER TABLE [meta].[EDWEntityRelationship]
    ADD CONSTRAINT [FK_EDWEntityRelationship_HubLnk_EDWEntity] FOREIGN KEY ([HubLnk]) REFERENCES [meta].[EDWEntity] ([EntityId]);


GO
PRINT N'Creating [meta].[FK_EDWEntityRelationship_UsedBy_EDWEntity]...';


GO
ALTER TABLE [meta].[EDWEntityRelationship]
    ADD CONSTRAINT [FK_EDWEntityRelationship_UsedBy_EDWEntity] FOREIGN KEY ([UsedBy]) REFERENCES [meta].[EDWEntity] ([EntityId]);


GO
PRINT N'Creating [meta].[FK_ProcessEntityRelationship_EntityId_EDWEntity]...';


GO
ALTER TABLE [meta].[ProcessEntityRelationship]
    ADD CONSTRAINT [FK_ProcessEntityRelationship_EntityId_EDWEntity] FOREIGN KEY ([EntityId]) REFERENCES [meta].[EDWEntity] ([EntityId]);


GO
PRINT N'Creating [meta].[FK_ProcessEntityRelationship_ProcessId_Process]...';


GO
ALTER TABLE [meta].[ProcessEntityRelationship]
    ADD CONSTRAINT [FK_ProcessEntityRelationship_ProcessId_Process] FOREIGN KEY ([ProcessId]) REFERENCES [meta].[Process] ([ProcessId]);


GO
PRINT N'Creating [meta].[FK_Process_ProcessType]...';


GO
ALTER TABLE [meta].[Process]
    ADD CONSTRAINT [FK_Process_ProcessType] FOREIGN KEY ([ProcessTypeId]) REFERENCES [meta].[ProcessType] ([ProcessTypeId]);


GO
PRINT N'Creating [meta].[FK_Process_SourceSystemType]...';


GO
ALTER TABLE [meta].[Process]
    ADD CONSTRAINT [FK_Process_SourceSystemType] FOREIGN KEY ([SourceSystemTypeId]) REFERENCES [meta].[SourceSystemType] ([SourceSystemTypeId]);


GO
PRINT N'Creating [meta].[EDWAttribute_audit]...';


GO
CREATE TRIGGER [meta].[EDWAttribute_audit]
ON [meta].[EDWAttribute]
AFTER INSERT, DELETE, UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

  INSERT INTO [audit].[EDWAttribute] (
    [LoadDate]
    ,[AttributeId]
    ,[AttributeName]
    ,[EDWEntityId]
    ,[DataTypeId]
    ,[Order]
    ,[IsStagingOnly]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[AttributeId]
    ,[AttributeName]
    ,[EDWEntityId]
    ,[DataTypeId]
    ,[Order]
    ,[IsStagingOnly]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'INSERT'
  FROM inserted i
  WHERE NOT EXISTS (
    SELECT *
    FROM deleted d
    WHERE i.[AttributeId] = d.[AttributeId]);

  INSERT INTO [audit].[EDWAttribute] (
    [LoadDate]
    ,[AttributeId]
    ,[AttributeName]
    ,[EDWEntityId]
    ,[DataTypeId]
    ,[Order]
    ,[IsStagingOnly]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[AttributeId]
    ,[AttributeName]
    ,[EDWEntityId]
    ,[DataTypeId]
    ,[Order]
    ,[IsStagingOnly]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'DELETE'
  FROM deleted i
  WHERE NOT EXISTS (
    SELECT *
    FROM inserted d
    WHERE i.[AttributeId] = d.[AttributeId]);

  INSERT INTO [audit].[EDWAttribute] (
    [LoadDate]
    ,[AttributeId]
    ,[AttributeName]
    ,[EDWEntityId]
    ,[DataTypeId]
    ,[Order]
    ,[IsStagingOnly]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,i.[AttributeId]
    ,i.[AttributeName]
    ,i.[EDWEntityId]
    ,i.[DataTypeId]
    ,i.[Order]
    ,i.[IsStagingOnly]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'UPDATE'
  FROM inserted i
    INNER JOIN deleted d ON i.[AttributeId] = d.[AttributeId];

END
GO
PRINT N'Creating [meta].[EDWEntity_audit]...';


GO
CREATE TRIGGER [meta].[EDWEntity_audit]
ON [meta].[EDWEntity]
AFTER INSERT, DELETE, UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

  INSERT INTO [audit].[EDWEntity] (
    [LoadDate]
    ,[EntityId]
    ,[EntityName]
    ,[EntityDescription]
    ,[EntityTypeId]
    ,[StorageTypeId]
    ,[PartitioningTypeId]
    ,[CreateEntity]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[EntityId]
    ,[EntityName]
    ,[EntityDescription]
    ,[EntityTypeId]
    ,[StorageTypeId]
    ,[PartitioningTypeId]
    ,[CreateEntity]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'INSERT'
  FROM inserted i
  WHERE NOT EXISTS (
    SELECT *
    FROM deleted d
    WHERE i.EntityId = d.EntityId);

  INSERT INTO [audit].[EDWEntity] (
    [LoadDate]
    ,[EntityId]
    ,[EntityName]
    ,[EntityDescription]
    ,[EntityTypeId]
    ,[StorageTypeId]
    ,[PartitioningTypeId]
    ,[CreateEntity]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[EntityId]
    ,[EntityName]
    ,[EntityDescription]
    ,[EntityTypeId]
    ,[StorageTypeId]
    ,[PartitioningTypeId]
    ,[CreateEntity]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'DELETE'
  FROM deleted i
  WHERE NOT EXISTS (
    SELECT *
    FROM inserted d
    WHERE i.EntityId = d.EntityId);

  INSERT INTO [audit].[EDWEntity] (
    [LoadDate]
    ,[EntityId]
    ,[EntityName]
    ,[EntityDescription]
    ,[EntityTypeId]
    ,[StorageTypeId]
    ,[PartitioningTypeId]
    ,[CreateEntity]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,i.[EntityId]
    ,i.[EntityName]
    ,i.[EntityDescription]
    ,i.[EntityTypeId]
    ,i.[StorageTypeId]
    ,i.[PartitioningTypeId]
    ,i.[CreateEntity]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'UPDATE'
  FROM inserted i
    INNER JOIN deleted d ON i.EntityId = d.EntityId;

END
GO
PRINT N'Creating [meta].[Configuration_audit]...';


GO
CREATE TRIGGER [meta].[Configuration_audit]
ON [meta].[Configuration]
AFTER INSERT, DELETE, UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

  INSERT INTO [audit].[Configuration] (
    [LoadDate]
    ,[Id]
    ,[Value]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[Id]
    ,[Value]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'INSERT'
  FROM inserted i
  WHERE NOT EXISTS (
    SELECT *
    FROM deleted d
    WHERE i.[Id] = d.[Id]);

  INSERT INTO [audit].[Configuration] (
    [LoadDate]
    ,[Id]
    ,[Value]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[Id]
    ,[Value]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'DELETE'
  FROM deleted i
  WHERE NOT EXISTS (
    SELECT *
    FROM inserted d
    WHERE i.[Id] = d.[Id]);

  INSERT INTO [audit].[Configuration] (
    [LoadDate]
    ,[Id]
    ,[Value]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,i.[Id]
    ,i.[Value]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'UPDATE'
  FROM inserted i
    INNER JOIN deleted d ON i.[Id] = d.[Id];

END
GO
PRINT N'Creating [meta].[EDWEntityRelationship_audit]...';


GO
CREATE TRIGGER [meta].[EDWEntityRelationship_audit]
ON [meta].[EDWEntityRelationship]
AFTER INSERT, DELETE, UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

  INSERT INTO [audit].[EDWEntityRelationship] (
    [LoadDate]
    ,[EntityRelationshipId]
    ,[HubLnk]
    ,[UsedBy]
    ,[HashKeySuffix]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[EntityRelationshipId]
    ,[HubLnk]
    ,[UsedBy]
    ,[HashKeySuffix]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'INSERT'
  FROM inserted i
  WHERE NOT EXISTS (
    SELECT *
    FROM deleted d
    WHERE i.[EntityRelationshipId] = d.[EntityRelationshipId]);

  INSERT INTO [audit].[EDWEntityRelationship] (
    [LoadDate]
    ,[EntityRelationshipId]
    ,[HubLnk]
    ,[UsedBy]
    ,[HashKeySuffix]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[EntityRelationshipId]
    ,[HubLnk]
    ,[UsedBy]
    ,[HashKeySuffix]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'DELETE'
  FROM deleted i
  WHERE NOT EXISTS (
    SELECT *
    FROM inserted d
    WHERE i.[EntityRelationshipId] = d.[EntityRelationshipId]);

  INSERT INTO [audit].[EDWEntityRelationship] (
    [LoadDate]
    ,[EntityRelationshipId]
    ,[HubLnk]
    ,[UsedBy]
    ,[HashKeySuffix]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,i.[EntityRelationshipId]
    ,i.[HubLnk]
    ,i.[UsedBy]
    ,i.[HashKeySuffix]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'UPDATE'
  FROM inserted i
    INNER JOIN deleted d ON i.[EntityRelationshipId] = d.[EntityRelationshipId];

END
GO
PRINT N'Creating [meta].[ProcessEntityRelationship_audit]...';


GO
CREATE TRIGGER [meta].[ProcessEntityRelationship_audit]
ON [meta].[ProcessEntityRelationship]
AFTER INSERT, DELETE, UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

  INSERT INTO [audit].[ProcessEntityRelationship] (
    [LoadDate]
    ,[ProcessEntityRelationshipId]
    ,[ProcessId]
    ,[EntityId]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[ProcessEntityRelationshipId]
    ,[ProcessId]
    ,[EntityId]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'INSERT'
  FROM inserted i
  WHERE NOT EXISTS (
    SELECT *
    FROM deleted d
    WHERE i.[ProcessEntityRelationshipId] = d.[ProcessEntityRelationshipId]);

  INSERT INTO [audit].[ProcessEntityRelationship] (
    [LoadDate]
    ,[ProcessEntityRelationshipId]
    ,[ProcessId]
    ,[EntityId]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[ProcessEntityRelationshipId]
    ,[ProcessId]
    ,[EntityId]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'DELETE'
  FROM deleted i
  WHERE NOT EXISTS (
    SELECT *
    FROM inserted d
    WHERE i.[ProcessEntityRelationshipId] = d.[ProcessEntityRelationshipId]);

  INSERT INTO [audit].[ProcessEntityRelationship] (
    [LoadDate]
    ,[ProcessEntityRelationshipId]
    ,[ProcessId]
    ,[EntityId]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,i.[ProcessEntityRelationshipId]
    ,i.[ProcessId]
    ,i.[EntityId]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'UPDATE'
  FROM inserted i
    INNER JOIN deleted d ON i.[ProcessEntityRelationshipId] = d.[ProcessEntityRelationshipId];

END
GO
PRINT N'Creating [meta].[Process_audit]...';


GO
CREATE TRIGGER [meta].[Process_audit]
ON [meta].[Process]
AFTER INSERT, DELETE, UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

  INSERT INTO [audit].[Process] (
    [LoadDate]
    ,[ProcessId]
    ,[ProcessName]
    ,[ProcessDescription]
    ,[ProcessTypeId]
    ,[SourceSystemTypeId]
    ,[ContactInfo]
    ,[SupportGroup]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[ProcessId]
    ,[ProcessName]
    ,[ProcessDescription]
    ,[ProcessTypeId]
    ,[SourceSystemTypeId]
    ,[ContactInfo]
    ,[SupportGroup]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'INSERT'
  FROM inserted i
  WHERE NOT EXISTS (
    SELECT *
    FROM deleted d
    WHERE i.[ProcessId] = d.[ProcessId]);

  INSERT INTO [audit].[Process] (
    [LoadDate]
    ,[ProcessId]
    ,[ProcessName]
    ,[ProcessDescription]
    ,[ProcessTypeId]
    ,[SourceSystemTypeId]
    ,[ContactInfo]
    ,[SupportGroup]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[ProcessId]
    ,[ProcessName]
    ,[ProcessDescription]
    ,[ProcessTypeId]
    ,[SourceSystemTypeId]
    ,[ContactInfo]
    ,[SupportGroup]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'DELETE'
  FROM deleted i
  WHERE NOT EXISTS (
    SELECT *
    FROM inserted d
    WHERE i.[ProcessId] = d.[ProcessId]);

  INSERT INTO [audit].[Process] (
    [LoadDate]
    ,[ProcessId]
    ,[ProcessName]
    ,[ProcessDescription]
    ,[ProcessTypeId]
    ,[SourceSystemTypeId]
    ,[ContactInfo]
    ,[SupportGroup]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,i.[ProcessId]
    ,i.[ProcessName]
    ,i.[ProcessDescription]
    ,i.[ProcessTypeId]
    ,i.[SourceSystemTypeId]
    ,i.[ContactInfo]
    ,i.[SupportGroup]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'UPDATE'
  FROM inserted i
    INNER JOIN deleted d ON i.[ProcessId] = d.[ProcessId];

END
GO
PRINT N'Creating [meta].[Template_audit]...';


GO

CREATE TRIGGER [meta].[Template_audit]
ON [meta].[Template]
AFTER INSERT, DELETE, UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

  INSERT INTO [audit].[Template] (
    [LoadDate]
    ,[TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[TemplateText]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[TemplateText]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'INSERT'
  FROM inserted i
  WHERE NOT EXISTS (
    SELECT *
    FROM deleted d
    WHERE i.[TemplateId] = d.[TemplateId]);

  INSERT INTO [audit].[Template] (
    [LoadDate]
    ,[TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[TemplateText]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,[TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[TemplateText]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'DELETE'
  FROM deleted i
  WHERE NOT EXISTS (
    SELECT *
    FROM inserted d
    WHERE i.[TemplateId] = d.[TemplateId]);

  INSERT INTO [audit].[Template] (
    [LoadDate]
    ,[TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[TemplateText]
    ,[UserName]
    ,[Operation])
  SELECT 
    [LoadDate] = SYSUTCDATETIME()
    ,i.[TemplateId]
    ,i.[TemplateDescription]
    ,i.[TemplateAttribute]
    ,i.[TemplateText]
    ,[UserName] = CURRENT_USER
    ,[Operation] = 'UPDATE'
  FROM inserted i
    INNER JOIN deleted d ON i.[TemplateId] = d.[TemplateId];

END
GO
PRINT N'Creating [dbo].[Rand]...';


GO
CREATE VIEW [dbo].[Rand]

AS 

SELECT RAND() AS Rnd
GO
PRINT N'Creating [dbo].[SqlInstanceMajorVersion]...';


GO
CREATE FUNCTION [dbo].[SqlInstanceMajorVersion] ()
RETURNS INT
AS
BEGIN
	RETURN CONVERT(INT, @@MICROSOFTVERSION / 0x01000000);
END
GO
PRINT N'Creating [dbo].[PhysicalFileNameLog]...';


GO
CREATE FUNCTION [dbo].[PhysicalFileNameLog] 
(
  @DbName VARCHAR(50)
  ,@LogicalFileName VARCHAR(60)
)
RETURNS VARCHAR(255)
AS
BEGIN
  DECLARE @InstanceDefaultDataPath VARCHAR(200) = CONVERT(VARCHAR(200), SERVERPROPERTY('InstanceDefaultDataPath'));

	RETURN 
    CASE 
      WHEN RIGHT(@InstanceDefaultDataPath, 1) = '\'
        THEN CONCAT(@InstanceDefaultDataPath, REPLACE(REPLACE(REPLACE(@DbName, '[', ''), ']', ''), '''', ''), '_', @LogicalFileName, '.ldf')
        ELSE CONCAT(@InstanceDefaultDataPath, '\', REPLACE(REPLACE(REPLACE(@DbName, '[', ''), ']', ''), '''', ''), '_', @LogicalFileName, '.ldf')
    END;
END
GO
PRINT N'Creating [dbo].[PhysicalFileName]...';


GO
CREATE FUNCTION [dbo].[PhysicalFileName] 
(
  @DbName VARCHAR(50)
  ,@LogicalFileName VARCHAR(60)
)
RETURNS VARCHAR(255)
AS
BEGIN
  DECLARE @InstanceDefaultDataPath VARCHAR(200) = CONVERT(VARCHAR(200), SERVERPROPERTY('InstanceDefaultDataPath'));

	RETURN 
    CASE 
      WHEN RIGHT(@InstanceDefaultDataPath, 1) = '\'
        THEN CONCAT(@InstanceDefaultDataPath, REPLACE(REPLACE(REPLACE(@DbName, '[', ''), ']', ''), '''', ''), '_', @LogicalFileName, '.mdf')
        ELSE CONCAT(@InstanceDefaultDataPath, '\', REPLACE(REPLACE(REPLACE(@DbName, '[', ''), ']', ''), '''', ''), '_', @LogicalFileName, '.mdf')
    END;
END
GO
PRINT N'Creating [dbo].[NewLogicalFileName]...';


GO
CREATE FUNCTION [dbo].[NewLogicalFileName] 
(
  @FileGroupName VARCHAR(50)
)
RETURNS VARCHAR(60)
AS
BEGIN
	RETURN CONCAT(REPLACE(REPLACE(REPLACE(@FileGroupName, '[', ''), ']', ''), '''', ''), '_', CONVERT(INT, (SELECT Rnd FROM [dbo].[Rand]) * 100000));
END
GO
PRINT N'Creating [dbo].[SqlInstanceOnPrem]...';


GO
CREATE FUNCTION [dbo].[SqlInstanceOnPrem] ()
RETURNS bit
AS
BEGIN
	RETURN CASE WHEN SERVERPROPERTY('InstanceDefaultDataPath') IS NULL THEN 0 ELSE 1 END;
END
GO
PRINT N'Creating [meta].[WarehouseDbName]...';


GO
CREATE FUNCTION [meta].[WarehouseDbName] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT CONCAT('[', [Value], ']') FROM meta.[Configuration] WHERE Id = 'WarehouseDbName');
END
GO
PRINT N'Creating [meta].[WarehouseRawSchema]...';


GO
CREATE FUNCTION [meta].[WarehouseRawSchema] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT CONCAT('[', [Value], ']') FROM meta.[Configuration] WHERE Id = 'WarehouseRawSchema');
END
GO
PRINT N'Creating [meta].[WarehouseBusinessSchema]...';


GO
CREATE FUNCTION [meta].[WarehouseBusinessSchema] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT CONCAT('[', [Value], ']') FROM meta.[Configuration] WHERE Id = 'WarehouseBusinessSchema');
END
GO
PRINT N'Creating [meta].[StagingSchema]...';


GO
CREATE FUNCTION [meta].[StagingSchema] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT CONCAT('[', [Value], ']') FROM meta.[Configuration] WHERE Id = 'StagingSchema');
END
GO
PRINT N'Creating [meta].[EntityTypeId]...';


GO
CREATE FUNCTION [meta].[EntityTypeId]
(
	@EntityId int
)
RETURNS varchar(4)
AS
BEGIN
	RETURN (SELECT EntityTypeId FROM meta.EDWEntity WHERE EntityId = @EntityId);
END
GO
PRINT N'Creating [meta].[EntityName]...';


GO
CREATE FUNCTION [meta].[EntityName]
(
	@EntityId int
)
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT EntityName FROM meta.EDWEntity WHERE EntityId = @EntityId);
END
GO
PRINT N'Creating [meta].[EntityId]...';


GO
CREATE FUNCTION [meta].[EntityId]
(
	@EntityName varchar(50),
	@EntityType varchar(4)
)
RETURNS INT
AS
BEGIN
	RETURN (SELECT EntityId FROM meta.EDWEntity WHERE EntityName = @EntityName AND EntityTypeId = @EntityType);
END
GO
PRINT N'Creating [meta].[EntityViewName]...';


GO
CREATE FUNCTION [meta].[EntityViewName]
(
	@EntityId int
)
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT CONCAT('v', EntityName) FROM meta.EDWEntity WHERE EntityId = @EntityId);
END
GO
PRINT N'Creating [meta].[EntityViewNameStaging]...';


GO
CREATE FUNCTION [meta].[EntityViewNameStaging]
(
	@EntityId int
)
RETURNS varchar(255)
AS
BEGIN
	RETURN (SELECT CONCAT(meta.StagingSchema(), '.[v', EntityName, ']') FROM meta.EDWEntity WHERE EntityId = @EntityId);
END
GO
PRINT N'Creating [meta].[SqlDataType]...';


GO
CREATE FUNCTION [meta].[SqlDataType]
(
	@DataTypeId int
)
RETURNS VARCHAR(50)
AS
BEGIN
	RETURN (SELECT SqlDataType FROM meta.DataTypeMapping WHERE DataTypeId = @DataTypeId);
END
GO
PRINT N'Creating [meta].[CurrentEnvironment]...';


GO
CREATE FUNCTION [meta].[CurrentEnvironment] ()
RETURNS varchar(50)
AS
BEGIN
	DECLARE @Environment varchar(50) = (SELECT [Value] FROM meta.Environment WHERE [Id] = 'Environment');

	RETURN ISNULL(@Environment, 'Unknown');
END
GO
PRINT N'Creating [meta].[MetaDbName]...';


GO
CREATE FUNCTION [meta].[MetaDbName] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN CONCAT('[', DB_NAME(), ']');
END
GO
PRINT N'Creating [meta].[StagingDbName]...';


GO
CREATE FUNCTION [meta].[StagingDbName] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT CONCAT('[', [Value], ']') FROM meta.[Configuration] WHERE Id = 'StagingDbName');
END
GO
PRINT N'Creating [meta].[PartitionFunction]...';


GO
CREATE FUNCTION [meta].[PartitionFunction]
(
	@EntityId int
)
RETURNS varchar(255)
AS
BEGIN
	RETURN (SELECT CONCAT('[PFn_', EntityTypeId, '_', EntityName, ']') FROM meta.EDWEntity WHERE EntityId = @EntityId);
END
GO
PRINT N'Creating [meta].[PartitionSchemeIndex]...';


GO
CREATE FUNCTION [meta].[PartitionSchemeIndex]
(
	@EntityId int
)
RETURNS varchar(255)
AS
BEGIN
	RETURN (SELECT CONCAT('[PSch_', EntityTypeId, '_', EntityName, '_Index]') FROM meta.EDWEntity WHERE EntityId = @EntityId);
END
GO
PRINT N'Creating [meta].[PartitionSchemeData]...';


GO
CREATE FUNCTION [meta].[PartitionSchemeData]
(
	@EntityId int
)
RETURNS varchar(255)
AS
BEGIN
	RETURN (SELECT CONCAT('[PSch_', EntityTypeId, '_', EntityName, '_Data]') FROM meta.EDWEntity WHERE EntityId = @EntityId);
END
GO
PRINT N'Creating [meta].[PartitioningTypeId]...';


GO
CREATE FUNCTION [meta].[PartitioningTypeId]
(
	@EntityId int
)
RETURNS char(1)
AS
BEGIN
	RETURN (SELECT PartitioningTypeId FROM meta.EDWEntity WHERE EntityId = @EntityId);
END
GO
PRINT N'Creating [meta].[HashAlgorithm]...';


GO
CREATE FUNCTION [meta].[HashAlgorithm] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT [Value] FROM meta.[Configuration] WHERE Id = 'HashAlgorithm');
END
GO
PRINT N'Creating [meta].[StorageTypeId]...';


GO
CREATE FUNCTION [meta].[StorageTypeId]
(
	@EntityId int
)
RETURNS varchar(3)
AS
BEGIN
	RETURN (SELECT StorageTypeId FROM meta.EDWEntity WHERE EntityId = @EntityId);
END
GO
PRINT N'Creating [meta].[SqlDataTypeHashKey]...';


GO
CREATE FUNCTION [meta].[SqlDataTypeHashKey] ()
RETURNS VARCHAR(50)
AS
BEGIN
  RETURN
    CASE (SELECT [Value] FROM meta.[Configuration] WHERE Id = 'HashAlgorithm')
      WHEN 'MD5' THEN 'char(32)'
	  WHEN 'SHA' THEN 'char(40)'
	  WHEN 'SHA1' THEN 'char(40)'
	  WHEN 'SHA2_256' THEN 'char(64)'
	  WHEN 'SHA2_512' THEN 'char(128)'
	  ELSE 'Hash algorithm not supported.'
  END;
END
GO
PRINT N'Creating [meta].[HubLnkEntityTypeId]...';


GO
CREATE FUNCTION [meta].[HubLnkEntityTypeId]
(
	@EntityId int
)
RETURNS varchar(4)
AS
BEGIN
	RETURN (SELECT DISTINCT [meta].[EntityTypeId]([HubLnk]) FROM [meta].[EDWEntityRelationship] WHERE [HubLnk] =  @EntityId);
END
GO
PRINT N'Creating [meta].[EntityTypeName]...';


GO
CREATE FUNCTION [meta].[EntityTypeName]
(
	@EntityId int
)
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT EntityTypeName 
	        FROM 
		   meta.EDWEntity e
	        INNER JOIN 
		   meta.EntityType t
	        ON e.EntityTypeId = t.EntityTypeId	
	        WHERE EntityId = @EntityId
	);
END
GO
PRINT N'Creating [meta].[SqlDataTypeHashKeyLength]...';


GO
CREATE FUNCTION [meta].[SqlDataTypeHashKeyLength] ()
RETURNS INT
AS
BEGIN
  RETURN
    CASE [meta].[HashAlgorithm]()
      WHEN 'MD5' THEN 32
	    WHEN 'SHA' THEN 40
	    WHEN 'SHA1' THEN 40
	    WHEN 'SHA2_256' THEN 64
	    WHEN 'SHA2_512' THEN 128
	  ELSE 0
  END;
END
GO
PRINT N'Creating [meta].[DateRangeEnd]...';


GO
CREATE FUNCTION [meta].[DateRangeEnd] ()
RETURNS CHAR(10)
AS
BEGIN
  RETURN '9999-12-31';
END
GO
PRINT N'Creating [meta].[DateRangeStart]...';


GO
CREATE FUNCTION [meta].[DateRangeStart] ()
RETURNS CHAR(10)
AS
BEGIN
  RETURN '0001-01-01';
END
GO
PRINT N'Creating [meta].[EntityTableNameEDW]...';


GO
CREATE FUNCTION [meta].[EntityTableNameEDW]
(
	@EntityId int
  ,@OverrideWithViewName bit
)
RETURNS varchar(255)
AS
BEGIN
	RETURN (SELECT CONCAT(CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END, '.[', IIF(@OverrideWithViewName = 0, CASE WHEN meta.EntityTypeId(@EntityId) IN ('Sat') THEN 'tbl_' ELSE '' END, ''), EntityTypeId, '_', EntityName, ']') FROM meta.EDWEntity WHERE EntityId = @EntityId);
END
GO
PRINT N'Creating [meta].[VirtualizedLoadEndDate]...';


GO
CREATE FUNCTION [meta].[VirtualizedLoadEndDate] ()
RETURNS bit
AS
BEGIN
	RETURN (SELECT CONVERT(BIT, LTRIM([Value])) FROM meta.[Configuration] WHERE Id = 'VirtualizedLoadEndDate');
END
GO
PRINT N'Creating [meta].[AttributeNameMasterDuplicate]...';


GO
CREATE FUNCTION [meta].[AttributeNameMasterDuplicate]
(
	@AttributeId int,
  @IsMaster bit
)
RETURNS varchar(100)
AS
BEGIN
  DECLARE @AttributeName varchar(100) = (SELECT AttributeName FROM meta.EDWAttribute WHERE AttributeId = @AttributeId);

  IF @IsMaster = 1
    SET @AttributeName += '_Master';
  ELSE
    SET @AttributeName += '_Duplicate';

	RETURN @AttributeName;
END
GO
PRINT N'Creating [meta].[EntityNameLookupError]...';


GO
CREATE FUNCTION [meta].[EntityNameLookupError]
(
	@EntityId int
)
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT CONCAT(EntityName, '_Lookup') FROM meta.EDWEntity WHERE EntityId = @EntityId);
END
GO
PRINT N'Creating [meta].[WarehouseErrorSchema]...';


GO
CREATE FUNCTION [meta].[WarehouseErrorSchema] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT CONCAT('[', [Value], ']') FROM meta.[Configuration] WHERE Id = 'WarehouseErrorSchema');
END
GO
PRINT N'Creating [meta].[CreateEntity]...';


GO
CREATE FUNCTION [meta].[CreateEntity]
(
	@EntityId int
)
RETURNS BIT
AS
BEGIN
	RETURN (SELECT CreateEntity FROM meta.EDWEntity WHERE EntityId = @EntityId);
END
GO
PRINT N'Creating [meta].[DefaultHashKey]...';


GO
CREATE FUNCTION [meta].[DefaultHashKey] ()
RETURNS VARCHAR(255)
AS
BEGIN
  RETURN (SELECT REPLICATE('0', meta.SqlDataTypeHashKeyLength()));
END
GO
PRINT N'Creating [meta].[DataTypeSize]...';


GO
CREATE FUNCTION [meta].[DataTypeSize]
(
	@DataTypeId int
)
RETURNS INT
AS
BEGIN
	RETURN (SELECT Size FROM meta.DataType WHERE DataTypeId = @DataTypeId);
END
GO
PRINT N'Creating [meta].[LegacyNonUnicodeInputForHash]...';


GO
CREATE FUNCTION [meta].[LegacyNonUnicodeInputForHash] ()
RETURNS bit
AS
BEGIN
  DECLARE @Value BIT = (SELECT CONVERT(BIT, LTRIM([Value])) FROM meta.[Configuration] WHERE Id = 'LegacyNonUnicodeInputForHash');
	
  RETURN ISNULL(@Value, 0);
END
GO
PRINT N'Creating [meta].[ParentEntityId]...';


GO
CREATE FUNCTION [meta].[ParentEntityId]
(
	@EntityId int
)
RETURNS int
AS
BEGIN
	RETURN (SELECT TOP 1 HubLnk FROM meta.EDWEntityRelationship WHERE UsedBy = @EntityId);
END
GO
PRINT N'Creating [meta].[FileGroupPrimary]...';


GO
CREATE FUNCTION [meta].[FileGroupPrimary] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN '[PRIMARY]';
END
GO
PRINT N'Creating [meta].[RowStoreCompressionLevel]...';


GO
CREATE FUNCTION [meta].[RowStoreCompressionLevel] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT CASE CONVERT(BIT, LTRIM([Value])) WHEN 1 THEN 'ROW' ELSE 'NONE' END FROM meta.[Configuration] WHERE Id = 'CompressRowStore');
END
GO
PRINT N'Creating [meta].[CurrentSchemaVersion]...';


GO
CREATE FUNCTION [meta].[CurrentSchemaVersion] ()
RETURNS varchar(50)
AS
BEGIN
	DECLARE @SchemaVersion varchar(50) = (SELECT [Value] FROM meta.Environment WHERE [Id] = 'SchemaVersion');

	RETURN ISNULL(@SchemaVersion, 'Unknown');
END
GO
PRINT N'Creating [meta].[CleanSuffix]...';


GO
CREATE FUNCTION [meta].[CleanSuffix]
(
	@Suffix varchar(50)
)
RETURNS varchar(51)
AS
BEGIN
	RETURN CASE WHEN LTRIM(RTRIM(ISNULL(@Suffix, ''))) != '' THEN CONCAT('_', @Suffix) ELSE '' END;
END
GO
PRINT N'Creating [meta].[HashDelimiter]...';


GO
CREATE FUNCTION [meta].[HashDelimiter] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT [Value] FROM meta.[Configuration] WHERE Id = 'HashDelimiter');
END
GO
PRINT N'Creating [meta].[HashCulture]...';


GO
CREATE FUNCTION [meta].[HashCulture] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN (SELECT [Value] FROM meta.[Configuration] WHERE Id = 'HashCulture');
END
GO
PRINT N'Creating [meta].[ColumnForHash]...';


GO
CREATE FUNCTION [meta].[ColumnForHash]
(
  @ColumnName varchar(255)
	,@DataTypeId int
)
RETURNS varchar(500)
AS
BEGIN
  SET @ColumnName = LTRIM(RTRIM(@ColumnName));

  IF NOT 
     (
      LEFT(@ColumnName, 1) = '@'
        OR 
        (
          LEFT(@ColumnName, 1) = '['
            AND RIGHT(@ColumnName, 1) = ']'
        )
      )
    SET @ColumnName = CONCAT('[', @ColumnName, ']');

	RETURN
    CASE 
      WHEN @DataTypeId IN (13, 14, 22) THEN CONCAT('FORMAT(', @ColumnName, ', ''G'', ''', meta.HashCulture(), ''')')
      WHEN @DataTypeId IN (15, 16, 17, 18) THEN CONCAT('FORMAT(', @ColumnName, ', ''O'')')
      WHEN @DataTypeId IN (19) THEN CONCAT('FORMAT(', @ColumnName, ', ''hh\:mm\:ss\.fffffff'')')
      ELSE @ColumnName
    END;
END
GO
PRINT N'Creating [meta].[DisabledForeignKey]...';


GO
CREATE FUNCTION [meta].[DisabledForeignKey] ()
RETURNS bit
AS
BEGIN
	RETURN (SELECT CONVERT(BIT, LTRIM([Value])) FROM meta.[Configuration] WHERE Id = 'DisabledForeignKey');
END
GO
PRINT N'Creating [meta].[TemplateText]...';


GO
CREATE FUNCTION [meta].[TemplateText]
(
  @TemplateId VARCHAR(50)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
	RETURN (SELECT [TemplateText] FROM [meta].[Template] WHERE [TemplateId] = @TemplateId);
END
GO
PRINT N'Creating [meta].[EntityKeyColumn]...';


GO
CREATE FUNCTION [meta].[EntityKeyColumn]
(
	@EntityId int
)
RETURNS varchar(255)
AS
BEGIN
  DECLARE @KeyColumn varchar(255);

	IF meta.EntityTypeId(@EntityId) IN ('Hub', 'Lnk')
	  SELECT @KeyColumn = CONCAT('[HK_', EntityName, ']') FROM meta.EDWEntity WHERE EntityId = @EntityId

	IF meta.EntityTypeId(@EntityId) IN ('Sat', 'TSat', 'RSat')
	  SELECT @KeyColumn = CONCAT('[HK_', meta.EntityName([HubLnk]), ']') FROM meta.EDWEntityRelationship WHERE UsedBy = @EntityId
	
	IF meta.EntityTypeId(@EntityId) IN ('Pit', 'Br')
	  SELECT @KeyColumn = CONCAT('[HK_', meta.EntityTypeId(@EntityId), '_', EntityName, ']') FROM meta.EDWEntity WHERE EntityId = @EntityId

  IF meta.EntityTypeId(@EntityId) IN ('SAL')
	  SELECT @KeyColumn = CONCAT('[HK_SAL_', EntityName, ']') FROM meta.EDWEntity WHERE EntityId = @EntityId

	RETURN @KeyColumn;
END
GO
PRINT N'Creating [meta].[EntityTableNameStaging]...';


GO
CREATE FUNCTION [meta].[EntityTableNameStaging]
(
	@EntityId int
)
RETURNS varchar(255)
AS
BEGIN
	RETURN (SELECT CONCAT(meta.StagingSchema(), '.[', EntityName, ']') FROM meta.EDWEntity WHERE EntityId = @EntityId);
END
GO
PRINT N'Creating [meta].[EntityTableName]...';


GO
CREATE FUNCTION [meta].[EntityTableName]
(
	@EntityId int
)
RETURNS varchar(255)
AS
BEGIN
	RETURN meta.EntityTableNameEDW(@EntityId, 0);
END
GO
PRINT N'Creating [meta].[FileGroupIndex]...';


GO
CREATE FUNCTION [meta].[FileGroupIndex] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN
    CASE
      WHEN dbo.SqlInstanceOnPrem() = 1
        THEN (SELECT CONCAT('[', [Value], ']') FROM meta.[Configuration] WHERE Id = 'FileGroupIndex')
        ELSE meta.FileGroupPrimary()
    END;
END
GO
PRINT N'Creating [meta].[FileGroupData]...';


GO
CREATE FUNCTION [meta].[FileGroupData] ()
RETURNS varchar(50)
AS
BEGIN
	RETURN
    CASE
      WHEN dbo.SqlInstanceOnPrem() = 1
        THEN (SELECT CONCAT('[', [Value], ']') FROM meta.[Configuration] WHERE Id = 'FileGroupData')
        ELSE meta.FileGroupPrimary()
    END;
END
GO
PRINT N'Creating [meta].[EntityTableNameLookupError]...';


GO
CREATE FUNCTION [meta].[EntityTableNameLookupError]
(
	@HubLnk int
  ,@UsedBy int
  ,@HashKeySuffix varchar(50)
)
RETURNS varchar(255)
AS
BEGIN
	RETURN (SELECT CONCAT(meta.WarehouseErrorSchema(), '.[', meta.EntityTypeId(@UsedBy), '_', meta.EntityNameLookupError(@UsedBy), CASE meta.EntityTypeId(@UsedBy) WHEN 'Lnk' THEN CONCAT('_', meta.EntityName(@HubLnk), @HashKeySuffix) END, ']'));
END
GO
PRINT N'Creating [meta].[EntityKeyColumnWithSuffix]...';


GO
CREATE FUNCTION [meta].[EntityKeyColumnWithSuffix]
(
	@EntityId int,
  @Suffix varchar(50)
)
RETURNS varchar(255)
AS
BEGIN
	RETURN CONCAT('[', REPLACE(REPLACE(meta.EntityKeyColumn(@EntityId), '[', ''), ']', ''), @Suffix, ']');
END
GO
PRINT N'Creating [meta].[EntityKeyColumnMasterDuplicate]...';


GO
CREATE FUNCTION [meta].[EntityKeyColumnMasterDuplicate]
(
	@EntityId int,
  @IsMaster bit
)
RETURNS varchar(255)
AS
BEGIN
  DECLARE @Suffix varchar(50);

  IF @IsMaster = 1
    SET @Suffix = '_Master';
  ELSE
    SET @Suffix = '_Duplicate';

	RETURN meta.EntityKeyColumnWithSuffix(@EntityId, @Suffix);
END
GO
PRINT N'Creating [meta].[UsedByEntityTypeId]...';


GO
create FUNCTION [meta].[UsedByEntityTypeId]
(
  @EntityId int
)
RETURNS TABLE 
AS
RETURN 
(
  SELECT DISTINCT [meta].[EntityTypeId]([UsedBy]) AS UsedBy FROM [meta].[EDWEntityRelationship] WHERE [HubLnk] =  @EntityId
)
GO
PRINT N'Creating [meta].[ValidateModel]...';


GO
CREATE FUNCTION [meta].[ValidateModel]()
RETURNS @BrokenRule TABLE
(
  [RuleId] int
  ,[RuleCategory] varchar(50)
  ,[RuleName] varchar(50)
  ,[Reason] varchar(255)
  ,[EntityId] int
  ,[EntityTypeName] varchar(50)
  ,[EntityName] varchar(50)
)
AS
BEGIN
  DECLARE @RuleId int
    ,@RuleCategory varchar(50)
    ,@RuleName varchar(50)
    ,@Reason varchar(255);

  -- Rule 1
  SET @RuleId = 1;
  SET @RuleCategory = 'Model';
  SET @RuleName = 'Not Related Entities';
  SET @Reason = 'Lnk, Sat, TSat, RSat, SAL, Pit, Br entities must have relationships defined.';

  INSERT INTO @BrokenRule
  SELECT DISTINCT 
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,EntityId
    ,meta.EntityTypeId(EntityId)
    ,meta.EntityName(EntityId)
  FROM meta.EDWEntity E
  WHERE meta.EntityTypeId(EntityId) NOT IN ('Hub')
    AND NOT EXISTS 
    (
      SELECT *
      FROM meta.EDWEntityRelationship ER
      WHERE E.EntityId = ER.UsedBy
    );

  -- Rule 2
  SET @RuleId = 2;
  SET @RuleCategory = 'Model';
  SET @RuleName = 'meta.EDWEntityRelationship.HubLnk content';
  SET @Reason = 'Column HubLnk in meta.EDWEntityRelationship must contain Hub or Lnk enitities only.';

  INSERT INTO @BrokenRule
  SELECT DISTINCT 
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,HubLnk
    ,meta.EntityTypeId(HubLnk)
    ,meta.EntityName(HubLnk)
  FROM meta.EDWEntityRelationship 
  WHERE meta.EntityTypeId(HubLnk) NOT IN ('Hub', 'Lnk');

  -- Rule 3
  SET @RuleId = 3;
  SET @RuleCategory = 'Model';
  SET @RuleName = 'meta.EDWEntityRelationship.UsedBy content';
  SET @Reason = 'Column UsedBy in meta.EDWEntityRelationship must NOT contain Hub enitities.';

  INSERT INTO @BrokenRule
  SELECT DISTINCT 
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,UsedBy
    ,meta.EntityTypeId(UsedBy)
    ,meta.EntityName(UsedBy)
  FROM meta.EDWEntityRelationship 
  WHERE meta.EntityTypeId(UsedBy) IN ('Hub');

  -- Rule 4
  SET @RuleId = 4;
  SET @RuleCategory = 'Model';
  SET @RuleName = 'Entity relationship check - Count';
  SET @Reason = 'Sat, TSat, RSat, SAL entities can only be related to one entity.';

  INSERT INTO @BrokenRule
  SELECT 
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,UsedBy
    ,meta.EntityTypeId(UsedBy)
    ,meta.EntityName(UsedBy)
  FROM meta.EDWEntityRelationship 
  WHERE meta.EntityTypeId(UsedBy) IN ('Sat', 'TSat', 'RSat', 'SAL')
  GROUP BY UsedBy
  HAVING COUNT(*) != 1;

  -- Rule 5
  SET @RuleId = 5;
  SET @RuleCategory = 'Model';
  SET @RuleName = 'Hub relationship check';
  SET @Reason = 'Hub entity can only be related to Lnk, Sat, TSat, SAL, Pit, Br.';

  INSERT INTO @BrokenRule
  SELECT DISTINCT 
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,UsedBy
    ,meta.EntityTypeId(HubLnk)
    ,meta.EntityName(HubLnk)
  FROM meta.EDWEntityRelationship 
  WHERE meta.EntityTypeId(HubLnk) = 'Hub'
    AND meta.EntityTypeId(UsedBy) NOT IN ('Lnk', 'Sat', 'TSat', 'SAL', 'Pit', 'Br');

  -- Rule 6
  SET @RuleId = 6;
  SET @RuleCategory = 'Model';
  SET @RuleName = 'Link parent relationship check';
  SET @Reason = 'Link entity can only be parent for Sat, TSat, RSat, Pit, Br.';

  INSERT INTO @BrokenRule
  SELECT DISTINCT 
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,UsedBy
    ,meta.EntityTypeId(HubLnk)
    ,meta.EntityName(HubLnk)
  FROM meta.EDWEntityRelationship 
  WHERE meta.EntityTypeId(HubLnk) = 'Lnk'
    AND meta.EntityTypeId(UsedBy) NOT IN ('Sat', 'TSat', 'RSat', 'Pit', 'Br');

  -- Rule 7
  SET @RuleId = 7;
  SET @RuleCategory = 'Model';
  SET @RuleName = 'Hub-Link relationship check';
  SET @Reason = 'Lnk entity in UsedBy column must have at least 2 records with a Hub in HubLnk column.';

  INSERT INTO @BrokenRule
  SELECT 
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,UsedBy
    ,meta.EntityTypeId(UsedBy)
    ,meta.EntityName(UsedBy)
  FROM meta.EDWEntityRelationship 
  WHERE meta.EntityTypeId(HubLnk) = 'Hub'
    AND meta.EntityTypeId(UsedBy) = 'Lnk'
  GROUP BY UsedBy
  HAVING COUNT(*) < 2;

  -- Rule 8
  SET @RuleId = 8;
  SET @RuleCategory = 'Model';
  SET @RuleName = 'Hub, Sat, TSat attribute check';
  SET @Reason = 'Hub, Sat, TSat entities must contain at least 1 attribute.';

  INSERT INTO @BrokenRule
  SELECT DISTINCT
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,EntityId
    ,meta.EntityTypeId(EntityId)
    ,meta.EntityName(EntityId)
  FROM meta.EDWEntity E
  WHERE meta.EntityTypeId(EntityId) IN ('Hub', 'Sat', 'TSat')
    AND NOT EXISTS 
    (
      SELECT *
	    FROM meta.EDWAttribute A 
	    WHERE E.EntityId = A.EDWEntityId
    );

  -- Rule 9
  SET @RuleId = 9;
  SET @RuleCategory = 'Model';
  SET @RuleName = 'RSat, SAL, Pit attribute check';
  SET @Reason = 'RSat, SAL, Pit entities must NOT contain any attribute.';

  INSERT INTO @BrokenRule
  SELECT DISTINCT
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,EntityId
    ,meta.EntityTypeId(EntityId)
    ,meta.EntityName(EntityId)
  FROM meta.EDWEntity E
  WHERE meta.EntityTypeId(EntityId) IN ('RSat', 'SAL', 'Pit')
    AND EXISTS 
    (
      SELECT *
	    FROM meta.EDWAttribute A 
	    WHERE E.EntityId = A.EDWEntityId
    );

  -- Rule 10
  SET @RuleId = 10;
  SET @RuleCategory = 'Model';
  SET @RuleName = 'Satellite relationship check';
  SET @Reason = 'Sat, TSat, RSat entities can only be related to either Hub or Lnk.';

  INSERT INTO @BrokenRule
  SELECT 
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,UsedBy
    ,meta.EntityTypeId(UsedBy)
    ,meta.EntityName(UsedBy)
  FROM meta.EDWEntityRelationship 
  WHERE meta.EntityTypeId(UsedBy) IN ('Sat', 'TSat', 'RSat')
    AND meta.EntityTypeId(HubLnk) NOT IN ('Hub', 'Lnk');

  -- Rule 11
  SET @RuleId = 11;
  SET @RuleCategory = 'Model';
  SET @RuleName = 'Same-As-Link relationship check';
  SET @Reason = 'SAL entity can only be related to a Hub.';

  INSERT INTO @BrokenRule
  SELECT 
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,UsedBy
    ,meta.EntityTypeId(UsedBy)
    ,meta.EntityName(UsedBy)
  FROM meta.EDWEntityRelationship 
  WHERE meta.EntityTypeId(UsedBy) = 'SAL'
    AND meta.EntityTypeId(HubLnk) NOT IN ('Hub');

  -- Rule 101
  SET @RuleId = 101;
  SET @RuleCategory = 'Platform';
  SET @RuleName = 'Max number of attributes exceeded';
  SET @Reason = 'Sat entity can NOT have more than 250 attributes.';

  INSERT INTO @BrokenRule
  SELECT
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,EDWEntityId
    ,meta.EntityTypeId(EDWEntityId)
    ,meta.EntityName(EDWEntityId)
  FROM meta.EDWAttribute
  WHERE meta.EntityTypeId(EDWEntityId) = 'Sat'
    AND IsStagingOnly = 0
  GROUP BY EDWEntityId
  HAVING COUNT(*) > 250;

  -- Rule 102
  SET @RuleId = 102;
  SET @RuleCategory = 'Platform';
  SET @RuleName = 'Partitoning check';
  SET @Reason = 'Partitioning is applicable to Lnk, Sat, TSat, RSat, Br, Pit entities only.';

  INSERT INTO @BrokenRule
  SELECT DISTINCT 
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,EntityId
    ,meta.EntityTypeId(EntityId)
    ,meta.EntityName(EntityId)
  FROM meta.EDWEntity
  WHERE PartitioningTypeId NOT IN ('N')
    AND meta.EntityTypeId(EntityId) NOT IN ('Lnk', 'Sat', 'TSat', 'RSat', 'Br', 'Pit')
    AND CreateEntity = 1;

  -- Rule 103
  SET @RuleId = 103;
  SET @RuleCategory = 'Platform';
  SET @RuleName = 'Partitioning on RowStore not supported';
  SET @Reason = 'Partitioning is supported for ''ColumnStore'' and ''ColumnStore + RowStore'' storage types only.';

  INSERT INTO @BrokenRule
  SELECT
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,EntityId
    ,meta.EntityTypeId(EntityId)
    ,meta.EntityName(EntityId)
  FROM meta.EDWEntity
  WHERE PartitioningTypeId NOT IN ('N')
    AND StorageTypeId NOT IN ('Col')
    AND CreateEntity = 1;

  -- Rule 104
  SET @RuleId = 104;
  SET @RuleCategory = 'Platform';
  SET @RuleName = 'ColumnStore storage not supported';
  SET @Reason = '(Clustered) ColumnStore storage is not supported on current SQL Server version.';

  INSERT INTO @BrokenRule
  SELECT
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,EntityId
    ,meta.EntityTypeId(EntityId)
    ,meta.EntityName(EntityId)
  FROM meta.EDWEntity
  WHERE StorageTypeId IN ('Col')
    AND dbo.SqlInstanceMajorVersion() <= 11;

  -- Rule 105
  SET @RuleId = 105;
  SET @RuleCategory = 'Platform';
  SET @RuleName = 'ColumnStore + RowStore storage not supported';
  SET @Reason = 'ColumnStore + RowStore storage is not supported on current SQL Server version.';

  INSERT INTO @BrokenRule
  SELECT
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,EntityId
    ,meta.EntityTypeId(EntityId)
    ,meta.EntityName(EntityId)
  FROM meta.EDWEntity
  WHERE StorageTypeId IN ('CR')
    AND dbo.SqlInstanceMajorVersion() <= 12;

  RETURN;
END
GO
PRINT N'Creating [meta].[ValidateConfiguration]...';


GO
CREATE FUNCTION [meta].[ValidateConfiguration]()
RETURNS @BrokenRule TABLE
(
  [RuleId] int
  ,[RuleCategory] varchar(50)
  ,[RuleName] varchar(50)
  ,[Reason] varchar(255)
  ,[ConfigurationId] varchar(50)
  ,[ConfigurationValue] varchar(255)
)
AS
BEGIN
  DECLARE @RuleId int
    ,@RuleCategory varchar(50)
    ,@RuleName varchar(50)
    ,@Reason varchar(255);

  -- Rule 1001
  SET @RuleId = 1001;
  SET @RuleCategory = 'Configuration';
  SET @RuleName = 'Different Collations';
  SET @Reason = 'Collations for raw vault and staging databases must be the same.';

  INSERT INTO @BrokenRule
  SELECT
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,[Id]
    ,[Value]
  FROM 
  (
    SELECT 
      [Id] = 'N/A'
      ,[Value] = CONCAT(edw.name, ': ', edw.collation_name, ' / ', stg.name, ': ', stg.collation_name)
    FROM [sys].[databases] edw
      JOIN [sys].[databases] stg ON edw.[database_id] = DB_ID(REPLACE(REPLACE([meta].[WarehouseDbName](), '[', ''), ']', ''))
        AND stg.[database_id] = DB_ID(REPLACE(REPLACE([meta].[StagingDbName](), '[', ''), ']', ''))
    WHERE edw.[collation_name] != stg.[collation_name]
  ) R;

  -- Rule 1002
  SET @RuleId = 1002;
  SET @RuleCategory = 'Configuration';
  SET @RuleName = 'Invalid Hash Delimiter';
  SET @Reason = 'Hash Delimiter cannot contain single quote.';

  INSERT INTO @BrokenRule
  SELECT 
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,[Id]
    ,[Value]
  FROM 
  (
    SELECT 
      [Id]
      ,[Value] 
    FROM [meta].[Configuration] 
    WHERE [Id] = 'HashDelimiter'
      AND [Value] LIKE '%''%'
  ) R;

  -- Rule 1003
  SET @RuleId = 1003;
  SET @RuleCategory = 'Configuration';
  SET @RuleName = 'Invalid Configuration Value';
  SET @Reason = 'Configuration value must be set to true/false.';

  INSERT INTO @BrokenRule
  SELECT 
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,[Id]
    ,[Value]
  FROM 
  (
    SELECT 
      [Id]
      ,[Value]
    FROM [meta].[Configuration] 
    WHERE [Id] IN ('VirtualizedLoadEndDate', 'DisabledForeignKey', 'CompressRowStore', 'LegacyNonUnicodeInputForHash')
      AND TRY_CONVERT(BIT, LTRIM([Value])) IS NULL
  ) R;

  -- Rule 1004
  SET @RuleId = 1004;
  SET @RuleCategory = 'Configuration';
  SET @RuleName = 'Unsupported Hash Algorithm';
  SET @Reason = 'Supported Hash algorithms are: MD5, SHA, SHA1, SHA2_256, SHA2_512.';

  INSERT INTO @BrokenRule
  SELECT 
    @RuleId
    ,@RuleCategory
    ,@RuleName
    ,@Reason
    ,[Id]
    ,[Value]
  FROM 
  (
    SELECT 
      [Id]
      ,[Value]
    FROM [meta].[Configuration] 
    WHERE [Id] = 'HashAlgorithm'
      AND [Value] NOT IN ('MD5', 'SHA', 'SHA1', 'SHA2_256', 'SHA2_512')
  ) R;

  RETURN;
END
GO
PRINT N'Creating [dbo].[ExecuteOrPrint]...';


GO
CREATE PROCEDURE [dbo].[ExecuteOrPrint]
  @Database NVARCHAR(100),
	@Sql NVARCHAR(MAX),
	@PrintOnly BIT = 0

AS
BEGIN
  DECLARE @lf char(2) = char(13) + char(10)
	  ,@p int;

  IF dbo.SqlInstanceOnPrem() = 1 AND LTRIM(RTRIM(@Database)) != ''
    SET @Sql = CONCAT('USE ', @Database, ';', @lf, @Sql);

  IF (@PrintOnly = 1)
    WHILE @Sql <> ''
    BEGIN
      SET @p = PATINDEX('%' + @lf + '%', @sql);
      IF @p = 0
        SET @p = 4000;
          
	    PRINT LEFT(@Sql, @p - 1);
      SET @Sql = SUBSTRING(@Sql, @p + 2, 10000000);
    END
  ELSE
    IF NULLIF(LTRIM(@Sql), '') IS NULL
      RAISERROR('T-SQL statement is (null) or emtpy.', 16, 1);
    ELSE
      IF dbo.SqlInstanceOnPrem() = 1 OR LTRIM(RTRIM(@Database)) = ''
        EXEC sys.sp_executesql @Sql;
      ELSE
      BEGIN
        SET @Database = REPLACE(REPLACE(@Database, '[', ''), ']', '');
        EXEC sys.sp_execute_remote @Database, @Sql;
      END
END
GO
PRINT N'Creating [dbo].[DropObject]...';


GO
CREATE PROCEDURE [dbo].[DropObject]
  @Database varchar(100),
  @ObjectSchema varchar(100),
  @ObjectName varchar(200),
  @ObjectType varchar(100),
  @PrintOnly bit = 0

AS

SET NOCOUNT ON;

DECLARE @Sql nvarchar(MAX);

IF @ObjectType IN ('TABLE')
  SET @Sql = '
IF EXISTS
(
  SELECT * 
  FROM INFORMATION_SCHEMA.TABLES 
  WHERE TABLE_TYPE = ''BASE TABLE''
    AND TABLE_SCHEMA = ''#objectschema#''
    AND TABLE_NAME = ''#objectname#''
)
  DROP TABLE [#objectschema#].[#objectname#];
'

IF @ObjectType IN ('VIEW')
  SET @Sql = '
IF EXISTS
(
  SELECT *
  FROM INFORMATION_SCHEMA.TABLES 
  WHERE TABLE_TYPE = ''VIEW''
    AND TABLE_SCHEMA = ''#objectschema#''
    AND TABLE_NAME = ''#objectname#''
)
  DROP VIEW [#objectschema#].[#objectname#];
'

IF @ObjectType IN ('PROCEDURE', 'PROC', 'STORED PROCEDURE')
  SET @Sql = '
IF EXISTS
(
  SELECT * 
  FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE ROUTINE_TYPE = ''PROCEDURE''
    AND ROUTINE_SCHEMA = ''#objectschema#''
    AND ROUTINE_NAME = ''#objectname#''
)
  DROP PROCEDURE [#objectschema#].[#objectname#];
'

IF @ObjectType IN ('FUNCTION', 'FUNC')
  SET @Sql = '
IF EXISTS
(
  SELECT * 
  FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE ROUTINE_TYPE = ''FUNCTION''
    AND ROUTINE_SCHEMA = ''#objectschema#''
    AND ROUTINE_NAME = ''#objectname#''
)
  DROP FUNCTION [#objectschema#].[#objectname#];
'

IF @ObjectType IN ('PARTITION FUNCTION', 'PF')
  SET @Sql = '
IF EXISTS
(
  SELECT * 
  FROM sys.partition_functions 
  WHERE name = ''#objectname#''
)
  DROP PARTITION FUNCTION [#objectname#];
'

IF @ObjectType IN ('PARTITION SCHEME', 'PS')
  SET @Sql = '
IF EXISTS
(
  SELECT * 
  FROM sys.partition_schemes 
  WHERE name = ''#objectname#''
)
  DROP PARTITION SCHEME [#objectname#];
'

IF @Sql IS NOT NULL
BEGIN
  SET @Sql = REPLACE(@Sql, '#objectschema#', REPLACE(REPLACE(@ObjectSchema, '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#objectname#', REPLACE(REPLACE(@ObjectName, '[', ''), ']', ''));

  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;
END
GO
PRINT N'Creating [meta].[CreateModel]...';


GO
CREATE PROCEDURE [meta].[CreateModel]
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  PRINT '-- *** Validating Model ***';
  IF (SELECT COUNT(*) FROM meta.ValidateModel()) != 0
  BEGIN
    PRINT '-- *** There are validation errors. ***';

    SELECT RuleId
	    ,RuleCategory
	    ,RuleName
	    ,Reason
	    ,EntityId
	    ,EntityTypeName
	    ,EntityName
    FROM meta.ValidateModel();

    RETURN;
  END
  ELSE
    PRINT '-- *** Validation OK. ***';

  DECLARE 
    @TemplateUtilities NVARCHAR(MAX) = '
PRINT '''';
PRINT ''-- *** Deploying databases ***'';
EXEC meta.DeployDatabases @PrintOnly = #printonly#;

PRINT '''';
PRINT ''-- *** Deploying filegroups ***'';
EXEC meta.DeployFileGroups @PrintOnly = #printonly#;

PRINT ''-- *** Set database options ***'';
EXEC meta.SetDatabaseOptions @PrintOnly = #printonly#;

PRINT ''-- *** Deploying schemata ***'';
EXEC meta.DeploySchemata @PrintOnly = #printonly#;

PRINT ''-- *** Deploying utilities ***'';
EXEC meta.DeployUtilities @PrintOnly = #printonly#;
'
    ,@TemplateDropEntities NVARCHAR(MAX) = '
PRINT ''-- *** Dropping table #schema#.[#entity_type#_#entity_name#] ***'';' + (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = '
PRINT ''-- *** Creating items for entity #entityid# - #schema#.[#entity_type#_#entity_name#] ***'';
EXEC [meta].[CreateAllObjectsForEntity] @EntityId = #entityid#, @PrintOnly = #printonly#;
'
    ,@Sql NVARCHAR(MAX)
    ,@Database NVARCHAR(50);

  SET @TemplateDropEntities = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDropEntities
            , '#db_name#', '#edw_db#')
          , '#schema#', '#schema#')
        , '#object_name#', '[#entity_prefix##entity_type#_#entity_name#]')
      , '#object_type#', 'TABLE'
    );

  SET @Sql = @TemplateUtilities;

  IF EXISTS (SELECT * FROM meta.EDWEntity)
  BEGIN
    -- Drop entites
    SET @Sql += (
      SELECT REPLACE(
          REPLACE(REPLACE(REPLACE(@TemplateDropEntities, '#entity_type#', meta.EntityTypeId(EntityId)), '#entity_name#', EntityName), '#entity_prefix#', CASE meta.EntityTypeId(EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END)
        ,'#schema#'
        ,CASE WHEN meta.EntityTypeId(EntityId) IN ('Br', 'Pit') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END)
      FROM meta.EDWEntity
      ORDER BY 
        CASE EntityTypeId 
	        WHEN 'Br' THEN 1
		      WHEN 'Pit' THEN 2
          WHEN 'Sat' THEN 3
	        WHEN 'TSat' THEN 4
		      WHEN 'RSat' THEN 5
		      WHEN 'Lnk' THEN 6
          WHEN 'SAL' THEN 7
	        ELSE 999
        END
	    FOR XML PATH('')
    );

    -- Drop lookup error tables
    IF EXISTS (SELECT * FROM meta.EDWEntity WHERE EntityTypeId IN ('Lnk', 'Sat'))
      SET @Sql += (
        SELECT REPLACE(
            REPLACE(REPLACE(REPLACE(@TemplateDropEntities, '#entity_type#', meta.EntityTypeId(EntityId)), '#entity_name#', meta.EntityNameLookupError(EntityId)), '#entity_prefix#', '')
          ,'#schema#'
          ,meta.WarehouseErrorSchema())
        FROM meta.EDWEntity
        WHERE EntityTypeId IN ('Lnk', 'Sat')
	      FOR XML PATH('')
      );

    -- Create new entities
    SET @Sql += (
	    SELECT REPLACE(
          REPLACE(REPLACE(REPLACE(@Template, '#entityid#', EntityId), '#entity_type#', meta.EntityTypeId(EntityId)), '#entity_name#', EntityName)
        ,'#schema#'
        ,CASE WHEN meta.EntityTypeId(EntityId) IN ('Br', 'Pit') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END)
      FROM meta.EDWEntity
      ORDER BY 
        CASE EntityTypeId 
          WHEN 'Hub' THEN 1
	        WHEN 'Lnk' THEN 2
          WHEN 'SAL' THEN 3
		      WHEN 'Sat' THEN 4
	        WHEN 'TSat' THEN 5
		      WHEN 'RSat' THEN 6
	        ELSE 999
        END
	    FOR XML PATH('')
    );
  END

  -- Replace Placeholders
  SET @Sql = REPLACE(@Sql, '#edw_db#', meta.WarehouseDbName());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
    ,@Sql
END
GO
PRINT N'Creating [meta].[CheckEnvironment]...';


GO
CREATE PROCEDURE [meta].[CheckEnvironment]

AS
BEGIN
  SET NOCOUNT ON;
  SET XACT_ABORT ON;

  DECLARE @Environment varchar(20) = (SELECT meta.CurrentEnvironment())
    ,@Msg nvarchar(1024) = 'Operation is not allowed on ''%s'' environment. It must run on Development only.';

  IF UPPER(@Environment) NOT IN ('DEV', 'DEVELOPMENT')
  BEGIN
    SET @Msg = FORMATMESSAGE(@Msg, @Environment);
    THROW 60000, @Msg, 1;
  END
END
GO
PRINT N'Creating [meta].[CreateBizPitTable]...';


GO
CREATE PROCEDURE [meta].[CreateBizPitTable]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Point In Time and Bridge
  IF meta.EntityTypeId(@EntityId) NOT IN ('Pit')
    RETURN;

  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = (SELECT meta.TemplateText('BizPitTable'))
    ,@TemplateColumns NVARCHAR(MAX) = (SELECT meta.TemplateText('BizPitTable_column_names'))
	  ,@Sql NVARCHAR(MAX)
	  ,@Columns NVARCHAR(MAX)
	  ,@ReferencedEntityId INT
    ,@Database NVARCHAR(50);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#edw_db#')
          , '#schema#', '#biz_schema#')
        , '#object_name#', '[#entity_type#_#entity_name#]')
      , '#object_type#', 'TABLE'
    );

  SELECT @ReferencedEntityId = HubLnk
  FROM meta.EDWEntityRelationship
  WHERE UsedBy = @EntityId;

  -- Search for columns
  SET @Columns = (
    SELECT REPLACE(REPLACE(@TemplateColumns, '#referenced_entity_name#', meta.EntityName(UsedBy)), '#referenced_key_column#', REPLACE(REPLACE(meta.EntityKeyColumn(@ReferencedEntityId), '[', ''), ']', ''))
    FROM meta.EDWEntityRelationship 
    WHERE HubLnk = @ReferencedEntityId
      AND meta.EntityTypeId(UsedBy) = 'Sat'
    ORDER BY EntityRelationshipId
    FOR XML PATH('')
  );
  
  -- Replace Placeholders
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#meta_db#', meta.MetaDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_db#', meta.WarehouseDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_db#', meta.StagingDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_schema#', meta.StagingSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@TemplateDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Template, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.EntityTableName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#column_names#', @Columns);
  SET @Sql = REPLACE(@Sql, '#key_column#', meta.EntityKeyColumn(@EntityId));
  SET @Sql = REPLACE(@Sql, '#referenced_key_column#', meta.EntityKeyColumn(@ReferencedEntityId));
  SET @Sql = REPLACE(@Sql, '#data_type_hash_key#', meta.SqlDataTypeHashKey());
  SET @Sql = REPLACE(@Sql, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupData() ELSE CONCAT(meta.PartitionSchemeData(@EntityId), '([SnapshotDate])') END);
  SET @Sql = REPLACE(@Sql, '#filegroup_index#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupIndex() ELSE CONCAT(meta.PartitionSchemeIndex(@EntityId), '([SnapshotDate])') END);
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateInitializeEntityProc]...';


GO
CREATE PROCEDURE [meta].[CreateInitializeEntityProc] 
  @EntityId int,
  @PrintOnly bit = 0

AS

BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for all entities
  
  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = '
DECLARE @Stmt nvarchar(MAX) = ''#body#'';   
EXEC sys.sp_executesql @Stmt;
'
    ,@Sql NVARCHAR(MAX)
    ,@Database NVARCHAR(50);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#edw_db#')
          , '#schema#', '#schema#')
        , '#object_name#', '[InitializeEntity_#entity_type#_#entity_name#]')
      , '#object_type#', 'PROCEDURE'
    );

  IF meta.EntityTypeId(@EntityId) IN ('Lnk', 'Sat', 'TSat', 'RSat', 'Br', 'Pit') 
    AND meta.PartitioningTypeId(@EntityId) != 'N'
	  SET @Sql = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('InitializeEntityProc_partitioned'), '''', ''''''));
  ELSE
    SET @Sql = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('InitializeEntityProc_nonpartitioned'), '''', ''''''));

  IF meta.PartitioningTypeId(@EntityId) = 'M'	-- Monthly
    SET @Sql = REPLACE(REPLACE(@Sql, '#date_value#', 'DATETIME2FROMPARTS(YEAR(@LoadDate), MONTH(@LoadDate), DAY(EOMONTH(@LoadDate)), 23, 59, 59, 9999999, 7)'), '#date_data_type#', 'DATETIME2');
  
  IF meta.PartitioningTypeId(@EntityId) = 'D'	-- Daily
    SET @Sql = REPLACE(REPLACE(@Sql, '#date_value#', 'DATETIME2FROMPARTS(YEAR(@LoadDate), MONTH(@LoadDate), DAY(@LoadDate), 23, 59, 59, 9999999, 7)'), '#date_data_type#', 'DATETIME2');

  IF meta.PartitioningTypeId(@EntityId) = 'H'	-- Hourly
    SET @Sql = REPLACE(REPLACE(@Sql, '#date_value#', 'DATETIME2FROMPARTS(YEAR(@LoadDate), MONTH(@LoadDate), DAY(@LoadDate), DATEPART(HOUR, @LoadDate), 59, 59, 9999999, 7)'), '#date_data_type#', 'DATETIME2');

  
  -- Replace Placeholders
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#meta_db#', meta.MetaDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_db#', meta.WarehouseDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_db#', meta.StagingDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_schema#', meta.StagingSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@TemplateDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Sql, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @Sql = REPLACE(@Sql, '#partition_function#', meta.PartitionFunction(@EntityId));
  SET @Sql = REPLACE(@Sql, '#partition_function_no_brackets#', REPLACE(REPLACE(meta.PartitionFunction(@EntityId), '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#partition_scheme_data#', meta.PartitionSchemeData(@EntityId));
  SET @Sql = REPLACE(@Sql, '#partition_scheme_index#', meta.PartitionSchemeIndex(@EntityId));
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', meta.FileGroupData());
  SET @Sql = REPLACE(@Sql, '#filegroup_index#', meta.FileGroupIndex());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateTablePartitioning]...';


GO
CREATE PROCEDURE [meta].[CreateTablePartitioning]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Satellite, Transaction Satellite, Record Tracking Satellite, Same-As-Link, Bridge, PIT
  IF meta.EntityTypeId(@EntityId) NOT IN ('Lnk', 'Sat', 'TSat', 'RSat', 'SAL', 'Br', 'Pit')
    RETURN;

  IF meta.PartitioningTypeId(@EntityId) = 'N'
    RETURN;

  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = ''
    ,@Template NVARCHAR(MAX) = (SELECT meta.TemplateText('TablePartitioning'))
	  ,@Sql NVARCHAR(MAX)
    ,@Database NVARCHAR(50);

  SET @TemplateDrop += 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(meta.TemplateText('DropObject')
            , '#db_name#', '#edw_db#')
          , '#schema#', '')
        , '#object_name#', '#partition_scheme_data#')
      , '#object_type#', 'PS'
    );

  SET @TemplateDrop += 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(meta.TemplateText('DropObject')
            , '#db_name#', '#edw_db#')
          , '#schema#', '')
        , '#object_name#', '#partition_scheme_index#')
      , '#object_type#', 'PS'
    );

  SET @TemplateDrop += 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(meta.TemplateText('DropObject')
            , '#db_name#', '#edw_db#')
          , '#schema#', '')
        , '#object_name#', '#partition_function#')
      , '#object_type#', 'PF'
    );

  -- Replace Placeholders
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#meta_db#', meta.MetaDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_db#', meta.WarehouseDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_db#', meta.StagingDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_schema#', meta.StagingSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#partition_function#', meta.PartitionFunction(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#partition_scheme_data#', meta.PartitionSchemeData(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#partition_scheme_index#', meta.PartitionSchemeIndex(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@TemplateDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Template, '#edw_db#', meta.WarehouseDbName());
  SET @Sql = REPLACE(@Sql, '#partition_function#', meta.PartitionFunction(@EntityId));
  SET @Sql = REPLACE(@Sql, '#partition_scheme_data#', meta.PartitionSchemeData(@EntityId));
  SET @Sql = REPLACE(@Sql, '#partition_scheme_index#', meta.PartitionSchemeIndex(@EntityId));
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', meta.FileGroupData());
  SET @Sql = REPLACE(@Sql, '#filegroup_index#', meta.FileGroupIndex());
  SET @Sql = REPLACE(@Sql, '#date_range_start#', meta.DateRangeStart());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[DeployUtilities]...';


GO
CREATE PROCEDURE [meta].[DeployUtilities]
  @PrintOnly bit = 0

AS

BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = '
DECLARE @Stmt NVARCHAR(MAX) = ''#body#'';
EXEC sys.sp_executesql @Stmt;

'
    ,@TemplateGhostRecordProcDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
	  ,@Sql NVARCHAR(MAX)
    ,@SqlDrop NVARCHAR(MAX)
    ,@TemplateGetHash NVARCHAR(MAX)
    ,@TemplateGhostRecordProc NVARCHAR(MAX)
    ,@Database NVARCHAR(50);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#db_name#')
          , '#schema#', '[dbo]')
        , '#object_name#', '[GetHash]')
      , '#object_type#', 'FUNCTION'
    );

  SET @TemplateGhostRecordProcDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateGhostRecordProcDrop
            , '#db_name#', '#db_name#')
          , '#schema#', '[dbo]')
        , '#object_name#', '[InsertGhostRecords]')
      , '#object_type#', 'PROCEDURE'
    );

  IF meta.LegacyNonUnicodeInputForHash() = 0
    SET @TemplateGetHash = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('Utilities_get_hash_actual'), '''', ''''''));
  ELSE
    SET @TemplateGetHash = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('Utilities_get_hash_legacy'), '''', ''''''));

  SET @TemplateGhostRecordProc = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('Utilities_insert_ghost_records'), '''', ''''''));

  -- Replace Placeholders for Staging database (GetHash)
  SET @SqlDrop = REPLACE(@TemplateDrop, '#db_name#', meta.StagingDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@SqlDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@TemplateGetHash, '#data_type_hash_key#', meta.SqlDataTypeHashKey());
  SET @Sql = REPLACE(@Sql, '#hash_algorithm#', meta.HashAlgorithm());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  
  SET @Database = meta.StagingDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

  -- Replace Placeholders for EDW database (GetHash)
  SET @SqlDrop = REPLACE(@TemplateDrop, '#db_name#', meta.WarehouseDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@SqlDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@TemplateGetHash, '#data_type_hash_key#', meta.SqlDataTypeHashKey());
  SET @Sql = REPLACE(@Sql, '#hash_algorithm#', meta.HashAlgorithm());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

  -- Replace Placeholders for EDW database (InsertGhostRecords)
  SET @SqlDrop = REPLACE(@TemplateGhostRecordProcDrop, '#db_name#', meta.WarehouseDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@SqlDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@TemplateGhostRecordProc, '#printonly#', @PrintOnly);

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;
END
GO
PRINT N'Creating [meta].[CreateEDWIndexesColumnRowStore]...';


GO
CREATE PROCEDURE [meta].[CreateEDWIndexesColumnRowStore]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Hubs, Links, Satellite, Transaction Satellite, Record Tracking Satellite, Same-As-Link
  IF meta.EntityTypeId(@EntityId) NOT IN ('Hub', 'Lnk', 'Sat', 'TSat', 'RSat', 'SAL')
    RETURN;

  -- Applies to SQL Server 2016 and above
  IF dbo.SqlInstanceMajorVersion() < 13
  BEGIN
    RAISERROR('Current SQL Server version does not support column store and b-tree indexes on the same table.', 16, 1);
	  RETURN;
  END

  DECLARE @Sql NVARCHAR(MAX) = ''
    ,@Columns NVARCHAR(MAX) = ''
	  ,@FKs NVARCHAR(MAX) = ''
    ,@Database NVARCHAR(50);

  -- ColumnStore and RowStore
  IF meta.StorageTypeId(@EntityId) = 'CR'
  BEGIN
    DECLARE 
      @TemplateHubLnk NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWIndexesColumnRowStore_hub_link'))
      ,@TemplateSat NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWIndexesColumnRowStore_sat'))
      ,@TemplateTSat NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWIndexesColumnRowStore_tsat'))
      ,@TemplateForeignKey NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWIndexesColumnRowStore_fk'))
      ,@IndexOptions NVARCHAR(MAX);

    -- Objects for HUB
    IF meta.EntityTypeId(@EntityId) = 'Hub'
    BEGIN
      SET @Sql += @TemplateHubLnk;

	    SET @Columns = (
	      SELECT CONCAT('[', AttributeName, '],')
        FROM meta.EDWAttribute 
        WHERE EDWEntityId = @EntityId
		    ORDER BY [Order]
		    FOR XML PATH('')
	    );

	    IF LEN(@Columns) > 0
	      SET @Columns = LEFT(@Columns, LEN(@Columns) - 1);
    END
  
    -- Objects for LINK
    IF meta.EntityTypeId(@EntityId) = 'Lnk'
    BEGIN
	    SET @Sql += @TemplateHubLnk;
    
	    SET @Columns = (
	      SELECT CONCAT('[', ColumnName, '],')
        FROM (
	        SELECT 
            REPLACE(
              REPLACE(
                meta.EntityKeyColumnWithSuffix(HubLnk, meta.CleanSuffix(HashKeySuffix)), '[', ''
              ), ']',''
            ) ColumnName
            ,EntityRelationshipId [Order]
          FROM meta.EDWEntityRelationship
          WHERE UsedBy = @EntityId
   
          UNION ALL 

          SELECT A.AttributeName
            ,ROW_NUMBER() OVER (ORDER BY [Order]) + 1000
          FROM meta.EDWAttribute A
          WHERE EDWEntityId = @EntityId
	      ) Z
	      ORDER BY [Order]
        FOR XML PATH('')
	    );

	    IF LEN(@Columns) > 0
	      SET @Columns = LEFT(@Columns, LEN(@Columns) - 1);

    END

    -- Objects for SAME-AS-LINK
    IF meta.EntityTypeId(@EntityId) = 'SAL'
    BEGIN
	    SET @Sql += @TemplateHubLnk;
    
	    SET @Columns = (
	      SELECT CONCAT(ColumnName, ',')
        FROM (
	        SELECT meta.EntityKeyColumnMasterDuplicate(HubLnk, 1) ColumnName
            ,0 [Order]
          FROM meta.EDWEntityRelationship
          WHERE UsedBy = @EntityId
   
          UNION ALL 

          SELECT meta.EntityKeyColumnMasterDuplicate(HubLnk, 0) ColumnName
            ,1 [Order]
          FROM meta.EDWEntityRelationship
          WHERE UsedBy = @EntityId
	      ) Z
	      ORDER BY [Order]
        FOR XML PATH('')
	    );

	    IF LEN(@Columns) > 0
	      SET @Columns = LEFT(@Columns, LEN(@Columns) - 1);

    END

	  -- Objects for SATELLITE
    IF meta.EntityTypeId(@EntityId) = 'Sat'
      SET @Sql += @TemplateSat;

	  -- Objects for Transaction and Record Tracking SATELLITE
	  IF meta.EntityTypeId(@EntityId) IN ('TSat', 'RSat')
      SET @Sql += @TemplateTSat;

	  -- Create Foreign Keys for Lnk, Sat, TSat, RSat
	  IF meta.EntityTypeId(@EntityId) IN ('Lnk', 'Sat', 'TSat', 'RSat')
	  BEGIN
	    SET @FKs = (
	      SELECT 
          REPLACE(
            REPLACE(
              REPLACE(
                REPLACE(
                  REPLACE(
                    REPLACE(
                      @TemplateForeignKey, '#referenced_entity_type#', meta.EntityTypeId(HubLnk)
                    ), '#referenced_entity_name#', meta.EntityName(HubLnk)
                  ), '#referenced_entity_table_name#', meta.EntityTableName(HubLnk)
                ), '#referenced_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumn(HubLnk) ELSE CONCAT(meta.EntityKeyColumn(HubLnk), ', [LoadDate]') END
              ), '#referencing_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumnWithSuffix(HubLnk, meta.CleanSuffix(HashKeySuffix)) ELSE CONCAT(meta.EntityKeyColumnWithSuffix(HubLnk, meta.CleanSuffix(HashKeySuffix)), ', [LoadDate]') END
            ), '#column_suffix#', meta.CleanSuffix(HashKeySuffix)
          )
		    FROM meta.EDWEntityRelationship
		    WHERE UsedBy = @EntityId
		    ORDER BY EntityRelationshipId
		    FOR XML PATH('')
	    );

	    SET @Sql += @FKs;
	  END

    -- Create Foreign Keys for SAL
	  IF meta.EntityTypeId(@EntityId) IN ('SAL')
	  BEGIN
	    SET @FKs = (
        SELECT CONCAT(Tmpl, '')
        FROM (
	        SELECT 
            REPLACE(
              REPLACE(
                REPLACE(
                  REPLACE(
                    REPLACE(
                      REPLACE(
                        @TemplateForeignKey, '#referenced_entity_type#', meta.EntityTypeId(HubLnk)
                      ), '#referenced_entity_name#', meta.EntityName(HubLnk)
                    ), '#referenced_entity_table_name#', meta.EntityTableName(HubLnk)
                  ), '#referenced_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumn(HubLnk) ELSE CONCAT(meta.EntityKeyColumn(HubLnk), ', [LoadDate]') END
                ), '#column_suffix#', '_Master'
              ), '#referencing_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumnMasterDuplicate(HubLnk, 1) ELSE CONCAT(meta.EntityKeyColumnMasterDuplicate(HubLnk, 1), ', [LoadDate]') END
            ) Tmpl
		        ,0 [Order]
          FROM meta.EDWEntityRelationship
		      WHERE UsedBy = @EntityId

          UNION ALL

          SELECT 
            REPLACE(
              REPLACE(
                REPLACE(
                  REPLACE(
                    REPLACE(
                      REPLACE(
                        @TemplateForeignKey, '#referenced_entity_type#', meta.EntityTypeId(HubLnk)
                      ), '#referenced_entity_name#', meta.EntityName(HubLnk)
                    ), '#referenced_entity_table_name#', meta.EntityTableName(HubLnk)
                  ), '#referenced_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumn(HubLnk) ELSE CONCAT(meta.EntityKeyColumn(HubLnk), ', [LoadDate]') END
                ), '#column_suffix#', '_Duplicate'
              ), '#referencing_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumnMasterDuplicate(HubLnk, 0) ELSE CONCAT(meta.EntityKeyColumnMasterDuplicate(HubLnk, 0), ', [LoadDate]') END
            ) Tmpl
		        ,1 [Order]
          FROM meta.EDWEntityRelationship
		      WHERE UsedBy = @EntityId
        ) Z
        ORDER BY [Order]
		    FOR XML PATH('')
	    );

	    SET @Sql += @FKs;
	  END

    -- Check for index options
    IF meta.PartitioningTypeId(@EntityId) NOT IN ('N') AND dbo.SqlInstanceMajorVersion() > 11
	    SET @IndexOptions = meta.TemplateText('IndexOptionsRowStore_partitioned');
    ELSE
      SET @IndexOptions = meta.TemplateText('IndexOptionsRowStore_nonpartitioned');

  END

  -- Replace Placeholders
  SET @Sql = REPLACE(@Sql, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.[EntityTableName](@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_column#', meta.EntityKeyColumn(@EntityId));
  SET @Sql = REPLACE(@Sql, '#column_names#', @Columns);
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupData() ELSE CONCAT(meta.PartitionSchemeData(@EntityId), '([LoadDate])') END);
  SET @Sql = REPLACE(@Sql, '#filegroup_index#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupIndex() ELSE CONCAT(meta.PartitionSchemeIndex(@EntityId), '([LoadDate])') END);
  SET @Sql = REPLACE(@Sql, '#index_options#', @IndexOptions);
  SET @Sql = REPLACE(@Sql, '#fk_check#', CASE meta.DisabledForeignKey() WHEN 1 THEN 'NOCHECK' ELSE 'CHECK' END);
  SET @Sql = REPLACE(@Sql, '#date_range_end#', meta.DateRangeEnd());
  SET @Sql = REPLACE(@Sql, '#rowstore_compression#', meta.RowStoreCompressionLevel());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&lt;', '<');
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateEDWIndexesColumnStore]...';


GO
CREATE PROCEDURE [meta].[CreateEDWIndexesColumnStore]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Hubs, Links, Satellite, Transaction Satellite, Same-As-Link
  IF meta.EntityTypeId(@EntityId) NOT IN ('Hub', 'Lnk', 'Sat', 'TSat', 'RSat', 'SAL')
    RETURN;

  DECLARE @Sql NVARCHAR(MAX) = ''
	  ,@FKs NVARCHAR(MAX) = ''
    ,@Database NVARCHAR(50);

  -- ColumnStore only
  IF meta.StorageTypeId(@EntityId) = 'Col'
  BEGIN
    DECLARE 
	    @Template NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWIndexesColumnStore_all'))
      ,@TemplatePrimaryKey NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWIndexesColumnStore_pk'))
      ,@TemplateForeignKey NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWIndexesColumnStore_fk'))
      ,@TemplateCheck NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWIndexesColumnStore_check'))
      ,@IndexOptions NVARCHAR(MAX);

    SET @Sql += @Template;

	  -- Applies to SQL Server 2016 and above
    IF dbo.SqlInstanceMajorVersion() >= 13
	  BEGIN
      -- Create Primary Key
      IF meta.EntityTypeId(@EntityId) IN ('Hub', 'Lnk', 'SAL')
        SET @Sql += @TemplatePrimaryKey;

	    -- Create Foreign Keys for Lnk, Sat, TSat, RSat
      IF meta.EntityTypeId(@EntityId) IN ('Lnk', 'Sat', 'TSat', 'RSat')
      BEGIN
	      SET @FKs = (
	        SELECT 
            REPLACE(
              REPLACE(
                REPLACE(
                  REPLACE(
                    REPLACE(
                      REPLACE(
                        @TemplateForeignKey, '#referenced_entity_type#', meta.EntityTypeId(HubLnk)
                      ), '#referenced_entity_name#', meta.EntityName(HubLnk)
                    ), '#referenced_entity_table_name#', meta.EntityTableName(HubLnk)
                  ), '#referenced_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumn(HubLnk) ELSE CONCAT(meta.EntityKeyColumn(HubLnk), ', [LoadDate]') END
                ), '#referencing_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumnWithSuffix(HubLnk, meta.CleanSuffix(HashKeySuffix)) ELSE CONCAT(meta.EntityKeyColumnWithSuffix(HubLnk, meta.CleanSuffix(HashKeySuffix)), ', [LoadDate]') END
              ), '#column_suffix#', meta.CleanSuffix(HashKeySuffix)
            )
		      FROM meta.EDWEntityRelationship
		      WHERE UsedBy = @EntityId
		      ORDER BY EntityRelationshipId
		      FOR XML PATH('')
	      );

	      SET @Sql += @FKs;
      END

      -- Create Foreign Keys for SAL
	    IF meta.EntityTypeId(@EntityId) IN ('SAL')
	    BEGIN
	      SET @FKs = (
          SELECT CONCAT(Tmpl, '')
          FROM (
	          SELECT 
              REPLACE(
                REPLACE(
                  REPLACE(
                    REPLACE(
                      REPLACE(
                        REPLACE(
                          @TemplateForeignKey, '#referenced_entity_type#', meta.EntityTypeId(HubLnk)
                        ), '#referenced_entity_name#', meta.EntityName(HubLnk)
                      ), '#referenced_entity_table_name#', meta.EntityTableName(HubLnk)
                    ), '#referenced_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumn(HubLnk) ELSE CONCAT(meta.EntityKeyColumn(HubLnk), ', [LoadDate]') END
                  ), '#column_suffix#', '_Master'
                ), '#referencing_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumnMasterDuplicate(HubLnk, 1) ELSE CONCAT(meta.EntityKeyColumnMasterDuplicate(HubLnk, 1), ', [LoadDate]') END
              ) Tmpl
		          ,0 [Order]
            FROM meta.EDWEntityRelationship
		        WHERE UsedBy = @EntityId

            UNION ALL

            SELECT 
              REPLACE(
                REPLACE(
                  REPLACE(
                    REPLACE(
                      REPLACE(
                        REPLACE(
                          @TemplateForeignKey, '#referenced_entity_type#', meta.EntityTypeId(HubLnk)
                        ), '#referenced_entity_name#', meta.EntityName(HubLnk)
                      ), '#referenced_entity_table_name#', meta.[EntityTableName](HubLnk)
                    ), '#referenced_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumn(HubLnk) ELSE CONCAT(meta.EntityKeyColumn(HubLnk), ', [LoadDate]') END
                  ), '#column_suffix#', '_Duplicate'
                ), '#referencing_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumnMasterDuplicate(HubLnk, 0) ELSE CONCAT(meta.EntityKeyColumnMasterDuplicate(HubLnk, 0), ', [LoadDate]') END
              ) Tmpl
		          ,1 [Order]
            FROM meta.EDWEntityRelationship
		        WHERE UsedBy = @EntityId
          ) Z
          ORDER BY [Order]
		      FOR XML PATH('')
	      );

	      SET @Sql += @FKs;
	    END

      -- Check constraint for SATELLITE
      IF meta.EntityTypeId(@EntityId) IN ('Sat')
	      SET @Sql += @TemplateCheck;

      -- Check for index options
      IF meta.PartitioningTypeId(@EntityId) NOT IN ('N') AND dbo.SqlInstanceMajorVersion() > 11
	      SET @IndexOptions = meta.TemplateText('IndexOptionsRowStore_partitioned');
      ELSE
        SET @IndexOptions = meta.TemplateText('IndexOptionsRowStore_nonpartitioned');

    END

  END

  -- Replace Placeholders
  SET @Sql = REPLACE(@Sql, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.[EntityTableName](@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_column#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.EntityKeyColumn(@EntityId) ELSE CONCAT(meta.EntityKeyColumn(@EntityId), ' ASC, [LoadDate]') END);
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupData() ELSE CONCAT(meta.PartitionSchemeData(@EntityId), '([LoadDate])') END);
  SET @Sql = REPLACE(@Sql, '#filegroup_index#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupIndex() ELSE CONCAT(meta.PartitionSchemeIndex(@EntityId), '([LoadDate])') END);
  SET @Sql = REPLACE(@Sql, '#index_options#', @IndexOptions);
  SET @Sql = REPLACE(@Sql, '#fk_check#', CASE meta.DisabledForeignKey() WHEN 1 THEN 'NOCHECK' ELSE 'CHECK' END);
  SET @Sql = REPLACE(@Sql, '#date_range_end#', meta.DateRangeEnd());
  SET @Sql = REPLACE(@Sql, '#rowstore_compression#', meta.RowStoreCompressionLevel());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&lt;', '<');
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateEDWIndexesRowStore]...';


GO
CREATE PROCEDURE [meta].[CreateEDWIndexesRowStore]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Hubs, Links, Satellite, Transaction Satellite, Record Tracking Satellite, Same-As-Link
  IF meta.EntityTypeId(@EntityId) NOT IN ('Hub', 'Lnk', 'Sat', 'TSat', 'RSat', 'SAL')
    RETURN;

  DECLARE @Sql NVARCHAR(MAX) = ''
    ,@Columns NVARCHAR(MAX) = ''
	  ,@FKs NVARCHAR(MAX) = ''
    ,@Database NVARCHAR(50);

  -- RowStore only
  IF meta.StorageTypeId(@EntityId) = 'Row'
  BEGIN
    DECLARE 
      @TemplateHubLnk NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWIndexesRowStore_hub_link'))
      ,@TemplateSat NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWIndexesRowStore_sat'))
      ,@TemplateTSat NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWIndexesRowStore_tsat'))
      ,@TemplateForeignKey NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWIndexesRowStore_fk'))
      ,@IndexOptions NVARCHAR(MAX)
      ,@PartitionField NVARCHAR(50);

    -- Objects for HUB
    IF meta.EntityTypeId(@EntityId) = 'Hub'
    BEGIN
      SET @Sql += @TemplateHubLnk;

	    SET @Columns = (
	      SELECT CONCAT('[', AttributeName, '],')
        FROM meta.EDWAttribute 
        WHERE EDWEntityId = @EntityId
		    ORDER BY [Order]
		    FOR XML PATH('')
	    );

	    IF LEN(@Columns) > 0
	      SET @Columns = LEFT(@Columns, LEN(@Columns) - 1);
    END
  
    -- Objects for LINK
    IF meta.EntityTypeId(@EntityId) = 'Lnk'
    BEGIN
	    SET @Sql += @TemplateHubLnk;
    
	    SET @Columns = (
	      SELECT CONCAT('[', ColumnName, '],')
        FROM (
	        SELECT 
            REPLACE(
              REPLACE(
                meta.EntityKeyColumnWithSuffix(HubLnk, meta.CleanSuffix(HashKeySuffix)), '[', ''
              ), ']',''
            ) ColumnName
            ,EntityRelationshipId [Order]
          FROM meta.EDWEntityRelationship
          WHERE UsedBy = @EntityId
   
          UNION ALL 

          SELECT A.AttributeName
            ,ROW_NUMBER() OVER (ORDER BY [Order]) + 1000
          FROM meta.EDWAttribute A
          WHERE EDWEntityId = @EntityId
	      ) Z
	      ORDER BY [Order]
        FOR XML PATH('')
	    );

	    IF LEN(@Columns) > 0
	      SET @Columns = LEFT(@Columns, LEN(@Columns) - 1);

    END

    -- Objects for SAME-AS-LINK
    IF meta.EntityTypeId(@EntityId) = 'SAL'
    BEGIN
	    SET @Sql += @TemplateHubLnk;
    
	    SET @Columns = (
	      SELECT CONCAT(ColumnName, ',')
        FROM (
	        SELECT meta.EntityKeyColumnMasterDuplicate(HubLnk, 1) ColumnName
            ,0 [Order]
          FROM meta.EDWEntityRelationship
          WHERE UsedBy = @EntityId
   
          UNION ALL 

          SELECT meta.EntityKeyColumnMasterDuplicate(HubLnk, 0) ColumnName
            ,1 [Order]
          FROM meta.EDWEntityRelationship
          WHERE UsedBy = @EntityId
	      ) Z
	      ORDER BY [Order]
        FOR XML PATH('')
	    );

	    IF LEN(@Columns) > 0
	      SET @Columns = LEFT(@Columns, LEN(@Columns) - 1);

    END

	  -- Objects for SATELLITE
    IF meta.EntityTypeId(@EntityId) = 'Sat'
      SET @Sql += @TemplateSat;

	  -- Objects for Transaction SATELLITE
	  IF meta.EntityTypeId(@EntityId) IN ('TSat', 'RSat')
      SET @Sql += @TemplateTSat;

	  -- Create Foreign Keys for Lnk, Sat, TSat, RSat
	  IF meta.EntityTypeId(@EntityId) IN ('Lnk', 'Sat', 'TSat', 'RSat')
	  BEGIN
	    SET @FKs = (
	      SELECT 
          REPLACE(
            REPLACE(
              REPLACE(
                REPLACE(
                  REPLACE(
                    REPLACE(
                      @TemplateForeignKey, '#referenced_entity_type#', meta.EntityTypeId(HubLnk)
                    ), '#referenced_entity_name#', meta.EntityName(HubLnk)
                  ), '#referenced_entity_table_name#', meta.EntityTableName(HubLnk)
                ), '#referenced_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumn(HubLnk) ELSE CONCAT(meta.EntityKeyColumn(HubLnk), ', [LoadDate]') END
              ), '#referencing_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumnWithSuffix(HubLnk, meta.CleanSuffix(HashKeySuffix)) ELSE CONCAT(meta.EntityKeyColumnWithSuffix(HubLnk, meta.CleanSuffix(HashKeySuffix)), ', [LoadDate]') END
            ), '#column_suffix#', meta.CleanSuffix(HashKeySuffix)
          )
		    FROM meta.EDWEntityRelationship
		    WHERE UsedBy = @EntityId
		    ORDER BY EntityRelationshipId
		    FOR XML PATH('')
	    );

	    SET @Sql += @FKs;
	  END

    -- Create Foreign Keys for SAL
	  IF meta.EntityTypeId(@EntityId) IN ('SAL')
	  BEGIN
	    SET @FKs = (
        SELECT CONCAT(Tmpl, '')
        FROM (
	        SELECT 
            REPLACE(
              REPLACE(
                REPLACE(
                  REPLACE(
                    REPLACE(
                      REPLACE(
                        @TemplateForeignKey, '#referenced_entity_type#', meta.EntityTypeId(HubLnk)
                      ), '#referenced_entity_name#', meta.EntityName(HubLnk)
                    ), '#referenced_entity_table_name#', meta.EntityTableName(HubLnk)
                  ), '#referenced_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumn(HubLnk) ELSE CONCAT(meta.EntityKeyColumn(HubLnk), ', [LoadDate]') END
                ), '#column_suffix#', '_Master'
              ), '#referencing_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumnMasterDuplicate(HubLnk, 1) ELSE CONCAT(meta.EntityKeyColumnMasterDuplicate(HubLnk, 1), ', [LoadDate]') END
            ) Tmpl
		        ,0 [Order]
          FROM meta.EDWEntityRelationship
		      WHERE UsedBy = @EntityId

          UNION ALL

          SELECT 
            REPLACE(
              REPLACE(
                REPLACE(
                  REPLACE(
                    REPLACE(
                      REPLACE(
                        @TemplateForeignKey, '#referenced_entity_type#', meta.EntityTypeId(HubLnk)
                      ), '#referenced_entity_name#', meta.EntityName(HubLnk)
                    ), '#referenced_entity_table_name#', meta.EntityTableName(HubLnk)
                  ), '#referenced_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumn(HubLnk) ELSE CONCAT(meta.EntityKeyColumn(HubLnk), ', [LoadDate]') END
                ), '#column_suffix#', '_Duplicate'
              ), '#referencing_key_column#', CASE meta.PartitioningTypeId(HubLnk) WHEN 'N' THEN meta.EntityKeyColumnMasterDuplicate(HubLnk, 0) ELSE CONCAT(meta.EntityKeyColumnMasterDuplicate(HubLnk, 0), ', [LoadDate]') END
            ) Tmpl
		        ,1 [Order]
          FROM meta.EDWEntityRelationship
		      WHERE UsedBy = @EntityId
        ) Z
        ORDER BY [Order]
		    FOR XML PATH('')
	    );

	    SET @Sql += @FKs;
	  END

    -- Check for index options
    IF meta.PartitioningTypeId(@EntityId) NOT IN ('N') AND dbo.SqlInstanceMajorVersion() > 11
	    SET @IndexOptions = meta.TemplateText('IndexOptionsRowStore_partitioned');
    ELSE
      SET @IndexOptions = meta.TemplateText('IndexOptionsRowStore_nonpartitioned');

  END

  -- Replace Placeholders
  SET @Sql = REPLACE(@Sql, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.[EntityTableName](@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_column#', meta.EntityKeyColumn(@EntityId));
  SET @Sql = REPLACE(@Sql, '#column_names#', @Columns);
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupData() ELSE CONCAT(meta.PartitionSchemeData(@EntityId), '([LoadDate])') END);
  SET @Sql = REPLACE(@Sql, '#filegroup_index#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupIndex() ELSE CONCAT(meta.PartitionSchemeIndex(@EntityId), '([LoadDate])') END);
  SET @Sql = REPLACE(@Sql, '#index_options#', @IndexOptions);
  SET @Sql = REPLACE(@Sql, '#fk_check#', CASE meta.DisabledForeignKey() WHEN 1 THEN 'NOCHECK' ELSE 'CHECK' END);
  SET @Sql = REPLACE(@Sql, '#date_range_end#', meta.DateRangeEnd());
  SET @Sql = REPLACE(@Sql, '#rowstore_compression#', meta.RowStoreCompressionLevel());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&lt;', '<');
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateEDWIndexes]...';


GO
CREATE PROCEDURE [meta].[CreateEDWIndexes]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- RowStore
  IF meta.StorageTypeId(@EntityId) = 'Row'
    EXEC meta.CreateEDWIndexesRowStore @EntityId, @PrintOnly

  -- ColumnStore
  IF meta.StorageTypeId(@EntityId) = 'Col'
    EXEC meta.CreateEDWIndexesColumnStore @EntityId, @PrintOnly

  -- ColumnStore and RowStore
  IF meta.StorageTypeId(@EntityId) = 'CR'
    EXEC meta.CreateEDWIndexesColumnRowStore @EntityId, @PrintOnly

END
GO
PRINT N'Creating [meta].[CreateEDWTable]...';


GO
CREATE PROCEDURE [meta].[CreateEDWTable]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Hubs, Links, Satellite, Transaction Satellite, Record Tracking Satellite, Same-As-Link
  IF meta.EntityTypeId(@EntityId) NOT IN ('Hub', 'Lnk', 'Sat', 'TSat', 'RSat', 'SAL')
    RETURN;

  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWTable'))
    ,@TemplateKeyColumns NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWTable_key_columns'))
	  ,@TemplateColumns NVARCHAR(MAX) = (SELECT meta.TemplateText('EDWTable_column_names'))
	  ,@Sql NVARCHAR(MAX)
	  ,@HashDiff NVARCHAR(MAX) = ''
    ,@LoadDateShort NVARCHAR(MAX) = ''
	  ,@LoadEndDate NVARCHAR(MAX) = ''
	  ,@Columns NVARCHAR(MAX) = ''
	  ,@KeyColumn NVARCHAR(255)
    ,@Database NVARCHAR(50);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#edw_db#')
          , '#schema#', '#edw_schema#')
        , '#object_name#', '[#entity_prefix##entity_type#_#entity_name#]')
      , '#object_type#', 'TABLE'
    );

  -- Search for key columns
  IF meta.EntityTypeId(@EntityId) IN ('Hub', 'Lnk', 'SAL')
    SET @KeyColumn = meta.EntityKeyColumn(@EntityId);

  IF meta.EntityTypeId(@EntityId) IN ('Sat', 'TSat', 'RSat')
	  SET @KeyColumn = (SELECT meta.EntityKeyColumn(HubLnk) FROM meta.EDWEntityRelationship WHERE UsedBy = @EntityId);

  -- Search for attribute columns
  IF meta.EntityTypeId(@EntityId) = 'Hub'
    SET @Columns = (
      SELECT REPLACE(REPLACE(@TemplateKeyColumns, '#column_name#', AttributeName), '#data_type#', meta.SqlDataType(DataTypeId))
      FROM meta.EDWAttribute
      WHERE EDWEntityId = @EntityId
	      AND IsStagingOnly = 0
      ORDER BY [Order]
      FOR XML PATH('')
    );
  
  IF meta.EntityTypeId(@EntityId) = 'Lnk'
    SET @Columns = (
	    SELECT REPLACE(REPLACE(@TemplateKeyColumns, '#column_name#', ColumnName), '#data_type#', DataType)
      FROM (
	      SELECT REPLACE(REPLACE(meta.EntityKeyColumnWithSuffix(HubLnk, meta.CleanSuffix(HashKeySuffix)), '[', ''), ']','') ColumnName
		      ,meta.SqlDataTypeHashKey() DataType
          ,EntityRelationshipId [Order]
        FROM meta.EDWEntityRelationship
        WHERE UsedBy = @EntityId
   
        UNION ALL 

        SELECT AttributeName
		      ,meta.SqlDataType(DataTypeId)
          ,ROW_NUMBER() OVER (ORDER BY [Order]) + 1000
        FROM meta.EDWAttribute
        WHERE EDWEntityId = @EntityId
		      AND IsStagingOnly = 0
	    ) Z
	    ORDER BY [Order]
      FOR XML PATH('')
	  );

  IF meta.EntityTypeId(@EntityId) IN ('Sat', 'TSat')
    SET @Columns = (
      SELECT REPLACE(REPLACE(@TemplateColumns, '#column_name#', AttributeName), '#data_type#', meta.SqlDataType(DataTypeId))
      FROM meta.EDWAttribute
      WHERE EDWEntityId = @EntityId
	      AND IsStagingOnly = 0
      ORDER BY [Order]
      FOR XML PATH('')
    );

  IF meta.EntityTypeId(@EntityId) = 'SAL'
    SET @Columns = (
	    SELECT REPLACE(REPLACE(@TemplateKeyColumns, '#column_name#', ColumnName), '#data_type#', DataType)
      FROM (
	      SELECT REPLACE(REPLACE(meta.EntityKeyColumnMasterDuplicate(HubLnk, 1), '[', ''), ']','') ColumnName
		      ,meta.SqlDataTypeHashKey() DataType
          ,0 [Order]
        FROM meta.EDWEntityRelationship
        WHERE UsedBy = @EntityId
   
        UNION ALL 

        SELECT REPLACE(REPLACE(meta.EntityKeyColumnMasterDuplicate(HubLnk, 0), '[', ''), ']','') ColumnName
		      ,meta.SqlDataTypeHashKey() DataType
          ,1 [Order]
        FROM meta.EDWEntityRelationship
        WHERE UsedBy = @EntityId
	    ) Z
	    ORDER BY [Order]
      FOR XML PATH('')
	  );

  -- Add LoadDateShort column for TLnk, TSat and RSat
  IF meta.EntityTypeId(@EntityId) IN ('TSat', 'RSat')
    OR EXISTS (
        SELECT *
        FROM meta.EDWEntityRelationship
        WHERE HubLnk = @EntityId
          AND meta.EntityTypeId(UsedBy) = 'TSat'
      )
  BEGIN
	  SET @LoadDateShort = REPLACE(REPLACE(@TemplateColumns, '#column_name#', 'LoadDateShort'), '#data_type#', '[date]');
  END

  -- Add LoadEndDate column for Satellites
  IF meta.EntityTypeId(@EntityId) = 'Sat'
  BEGIN
	  SET @HashDiff = REPLACE(REPLACE(@TemplateColumns, '#column_name#', 'HashDiff'), '#data_type#', meta.SqlDataTypeHashKey());
	  SET @LoadEndDate = REPLACE(REPLACE(@TemplateKeyColumns, '#column_name#', 'LoadEndDate'), '#data_type#', '[datetime2]');
  END

  -- Replace Placeholders
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#meta_db#', meta.MetaDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_db#', meta.WarehouseDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_db#', meta.StagingDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_schema#', meta.StagingSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@TemplateDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Template, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.EntityTableName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_column#', @KeyColumn);
  SET @Sql = REPLACE(@Sql, '#data_type_hash_key#', meta.SqlDataTypeHashKey());
  SET @Sql = REPLACE(@Sql, '#hash_diff_column#', @HashDiff);
  SET @Sql = REPLACE(@Sql, '#load_date_short_column#', @LoadDateShort);
  SET @Sql = REPLACE(@Sql, '#load_end_date_column#', @LoadEndDate);
  SET @Sql = REPLACE(@Sql, '#column_names#', @Columns);
  SET @Sql = REPLACE(@Sql, '#edw_db#', meta.WarehouseDbName());
  SET @Sql = REPLACE(@Sql, '#edw_schema#', meta.WarehouseRawSchema());
  SET @Sql = REPLACE(@Sql, '#meta_db#', meta.MetaDbName());
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupData() ELSE CONCAT(meta.PartitionSchemeData(@EntityId), '([LoadDate])') END);
  SET @Sql = REPLACE(@Sql, '#filegroup_index#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupIndex() ELSE CONCAT(meta.PartitionSchemeIndex(@EntityId), '([LoadDate])') END);
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[SetDatabaseOptions]...';


GO
CREATE PROCEDURE [meta].[SetDatabaseOptions]
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  DECLARE 
    @Template NVARCHAR(MAX) = (SELECT meta.TemplateText('DatabaseOptions'))
	  ,@Sql NVARCHAR(MAX)
    ,@Incremental NVARCHAR(50)
    ,@Database NVARCHAR(50);

  IF dbo.SqlInstanceMajorVersion() > 11
    SET @Incremental = '(INCREMENTAL = ON)';
  ELSE
    SET @Incremental = '';

  -- Replace Placeholders for Staging database
  SET @Sql = REPLACE(@Template, '#db_name#', meta.StagingDbName());
  SET @Sql = REPLACE(@Sql, '#incremental_statistics#', @Incremental);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = '[master]';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

  -- Replace Placeholders for EDW database
  SET @Sql = REPLACE(@Template, '#db_name#', meta.WarehouseDbName());
  SET @Sql = REPLACE(@Sql, '#incremental_statistics#', @Incremental);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;
END
GO
PRINT N'Creating [meta].[CreateFinalizeEntityProc]...';


GO
CREATE PROCEDURE [meta].[CreateFinalizeEntityProc] 
  @EntityId int,
  @PrintOnly bit = 0

AS

BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for all entities
  
  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = '
DECLARE @Stmt nvarchar(MAX) = ''#body#'';   
EXEC sys.sp_executesql @Stmt;
'
    ,@Sql NVARCHAR(MAX)
    ,@Database NVARCHAR(50);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#edw_db#')
          , '#schema#', '#schema#')
        , '#object_name#', '[FinalizeEntity_#entity_type#_#entity_name#]')
      , '#object_type#', 'PROCEDURE'
    );

  IF meta.EntityTypeId(@EntityId) IN ('Lnk', 'Sat', 'TSat', 'RSat', 'Br', 'Pit') 
    AND meta.PartitioningTypeId(@EntityId) NOT IN ('N')
    AND dbo.SqlInstanceMajorVersion() > 11
	  SET @Sql = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('FinalizeEntityProc_partitioned'), '''', ''''''));
  ELSE
    SET @Sql = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('FinalizeEntityProc_nonpartitioned'), '''', ''''''));;

  -- Replace Placeholders
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#meta_db#', meta.MetaDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_db#', meta.WarehouseDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_db#', meta.StagingDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_schema#', meta.StagingSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@TemplateDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Sql, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.EntityTableName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @Sql = REPLACE(@Sql, '#partition_function#', meta.PartitionFunction(@EntityId));
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateEDWGetPitProc]...';


GO
CREATE PROCEDURE [meta].[CreateEDWGetPitProc]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for PIT and Bridge only
  IF meta.EntityTypeId(@EntityId) NOT IN ('Pit')
    RETURN;

  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = '
DECLARE @Stmt nvarchar(MAX) = ''#body#'';
EXEC sys.sp_executesql @Stmt;
'
	  ,@TemplateColumns NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('EDWGetPitProc_column_names'), '''', ''''''))
	  ,@TemplateHashColumns NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('EDWGetPitProc_columns_hash'), '''', ''''''))
	  ,@TemplateJoins NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('EDWGetPitProc_join_conditions'), '''', ''''''))
	  ,@Sql NVARCHAR(MAX)
	  ,@HashKeyColumns NVARCHAR(MAX)
	  ,@Columns NVARCHAR(MAX)
	  ,@Joins NVARCHAR(MAX)
	  ,@ReferencedEntityId INT
    ,@Database NVARCHAR(50);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#edw_db#')
          , '#schema#', '#edw_schema#')
        , '#object_name#', '[Get_#entity_type#_#entity_name#]')
      , '#object_type#', 'PROCEDURE'
    );

  SET @Template = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('EDWGetPitProc'), '''', ''''''))

  IF meta.EntityTypeId(@EntityId) = 'Pit'
    SELECT @ReferencedEntityId = HubLnk
    FROM meta.EDWEntityRelationship
    WHERE UsedBy = @EntityId
	    AND meta.EntityTypeId(HubLnk) IN ('Hub', 'Lnk');
  ELSE
    SET @ReferencedEntityId = 0;	-- To Be Implemented for Bridge


  SET @Columns = (
    SELECT REPLACE(REPLACE(REPLACE(REPLACE(@TemplateColumns, '#key_column#', REPLACE(REPLACE(meta.EntityKeyColumn(@ReferencedEntityId), '[', ''), ']', '')), '#referenced_entity_name#', meta.EntityName(UsedBy)), '#referenced_entity_type#', meta.EntityTypeId(UsedBy)), '#referenced_entity_id#', UsedBy)
    FROM meta.EDWEntityRelationship
    WHERE HubLnk = @ReferencedEntityId
      AND meta.EntityTypeId(UsedBy) = 'Sat'
    ORDER BY EntityRelationshipId
    FOR XML PATH('')
  );
  
  SET @Joins = (
    SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@TemplateJoins, '#key_column#', REPLACE(REPLACE(meta.EntityKeyColumn(@ReferencedEntityId), '[', ''), ']', '')), '#entity_type#', meta.EntityTypeId(@ReferencedEntityId)), '#referenced_entity_name#', meta.EntityName(UsedBy)), '#referenced_entity_type#', meta.EntityTypeId(UsedBy)), '#referenced_entity_id#', UsedBy)
    FROM meta.EDWEntityRelationship
    WHERE HubLnk = @ReferencedEntityId
      AND meta.EntityTypeId(UsedBy) = 'Sat'
    ORDER BY EntityRelationshipId
    FOR XML PATH('')
  );

  SET @HashKeyColumns = (
    SELECT REPLACE(@TemplateHashColumns, '#column_name#', REPLACE(meta.ColumnForHash(ColumnName, DataTypeId), '''', ''''''))
    FROM (
      SELECT CONCAT('[', meta.EntityTypeId(@ReferencedEntityId), '].', meta.EntityKeyColumn(HubLnk)) ColumnName
        ,20 DataTypeId  -- [HashKey] data type
        ,EntityRelationshipId [Order]
      FROM meta.EDWEntityRelationship
      WHERE UsedBy = @ReferencedEntityId
   
      UNION ALL 

      SELECT CONCAT('[', meta.EntityTypeId(@ReferencedEntityId), '].[', AttributeName, ']')
        ,DataTypeId
        ,ROW_NUMBER() OVER (ORDER BY [Order]) + 1000
      FROM meta.EDWAttribute
      WHERE EDWEntityId = @ReferencedEntityId
		    AND IsStagingOnly = 0
	      
      UNION ALL

	    SELECT '@SnapshotDate'
        ,17   -- [Date Time 2] data type
	      ,9999
    ) Z
    ORDER BY [Order]
    FOR XML PATH('')
  );

  -- Replace Placeholders
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#meta_db#', meta.MetaDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_db#', meta.WarehouseDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_db#', meta.StagingDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_schema#', meta.StagingSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@TemplateDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Template, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_column#', meta.EntityKeyColumn(@EntityId));
  SET @Sql = REPLACE(@Sql, '#referenced_entity_table_name#', meta.EntityTableName(@ReferencedEntityId));
  SET @Sql = REPLACE(@Sql, '#referenced_entity_type#', meta.EntityTypeId(@ReferencedEntityId));
  SET @Sql = REPLACE(@Sql, '#referenced_key_column#', meta.EntityKeyColumn(@ReferencedEntityId));
  SET @Sql = REPLACE(@Sql, '#column_names#', @Columns);
  SET @Sql = REPLACE(@Sql, '#join_conditions#', @Joins);
  SET @Sql = REPLACE(@Sql, '#hash_columns#', @HashKeyColumns);
  SET @Sql = REPLACE(@Sql, '#hash_type_len#', meta.SqlDataTypeHashKeyLength());
  SET @Sql = REPLACE(@Sql, '#edw_schema#', meta.WarehouseRawSchema());
  SET @Sql = REPLACE(@Sql, '#date_range_start#', meta.DateRangeStart());
  SET @Sql = REPLACE(@Sql, '#hash_delimiter#', meta.HashDelimiter());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateBizIndexesRowStore]...';


GO
CREATE PROCEDURE [meta].[CreateBizIndexesRowStore]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Point In Time and Bridge
  IF meta.EntityTypeId(@EntityId) NOT IN ('Pit', 'Br')
    RETURN;

  DECLARE @Sql NVARCHAR(MAX) = ''
	  ,@NCI NVARCHAR(MAX) = ''
    ,@Database NVARCHAR(50);

  -- RowStore only
  IF meta.StorageTypeId(@EntityId) = 'Row'
  BEGIN
    DECLARE 
      @TemplatePit NVARCHAR(MAX) = (SELECT meta.TemplateText('BizIndexesRowStore_pit'))
      ,@TemplateBr NVARCHAR(MAX) = (SELECT meta.TemplateText('BizIndexesRowStore_bridge'))
      ,@TemplateAdditional NVARCHAR(MAX) = (SELECT meta.TemplateText('BizIndexesRowStore_common'))
      ,@ReferencedEntityId INT
      ,@KeyColumns NVARCHAR(MAX)
      ,@IndexOptions NVARCHAR(max);

	  -- Objects for PIT
	  IF meta.EntityTypeId(@EntityId) IN ('Pit')
	  BEGIN
      SET @Sql += @TemplatePit;

      SELECT @ReferencedEntityId = HubLnk
      FROM meta.EDWEntityRelationship
      WHERE UsedBy = @EntityId;

      -- Create specific non clustered index
	    SET @NCI = (
	      SELECT REPLACE(REPLACE(REPLACE(REPLACE(@TemplateAdditional, '#referenced_entity_type#', meta.EntityTypeId(UsedBy)), '#referenced_entity_name#', meta.EntityName(UsedBy)), '#referenced_entity_table_name#', meta.[EntityTableName](UsedBy)), '#referenced_key_column#', REPLACE(REPLACE(meta.EntityKeyColumn(UsedBy), '[', ''), ']', ''))
		    FROM meta.EDWEntityRelationship
		    WHERE HubLnk = @ReferencedEntityId
		      AND meta.EntityTypeId(UsedBy) = 'Sat'
		    ORDER BY EntityRelationshipId
		    FOR XML PATH('')
	    );

      SET @Sql += @NCI;
	  END

	  -- Objects for BRIDGE
	  IF meta.EntityTypeId(@EntityId) IN ('Br')
    BEGIN
      SET @Sql += @TemplateBr;

      SET @KeyColumns = (
        SELECT CONCAT(meta.EntityKeyColumn(HubLnk), ' ASC, ')
        FROM meta.EDWEntityRelationship 
        WHERE UsedBy = @EntityId
        ORDER BY EntityRelationshipId
        FOR XML PATH('')
      );

      SET @Sql = REPLACE(@Sql, '#key_columns#', @KeyColumns);
    END

    -- Check for index options
    IF meta.PartitioningTypeId(@EntityId) NOT IN ('N') AND dbo.SqlInstanceMajorVersion() > 11
	    SET @IndexOptions = meta.TemplateText('IndexOptionsRowStore_partitioned');
    ELSE
      SET @IndexOptions = meta.TemplateText('IndexOptionsRowStore_nonpartitioned');

  END

  -- Replace Placeholders
  SET @Sql = REPLACE(@Sql, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.[EntityTableName](@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_column#', meta.EntityKeyColumn(@EntityId));
  SET @Sql = REPLACE(@Sql, '#referenced_key_column#', meta.EntityKeyColumn(@ReferencedEntityId));
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupData() ELSE CONCAT(meta.PartitionSchemeData(@EntityId), '([SnapshotDate])') END);
  SET @Sql = REPLACE(@Sql, '#filegroup_index#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupIndex() ELSE CONCAT(meta.PartitionSchemeIndex(@EntityId), '([SnapshotDate])') END);
  SET @Sql = REPLACE(@Sql, '#default_hash_key#', meta.DefaultHashKey());
  SET @Sql = REPLACE(@Sql, '#index_options#', @IndexOptions);
  SET @Sql = REPLACE(@Sql, '#date_range_start#', meta.DateRangeStart());
  SET @Sql = REPLACE(@Sql, '#rowstore_compression#', meta.RowStoreCompressionLevel());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateBizIndexesColumnStore]...';


GO
CREATE PROCEDURE [meta].[CreateBizIndexesColumnStore]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Point In Time and Bridge
  IF meta.EntityTypeId(@EntityId) NOT IN ('Pit', 'Br')
    RETURN;

  DECLARE @Sql NVARCHAR(MAX) = ''
	  ,@NCI NVARCHAR(MAX) = ''
    ,@Database NVARCHAR(50);

  -- ColumnStore only
  IF meta.StorageTypeId(@EntityId) = 'Col'
  BEGIN
    DECLARE 
	    @Template NVARCHAR(MAX) = (SELECT meta.TemplateText('BizIndexesColumnStore_all'))
      ,@TemplateAdditional NVARCHAR(MAX) = (SELECT meta.TemplateText('BizIndexesColumnStore_common'))
      ,@ReferencedEntityId INT;

    SET @Sql += @Template;

    -- Create specific constraints (applies to SQL Server 2016 and above)
	  IF meta.EntityTypeId(@EntityId) IN ('Pit') AND dbo.SqlInstanceMajorVersion() >= 13
	  BEGIN
      SELECT @ReferencedEntityId = HubLnk
      FROM meta.EDWEntityRelationship
      WHERE UsedBy = @EntityId;

	    SET @NCI = (
	      SELECT REPLACE(REPLACE(REPLACE(REPLACE(@TemplateAdditional, '#referenced_entity_type#', meta.EntityTypeId(UsedBy)), '#referenced_entity_name#', meta.EntityName(UsedBy)), '#referenced_entity_table_name#', meta.[EntityTableName](UsedBy)), '#referenced_key_column#', REPLACE(REPLACE(meta.EntityKeyColumn(UsedBy), '[', ''), ']', ''))
		    FROM meta.EDWEntityRelationship
		    WHERE HubLnk = @ReferencedEntityId
		      AND meta.EntityTypeId(UsedBy) = 'Sat'
		    ORDER BY EntityRelationshipId
		    FOR XML PATH('')
	    );

	    SET @Sql += @NCI;
	  END
  END

  -- Replace Placeholders
  SET @Sql = REPLACE(@Sql, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.[EntityTableName](@EntityId));
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupData() ELSE CONCAT(meta.PartitionSchemeData(@EntityId), '([SnapshotDate])') END);
  SET @Sql = REPLACE(@Sql, '#default_hash_key#', meta.DefaultHashKey());
  SET @Sql = REPLACE(@Sql, '#date_range_start#', meta.DateRangeStart());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateBizIndexesColumnRowStore]...';


GO
CREATE PROCEDURE [meta].[CreateBizIndexesColumnRowStore]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Point In Time and Bridge
  IF meta.EntityTypeId(@EntityId) NOT IN ('Pit', 'Br')
    RETURN;

  -- Applies to SQL Server 2016 and above
  IF dbo.SqlInstanceMajorVersion() < 13
  BEGIN
    RAISERROR('Current SQL Server version does not support column store and b-tree indexes on the same table.', 16, 1);
	  RETURN;
  END

  DECLARE @Sql NVARCHAR(MAX) = ''
	  ,@NCI NVARCHAR(MAX) = ''
    ,@Database NVARCHAR(50);

  -- ColumnStore and RowStore
  IF meta.StorageTypeId(@EntityId) = 'CR'
  BEGIN
    DECLARE 
      @TemplatePit NVARCHAR(MAX) = (SELECT meta.TemplateText('BizIndexesColumnRowStore_pit'))
      ,@TemplateBr NVARCHAR(MAX) = (SELECT meta.TemplateText('BizIndexesColumnRowStore_bridge'))
      ,@TemplateAdditional NVARCHAR(MAX) = (SELECT meta.TemplateText('BizIndexesColumnRowStore_common'))
      ,@ReferencedEntityId INT
      ,@IndexOptions NVARCHAR(max);

    SELECT @ReferencedEntityId = HubLnk
    FROM meta.EDWEntityRelationship
    WHERE UsedBy = @EntityId;

    -- Objects for PIT
    IF meta.EntityTypeId(@EntityId) = 'Pit'
      SET @Sql += @TemplatePit;

  	-- Objects for BRIDGE
	  IF meta.EntityTypeId(@EntityId) = 'Br'
      SET @Sql += @TemplateBr;

	  -- Create specific non clustered index
	  IF meta.EntityTypeId(@EntityId) IN ('Pit')
	  BEGIN
	    SET @NCI = (
	      SELECT REPLACE(REPLACE(REPLACE(REPLACE(@TemplateAdditional, '#referenced_entity_type#', meta.EntityTypeId(UsedBy)), '#referenced_entity_name#', meta.EntityName(UsedBy)), '#referenced_entity_table_name#', meta.[EntityTableName](UsedBy)), '#referenced_key_column#', REPLACE(REPLACE(meta.EntityKeyColumn(UsedBy), '[', ''), ']', ''))
		    FROM meta.EDWEntityRelationship
		    WHERE HubLnk = @ReferencedEntityId
		      AND meta.EntityTypeId(UsedBy) = 'Sat'
		    ORDER BY EntityRelationshipId
		    FOR XML PATH('')
	    );

	    SET @Sql += @NCI;
	  END

    -- Check for index options
    IF meta.PartitioningTypeId(@EntityId) NOT IN ('N') AND dbo.SqlInstanceMajorVersion() > 11
	    SET @IndexOptions = meta.TemplateText('IndexOptionsRowStore_partitioned');
    ELSE
      SET @IndexOptions = meta.TemplateText('IndexOptionsRowStore_nonpartitioned');

  END

  -- Replace Placeholders
  SET @Sql = REPLACE(@Sql, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.[EntityTableName](@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_column#', meta.EntityKeyColumn(@EntityId));
  SET @Sql = REPLACE(@Sql, '#referenced_key_column#', meta.EntityKeyColumn(@ReferencedEntityId));
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupData() ELSE CONCAT(meta.PartitionSchemeData(@EntityId), '([SnapshotDate])') END);
  SET @Sql = REPLACE(@Sql, '#filegroup_index#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupIndex() ELSE CONCAT(meta.PartitionSchemeIndex(@EntityId), '([SnapshotDate])') END);
  SET @Sql = REPLACE(@Sql, '#default_hash_key#', meta.DefaultHashKey());
  SET @Sql = REPLACE(@Sql, '#index_options#', @IndexOptions);
  SET @Sql = REPLACE(@Sql, '#date_range_start#', meta.DateRangeStart());
  SET @Sql = REPLACE(@Sql, '#rowstore_compression#', meta.RowStoreCompressionLevel());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateEDWView]...';


GO
CREATE PROCEDURE [meta].[CreateEDWView]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Satellite only
  IF meta.EntityTypeId(@EntityId) NOT IN ('Sat')
    RETURN;

  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = '
DECLARE @Stmt nvarchar(MAX) = ''#body#'';
EXEC sys.sp_executesql @Stmt;
'
	  ,@TemplateColumns NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('EDWView_column_names'), '''', ''''''))
    ,@TemplateLoadEndDate NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('EDWView_virtualized_load_end_date_column'), '''', ''''''))
	  ,@Sql NVARCHAR(MAX)
	  ,@HashDiff NVARCHAR(MAX) = ''
	  ,@LoadEndDate NVARCHAR(MAX) = ''
	  ,@Columns NVARCHAR(MAX) = ''
	  ,@KeyColumn NVARCHAR(255)
    ,@Database NVARCHAR(50);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#edw_db#')
          , '#schema#', '#edw_schema#')
        , '#object_name#', '[#entity_type#_#entity_name#]')
      , '#object_type#', 'VIEW'
    );

  SET @Template = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('EDWView'), '''', ''''''))

  -- Search for key columns
	SET @KeyColumn = (SELECT meta.EntityKeyColumn(HubLnk) FROM meta.EDWEntityRelationship WHERE UsedBy = @EntityId);

  -- Search for attribute columns
  SET @Columns = (
    SELECT REPLACE(@TemplateColumns, '#column_name#', AttributeName)
    FROM meta.EDWAttribute
    WHERE EDWEntityId = @EntityId
	    AND IsStagingOnly = 0
    ORDER BY [Order]
    FOR XML PATH('')
  );

  -- Add LoadEndDate column for Satellites
  IF meta.EntityTypeId(@EntityId) = 'Sat'
  BEGIN
	  SET @HashDiff = REPLACE(@TemplateColumns, '#column_name#', 'HashDiff');

    IF meta.VirtualizedLoadEndDate() = 0
	    SET @LoadEndDate = REPLACE(@TemplateColumns, '#column_name#', 'LoadEndDate');
    ELSE
      SET @LoadEndDate = REPLACE(@TemplateLoadEndDate, '#key_column#', @KeyColumn);
  END

  -- Replace Placeholders
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#meta_db#', meta.MetaDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_db#', meta.WarehouseDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_db#', meta.StagingDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_schema#', meta.StagingSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@TemplateDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Template, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.EntityTableName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_column#', @KeyColumn);
  SET @Sql = REPLACE(@Sql, '#hash_diff_column#', @HashDiff);
  SET @Sql = REPLACE(@Sql, '#load_end_date_column#', @LoadEndDate);
  SET @Sql = REPLACE(@Sql, '#column_names#', @Columns);
  SET @Sql = REPLACE(@Sql, '#edw_schema#', meta.WarehouseRawSchema());
  SET @Sql = REPLACE(@Sql, '#date_range_end#', meta.DateRangeEnd());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[DeploySchemata]...';


GO
CREATE PROCEDURE [meta].[DeploySchemata]
  @PrintOnly bit = 0

AS

BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  DECLARE 
    @Template NVARCHAR(MAX) = (SELECT meta.TemplateText('Schemata'))
	  ,@Sql NVARCHAR(MAX)
    ,@Database NVARCHAR(50);

  -- Replace Placeholders
  SET @Sql = REPLACE(@Template, '#staging_db#', meta.StagingDbName());
  SET @Sql = REPLACE(@Sql, '#edw_db#', meta.WarehouseDbName());
  SET @Sql = REPLACE(@Sql, '#staging_schema#', meta.StagingSchema());
  SET @Sql = REPLACE(@Sql, '#edw_schema#', meta.WarehouseRawSchema());
  SET @Sql = REPLACE(@Sql, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @Sql = REPLACE(@Sql, '#error_schema#', meta.WarehouseErrorSchema());
  SET @Sql = REPLACE(@Sql, '#staging_schema_no_brackets#', REPLACE(REPLACE(meta.StagingSchema(), '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#edw_schema_no_brackets#', REPLACE(REPLACE(meta.WarehouseRawSchema(), '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#biz_schema_no_brackets#', REPLACE(REPLACE(meta.WarehouseBusinessSchema(), '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#error_schema_no_brackets#', REPLACE(REPLACE(meta.WarehouseErrorSchema(), '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);

  SET @Sql = REPLACE(@Template, '#schema#', meta.StagingSchema());
  SET @Sql = REPLACE(@Sql, '#schema_no_brackets#', REPLACE(REPLACE(meta.StagingSchema(), '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  
  SET @Database = meta.StagingDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Template, '#schema#', meta.WarehouseRawSchema());
  SET @Sql = REPLACE(@Sql, '#schema_no_brackets#', REPLACE(REPLACE(meta.WarehouseRawSchema(), '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  
  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Template, '#schema#', meta.WarehouseBusinessSchema());
  SET @Sql = REPLACE(@Sql, '#schema_no_brackets#', REPLACE(REPLACE(meta.WarehouseBusinessSchema(), '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Template, '#schema#', meta.WarehouseErrorSchema());
  SET @Sql = REPLACE(@Sql, '#schema_no_brackets#', REPLACE(REPLACE(meta.WarehouseErrorSchema(), '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateLookupErrorIndexes]...';


GO
CREATE PROCEDURE [meta].[CreateLookupErrorIndexes]
 @EntityId int
,@PrintOnly bit = 0

AS
BEGIN
  
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;
  
  -- Valid for Satellites only
  IF meta.EntityTypeId(@EntityId) NOT IN ('Sat', 'Lnk')
    RETURN;

  DECLARE 
    @Sql NVARCHAR(MAX) = '' 
    ,@Template NVARCHAR(MAX) = (SELECT meta.TemplateText('LookupErrorIndexes'))
    ,@IndexOptions NVARCHAR(MAX)
    ,@Database NVARCHAR(50);
      
  -- Create indexes on Sat lookup error table
  IF meta.EntityTypeId(@EntityId) = 'Sat'
  BEGIN   
    SET @Sql = @Sql + REPLACE(@Template, '#hub_name#', '') 
    SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityNameLookupError(@EntityId));
    SET @Sql = REPLACE(@Sql, '#_#', ''); 
  END
  
  -- Create indexes Lnk lookup error table(s)
  IF meta.EntityTypeId(@EntityId) = 'Lnk'
  BEGIN
    SET @Sql += (
      SELECT REPLACE(@Template, '#hub_name#', CONCAT(meta.EntityName(HubLnk), meta.CleanSuffix(HashKeySuffix)))      
      FROM meta.EDWEntityRelationship 
      WHERE UsedBy = @EntityId
      ORDER BY EntityRelationshipId
      FOR XML PATH('')
    );

    SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityNameLookupError(@EntityId));
    SET @Sql = REPLACE(@Sql, '#_#', '_'); 
  END

  -- Index options
  SET @IndexOptions = 'DATA_COMPRESSION = #rowstore_compression#';
 
  -- Replace Placeholders   
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', meta.FileGroupData());
  SET @Sql = REPLACE(@Sql, '#filegroup_index#', meta.FileGroupIndex());
  SET @Sql = REPLACE(@Sql, '#index_options#', @IndexOptions);
  SET @Sql = REPLACE(@Sql, '#error_schema#', meta.WarehouseErrorSchema());
  SET @Sql = REPLACE(@Sql, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', meta.FileGroupData());
  SET @Sql = REPLACE(@Sql, '#rowstore_compression#', meta.RowStoreCompressionLevel());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');
  SET @Sql = REPLACE(@Sql, '&amp;#x0D;', '');
  SET @Sql = REPLACE(@Sql, '&lt;', '<');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;
    	  	
END
GO
PRINT N'Creating [meta].[CreateLookupErrorTable]...';


GO
CREATE PROCEDURE [meta].[CreateLookupErrorTable] 
 @EntityId int
,@PrintOnly bit = 0

AS
BEGIN
  
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;
  
  -- Valid for Satellites only
  IF meta.EntityTypeId(@EntityId) NOT IN ('Sat', 'Lnk')
    RETURN;

  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = '
DECLARE @Stmt_#id##column_suffix# nvarchar(MAX) = ''#body#'';
EXEC sys.sp_executesql @Stmt_#id##column_suffix#;
'	
    ,@TemplateKeyColumns NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('LookupErrorTable_key_columns'), '''', ''''''))
    ,@TemplateHashColumns NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('LookupErrorTable_columns_hash'), '''', ''''''))
    ,@SqlDrop NVARCHAR(MAX)
    ,@Sql NVARCHAR(MAX)
    ,@Columns NVARCHAR(MAX)
    ,@Database NVARCHAR(50);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#edw_db#')
          , '#schema#', '#error_schema#')
        , '#object_name#', '[#entity_type#_#entity_name##_##hub_name#]')
      , '#object_type#', 'TABLE'
    );

  SET @Template = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('LookupErrorTable'), '''', ''''''))
    
  -- Search for Biz Keys in Sat
  IF meta.EntityTypeId(@EntityId) = 'Sat'
  BEGIN
    SET @Columns = (
      SELECT 
        REPLACE(
          REPLACE(
            @TemplateKeyColumns, '#column_name#', AttributeName
          ), '#data_type#', meta.SqlDataType(DataTypeId)
        )
      FROM (
        SELECT A.AttributeName
          ,A.DataTypeId
	        ,ROW_NUMBER() OVER (ORDER BY ER.EntityRelationshipId, A.[Order]) [Order]
        FROM meta.EDWEntityRelationship ER
	        JOIN meta.EDWAttribute A ON ER.[HubLnk] = A.EDWEntityId
        WHERE UsedBy = @EntityId  
      ) Z	 
      ORDER BY [Order] ASC		    
      FOR XML PATH('')
    );

    IF @Columns IS NULL
      SET @Columns = '';
	         
    SET @SqlDrop = (
      SELECT 
        REPLACE(@TemplateDrop, '#hub_name#', '')
      FROM meta.EDWEntityRelationship 
      WHERE UsedBy = @EntityId
      ORDER BY EntityRelationshipId  
      FOR XML PATH('')    
    );

    SET @Sql = (
      SELECT 
        REPLACE(
          REPLACE(
            REPLACE(
              REPLACE(
                @Template, '#id#', HubLnk
              ), '#key_or_hashkey_columns#', @Columns
            ), '#hub_name#', ''
          ), '#column_suffix#', meta.CleanSuffix(HashKeySuffix)
        )
      FROM meta.EDWEntityRelationship 
      WHERE UsedBy = @EntityId
      ORDER BY EntityRelationshipId  
      FOR XML PATH('')    
    );

    SET @SqlDrop = REPLACE(@SqlDrop, '#entity_name#', meta.EntityNameLookupError(@EntityId));
    SET @SqlDrop = REPLACE(@SqlDrop, '#_#', ''); 

    SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityNameLookupError(@EntityId));
    SET @Sql = REPLACE(@Sql, '#_#', ''); 

  END

  -- Search for Hash Keys in Lnk
  IF meta.EntityTypeId(@EntityId) = 'Lnk'
  BEGIN

    SET @SqlDrop = (
      SELECT 
        REPLACE(@TemplateDrop, '#hub_name#', CONCAT(meta.EntityName(HubLnk), meta.CleanSuffix(HashKeySuffix)))
      FROM meta.EDWEntityRelationship 
      WHERE UsedBy = @EntityId
      ORDER BY EntityRelationshipId  
      FOR XML PATH('')
    );

    SET @Sql = (
      SELECT 
        REPLACE(
          REPLACE(
            REPLACE(
              REPLACE(
                @Template, '#id#', HubLnk
              ), '#key_or_hashkey_columns#', REPLACE(REPLACE(@TemplateHashColumns, '#key_column#', meta.EntityKeyColumnWithSuffix(HubLnk, meta.CleanSuffix(HashKeySuffix))), '#key_datatype#' , meta.SqlDataTypeHashKey())
            ), '#hub_name#', CONCAT(meta.EntityName(HubLnk), meta.CleanSuffix(HashKeySuffix))
          ), '#column_suffix#', meta.CleanSuffix(HashKeySuffix)
        )
      FROM meta.EDWEntityRelationship 
      WHERE UsedBy = @EntityId
      ORDER BY EntityRelationshipId  
      FOR XML PATH('')
    );

    SET @SqlDrop = REPLACE(@SqlDrop, '#entity_name#', meta.EntityNameLookupError(@EntityId));
    SET @SqlDrop = REPLACE(@SqlDrop, '#_#', '_'); 

    SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityNameLookupError(@EntityId));
    SET @Sql = REPLACE(@Sql, '#_#', '_'); 

  END
 
  -- Replace Placeholders
  SET @SqlDrop = REPLACE(@SqlDrop, '#meta_db#', meta.MetaDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#edw_db#', meta.WarehouseDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#staging_db#', meta.StagingDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @SqlDrop = REPLACE(@SqlDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @SqlDrop = REPLACE(@SqlDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#staging_schema#', meta.StagingSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#printonly#', @PrintOnly);
  SET @SqlDrop = REPLACE(@SqlDrop, '&#x0D;', '');

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@SqlDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Sql, '#error_schema#', meta.WarehouseErrorSchema());
  SET @Sql = REPLACE(@Sql, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_column#', meta.EntityKeyColumn(@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_datatype#', meta.SqlDataTypeHashKey());
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', meta.FileGroupData());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');
  SET @Sql = REPLACE(@Sql, '&amp;#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;
    	  	
END
GO
PRINT N'Creating [meta].[CreateEDWGhostRecordDeleteProc]...';


GO
CREATE PROCEDURE [meta].[CreateEDWGhostRecordDeleteProc]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Valid for Hubs and Sat only
  IF meta.EntityTypeId(@EntityId) NOT IN ('Hub', 'Sat')
    RETURN;

  -- Valid for Sat related to Hub only
  IF meta.EntityTypeId(@EntityId) = 'Sat'
    AND
    (
      SELECT meta.EntityTypeId(HubLnk)
      FROM meta.EDWEntityRelationship EntRel
      WHERE UsedBy = @EntityId
    ) != 'Hub'
    RETURN;

  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = '
DECLARE @Stmt nvarchar(MAX) = ''#body#'';
EXEC sys.sp_executesql @Stmt;
'
    ,@Database NVARCHAR(50)
    ,@Sql NVARCHAR(MAX)
    ,@SqlDrop NVARCHAR(MAX);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#edw_db#')
          , '#schema#', '#edw_schema#')
        , '#object_name#', '[GhostRecordDelete_#entity_type#_#entity_name#]')
      , '#object_type#', 'PROCEDURE'
    );

  SET @Template = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('EDWGhostRecordDeleteProc'), '''', ''''''))

  -- Replace Placeholders
  SET @SqlDrop = REPLACE(@TemplateDrop, '#meta_db#', meta.MetaDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#edw_db#', meta.WarehouseDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#staging_db#', meta.StagingDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @SqlDrop = REPLACE(@SqlDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @SqlDrop = REPLACE(@SqlDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#staging_schema#', meta.StagingSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@SqlDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Template, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.[EntityTableName](@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_column#', meta.EntityKeyColumn(@EntityId));
  SET @Sql = REPLACE(@Sql, '#data_type_hash_key#', meta.SqlDataTypeHashKey());
  SET @Sql = REPLACE(@Sql, '#default_hash_key#', meta.DefaultHashKey());
  SET @Sql = REPLACE(@Sql, '#edw_schema#', meta.WarehouseRawSchema());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateEDWGhostRecordInsertProc]...';


GO
CREATE PROCEDURE [meta].[CreateEDWGhostRecordInsertProc]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Valid for Hubs and Sat only
  IF meta.EntityTypeId(@EntityId) NOT IN ('Hub', 'Sat')
    RETURN;

  -- Valid for Sat related to Hub only
  IF meta.EntityTypeId(@EntityId) = 'Sat'
    AND
    (
      SELECT meta.EntityTypeId(HubLnk)
      FROM meta.EDWEntityRelationship EntRel
      WHERE UsedBy = @EntityId
    ) != 'Hub'
    RETURN;

  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = '
DECLARE @Stmt nvarchar(MAX) = ''#body#'';
EXEC sys.sp_executesql @Stmt;
'
    ,@TemplateColumns NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('EDWGhostRecordInsertProc_column_names'), '''', ''''''))
	  ,@TemplateValues NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('EDWGhostRecordInsertProc_column_values'), '''', ''''''))
	  ,@Columns NVARCHAR(MAX)
	  ,@Values NVARCHAR(MAX)
    ,@Database NVARCHAR(50)
    ,@Sql NVARCHAR(MAX)
    ,@SqlDrop NVARCHAR(MAX);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#edw_db#')
          , '#schema#', '#edw_schema#')
        , '#object_name#', '[GhostRecordInsert_#entity_type#_#entity_name#]')
      , '#object_type#', 'PROCEDURE'
    );

  SET @Template = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('EDWGhostRecordInsertProc'), '''', ''''''))

  SET @Columns = (
    SELECT REPLACE(@TemplateColumns, '#column_name#', AttributeName)
    FROM meta.EDWAttribute 
    WHERE EDWEntityId = @EntityId
      AND IsStagingOnly = 0
    ORDER BY [Order]
    FOR XML PATH('')
  )

  SET @Values = (
    SELECT REPLACE(@TemplateValues, '#column_value#',
      CASE 
	      WHEN DataTypeId IN (1, 2, 3, 4, 13, 14, 21, 22) THEN '0'
		    WHEN DataTypeId IN (15, 16, 17, 18) THEN '''''#date_range_start#'''''
		    WHEN DataTypeId IN (19) THEN '''''00:00:00'''''
		    ELSE '''''Unknown'''''
	    END)
    FROM meta.EDWAttribute
    WHERE EDWEntityId = @EntityId
      AND IsStagingOnly = 0
    ORDER BY [Order]
	  FOR XML PATH('')
  )

  -- Replace Placeholders
  SET @SqlDrop = REPLACE(@TemplateDrop, '#meta_db#', meta.MetaDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#edw_db#', meta.WarehouseDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#staging_db#', meta.StagingDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @SqlDrop = REPLACE(@SqlDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @SqlDrop = REPLACE(@SqlDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#staging_schema#', meta.StagingSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@SqlDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Template, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.[EntityTableName](@EntityId));
  SET @Sql = REPLACE(@Sql, '#column_names#', @Columns);
  SET @Sql = REPLACE(@Sql, '#column_values#', @Values);
  SET @Sql = REPLACE(@Sql, '#key_column#', meta.EntityKeyColumn(@EntityId));
  SET @Sql = REPLACE(@Sql, '#load_end_date_column#', CASE WHEN meta.EntityTypeId(@EntityId) = 'Sat' THEN '  ,[LoadEndDate]' ELSE '' END);
  SET @Sql = REPLACE(@Sql, '#end_date_value#', CASE WHEN meta.EntityTypeId(@EntityId) = 'Sat' THEN '  ,''''#date_range_end#''''' ELSE '' END);
  SET @Sql = REPLACE(@Sql, '#hash_diff_column#', CASE WHEN meta.EntityTypeId(@EntityId) = 'Sat' THEN '  ,[HashDiff]' ELSE '' END);
  SET @Sql = REPLACE(@Sql, '#hash_diff_value#', CASE WHEN meta.EntityTypeId(@EntityId) = 'Sat' THEN '  ,CONVERT(#data_type_hash_key#, ''''#default_hash_key#'''')' ELSE '' END);
  SET @Sql = REPLACE(@Sql, '#data_type_hash_key#', meta.SqlDataTypeHashKey());
  SET @Sql = REPLACE(@Sql, '#default_hash_key#', meta.DefaultHashKey());
  SET @Sql = REPLACE(@Sql, '#edw_schema#', meta.WarehouseRawSchema());
  SET @Sql = REPLACE(@Sql, '#date_range_start#', meta.DateRangeStart());
  SET @Sql = REPLACE(@Sql, '#date_range_end#', meta.DateRangeEnd());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateBizBrTable]...';


GO
CREATE PROCEDURE [meta].[CreateBizBrTable]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Point In Time and Bridge
  IF meta.EntityTypeId(@EntityId) NOT IN ('Br')
    RETURN;

  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = (SELECT meta.TemplateText('BizBridgeTable'))
    ,@TemplateKeyColumns NVARCHAR(MAX) = (SELECT meta.TemplateText('BizBridgeTable_key_columns'))
    ,@TemplateColumns NVARCHAR(MAX) = (SELECT meta.TemplateText('BizBridgeTable_column_names'))
	  ,@Sql NVARCHAR(MAX)
	  ,@KeyColumns NVARCHAR(MAX)
    ,@Columns NVARCHAR(MAX)
    ,@Database NVARCHAR(50);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#edw_db#')
          , '#schema#', '#biz_schema#')
        , '#object_name#', '[#entity_type#_#entity_name#]')
      , '#object_type#', 'TABLE'
    );

  -- Search for columns
  SET @KeyColumns = (
    SELECT REPLACE(@TemplateKeyColumns, '#referenced_key_column#', meta.EntityKeyColumn(HubLnk))
    FROM meta.EDWEntityRelationship 
    WHERE UsedBy = @EntityId
    ORDER BY EntityRelationshipId
    FOR XML PATH('')
  );

  SET @Columns = (
    SELECT REPLACE(REPLACE(REPLACE(@TemplateColumns, '#referenced_entity_name#', meta.EntityName(B.EDWEntityId)), '#referenced_column#', B.AttributeName), '#data_type#', meta.SqlDataType(B.DataTypeId))
    FROM meta.EDWEntityRelationship A
      JOIN meta.EDWAttribute B ON A.HubLnk = B.EDWEntityId
    WHERE UsedBy = @EntityId
     AND meta.EntityTypeId(A.HubLnk) = 'Lnk'
    ORDER BY A.EntityRelationshipId
      ,B.[Order]
    FOR XML PATH('')
  );
  
  -- Replace Placeholders
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#meta_db#', meta.MetaDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_db#', meta.WarehouseDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_db#', meta.StagingDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_schema#', meta.StagingSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@TemplateDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Template, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.EntityTableName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_columns#', @KeyColumns);
  SET @Sql = REPLACE(@Sql, '#column_names#', ISNULL(@Columns, ''));
  SET @Sql = REPLACE(@Sql, '#data_type_hash_key#', meta.SqlDataTypeHashKey());
  SET @Sql = REPLACE(@Sql, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupData() ELSE CONCAT(meta.PartitionSchemeData(@EntityId), '([SnapshotDate])') END);
  SET @Sql = REPLACE(@Sql, '#filegroup_index#', CASE meta.PartitioningTypeId(@EntityId) WHEN 'N' THEN meta.FileGroupIndex() ELSE CONCAT(meta.PartitionSchemeIndex(@EntityId), '([SnapshotDate])') END);
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[DeployDatabases]...';


GO
CREATE PROCEDURE [meta].[DeployDatabases]
  @PrintOnly bit = 0

AS

BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for on-premises instances only
  IF dbo.SqlInstanceOnPrem() = 0
    RETURN;

  DECLARE 
    @Template nvarchar(MAX) = (SELECT meta.TemplateText('Databases'))
	  ,@Sql NVARCHAR(MAX)
    ,@Database NVARCHAR(50);

  -- Replace Placeholders
  SET @Sql = REPLACE(@Template, '#staging_db#', meta.StagingDbName());
  SET @Sql = REPLACE(@Sql, '#edw_db#', meta.WarehouseDbName());
  SET @Sql = REPLACE(@Sql, '#staging_db_no_brackets#', REPLACE(REPLACE(meta.StagingDbName(), '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#edw_db_no_brackets#', REPLACE(REPLACE(meta.WarehouseDbName(), '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#physical_filename_staging#', dbo.PhysicalFileName(meta.StagingDbName(), ''));
  SET @Sql = REPLACE(@Sql, '#physical_filename_staging_log#', dbo.PhysicalFileNameLog(meta.StagingDbName(), 'log'));
  SET @Sql = REPLACE(@Sql, '#physical_filename_edw#', dbo.PhysicalFileName(meta.WarehouseDbName(), ''));
  SET @Sql = REPLACE(@Sql, '#physical_filename_edw_log#', dbo.PhysicalFileNameLog(meta.WarehouseDbName(), 'log'));
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);

  SET @Database = '[master]';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[DeployFileGroups]...';


GO
CREATE PROCEDURE [meta].[DeployFileGroups]
  @PrintOnly bit = 0

AS

BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for on-premises instances only
  IF dbo.SqlInstanceOnPrem() = 0
    RETURN;

  DECLARE 
    @Template nvarchar(MAX) = (SELECT meta.TemplateText('FileGroups'))
	  ,@Sql nvarchar(MAX)
    ,@Database NVARCHAR(50)
    ,@LogicalFileNameStagingData varchar(60) = dbo.NewLogicalFileName(meta.FileGroupData())
    ,@LogicalFileNameStagingIndex varchar(60) = dbo.NewLogicalFileName(meta.FileGroupIndex())
    ,@LogicalFileNameEdwData varchar(60) = dbo.NewLogicalFileName(meta.FileGroupData())
    ,@LogicalFileNameEdwIndex varchar(60) = dbo.NewLogicalFileName(meta.FileGroupIndex());

  -- Replace Placeholders
  SET @Sql = REPLACE(@Template, '#staging_db#', meta.StagingDbName());
  SET @Sql = REPLACE(@Sql, '#edw_db#', meta.WarehouseDbName());
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', meta.FileGroupData());
  SET @Sql = REPLACE(@Sql, '#filegroup_index#', meta.FileGroupIndex());
  SET @Sql = REPLACE(@Sql, '#filegroup_data_no_brackets#', REPLACE(REPLACE(meta.FileGroupData(), '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#filegroup_index_no_brackets#', REPLACE(REPLACE(meta.FileGroupIndex(), '[', ''), ']', ''));
  SET @Sql = REPLACE(@Sql, '#logical_filename_staging_data#', @LogicalFileNameStagingData);
  SET @Sql = REPLACE(@Sql, '#physical_filename_staging_data#', dbo.PhysicalFileName(meta.StagingDbName(), @LogicalFileNameStagingData));
  SET @Sql = REPLACE(@Sql, '#logical_filename_staging_index#', @LogicalFileNameStagingIndex);
  SET @Sql = REPLACE(@Sql, '#physical_filename_staging_index#', dbo.PhysicalFileName(meta.StagingDbName(), @LogicalFileNameStagingIndex));
  SET @Sql = REPLACE(@Sql, '#logical_filename_edw_data#', @LogicalFileNameEdwData);
  SET @Sql = REPLACE(@Sql, '#physical_filename_edw_data#', dbo.PhysicalFileName(meta.WarehouseDbName(), @LogicalFileNameEdwData));
  SET @Sql = REPLACE(@Sql, '#logical_filename_edw_index#', @LogicalFileNameEdwIndex);
  SET @Sql = REPLACE(@Sql, '#physical_filename_edw_index#', dbo.PhysicalFileName(meta.WarehouseDbName(), @LogicalFileNameEdwIndex));
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);

  SET @Database = '[master]';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [etl].[GetEntities]...';


GO
CREATE PROCEDURE [etl].[GetEntities]
  @ProcessId int

AS
BEGIN
  SET NOCOUNT ON;

  SELECT EntityId
  FROM meta.ProcessEntityRelationship 
  WHERE ProcessId = @ProcessId;

END
GO
PRINT N'Creating [etl].[GetEntityInfo]...';


GO
CREATE PROCEDURE [etl].[GetEntityInfo]
  @EntityId int,
  @ProcessId int

AS
BEGIN
  SET NOCOUNT ON;

  DECLARE @ReferredEntityId int
    ,@ReferredEntityTypeId varchar(4)
    ,@ParentEntityId int;

  SELECT @ReferredEntityId = UsedBy
    ,@ReferredEntityTypeId = meta.EntityTypeId(UsedBy)
  FROM meta.EDWEntityRelationship EntRel
    JOIN meta.ProcessEntityRelationship ProcRel ON EntRel.UsedBy = ProcRel.EntityId
      AND ProcRel.ProcessId = @ProcessId
  WHERE HubLnk = @EntityId
    AND meta.EntityTypeId(UsedBy) IN ('Sat', 'TSat');

  IF meta.EntityTypeId(@EntityId) IN ('Sat', 'TSat', 'RSat')
    SELECT @ParentEntityId = HubLnk
    FROM meta.EDWEntityRelationship EntRel
      JOIN meta.ProcessEntityRelationship ProcRel ON EntRel.HubLnk = ProcRel.EntityId
    WHERE UsedBy = @EntityId

  IF meta.EntityTypeId(@EntityId) = 'RSat'
    SELECT @ReferredEntityId = UsedBy
      ,@ReferredEntityTypeId = meta.EntityTypeId(UsedBy)
    FROM meta.EDWEntityRelationship EntRel
      JOIN meta.ProcessEntityRelationship ProcRel ON EntRel.UsedBy = ProcRel.EntityId
        AND ProcRel.ProcessId = @ProcessId
    WHERE HubLnk = @ParentEntityId
      AND meta.EntityTypeId(UsedBy) IN ('Sat', 'TSat');

  IF @ReferredEntityId IS NULL
      SET @ReferredEntityId = @EntityId;

  SELECT meta.EntityName(@EntityId) EntityName
    ,meta.EntityTypeId(@EntityId) EntityType
    ,meta.EntityTableNameEDW(@EntityId, 1) EntityTableName
    ,meta.EntityName(@ReferredEntityId) EntityNameStaging
    ,CASE meta.EntityTypeId(@EntityId)
      WHEN 'Pit' THEN CONCAT(meta.WarehouseRawSchema(), '.[Get_', meta.EntityTypeId(@EntityId), '_', meta.EntityName(@EntityId), ']')
      ELSE meta.EntityViewNameStaging(@ReferredEntityId)
    END EntityViewNameStaging
    ,CASE 
      WHEN meta.EntityTypeId(@EntityId) = 'Lnk' AND @ReferredEntityTypeId = 'TSat'
      THEN CONVERT(BIT, 1)
      ELSE CONVERT(BIT, 0)
    END IsTLnk
    ,meta.CreateEntity(@EntityId) CreateEntity
    ,ISNULL(@ParentEntityId, -1) ParentEntityId;

END
GO
PRINT N'Creating [etl].[GetStagingTablesByProcess]...';


GO
CREATE PROCEDURE [etl].[GetStagingTablesByProcess]
  @ProcessId int

AS
BEGIN
  SET NOCOUNT ON;

  SELECT
    StagingTableName = meta.EntityTableNameStaging(UsedBy) 
    ,EDWEntities = CONCAT(meta.EntityTableName(EntityId), ', ', meta.EntityTableName(UsedBy))
  FROM meta.ProcessEntityRelationship PER
    JOIN meta.EDWEntityRelationship ER ON PER.EntityId = ER.HubLnk
  WHERE ProcessId = @ProcessId
    AND meta.EntityTypeId(EntityId) in ('Hub', 'Lnk')
    AND meta.EntityTypeId(UsedBy) in ('Sat', 'TSat')

  UNION ALL

  SELECT 
    meta.EntityTableNameStaging(EntityId)
    ,meta.EntityTableName(EntityId)
  FROM meta.ProcessEntityRelationship PER
  WHERE ProcessId = @ProcessId
    AND meta.EntityTypeId(EntityId) in ('Hub', 'Lnk')
    AND NOT EXISTS (
      SELECT *
      FROM meta.EDWEntityRelationship ER
      WHERE PER.EntityId = ER.HubLnk
        AND meta.EntityTypeId(UsedBy) in ('Sat', 'TSat')
    )

  ORDER BY EDWEntities;

 END
GO
PRINT N'Creating [etl].[GetProcessType]...';


GO
CREATE PROCEDURE [etl].[GetProcessType]
  @ProcessId int

AS
BEGIN
  SET NOCOUNT ON;

  SELECT ProcessTypeId
  FROM meta.Process 
  WHERE ProcessId = @ProcessId;

END
GO
PRINT N'Creating [etl].[GetColumns]...';


GO
CREATE PROCEDURE [etl].[GetColumns]
  @EntityId int
  ,@LookupOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  DECLARE @Columns AS TABLE(ColumnName varchar(255), ColumnNameBraket varchar(257), SqlDataType varchar(50), DataTypeSize int, Sort int, IsHashKey bit, ReferencedEntityId int, HashKeySuffix varchar(50));
  DECLARE @ReferencedEntityId int;
  
  IF meta.EntityTypeId(@EntityId) NOT IN ('Pit', 'Br')
  BEGIN
    IF @LookupOnly = 0
      INSERT INTO @Columns
      VALUES
        (REPLACE(REPLACE(meta.EntityKeyColumn(@EntityId), '[', ''), ']',''), meta.EntityKeyColumn(@EntityId), meta.SqlDataTypeHashKey(), meta.SqlDataTypeHashKeyLength(), 1, 1, @EntityId, '')
        ,('LoadDate', '[LoadDate]', 'datetime2', 7, 2, 0, 0, '')
        ,('RecordSource', '[RecordSource]', 'varchar(50)', 50, 4, 0, 0, '');
  END
  ELSE
  BEGIN
    SELECT @ReferencedEntityId = HubLnk
    FROM meta.EDWEntityRelationship
    WHERE UsedBy = @EntityId

    IF @LookupOnly = 0
      INSERT INTO @Columns
      VALUES
        (REPLACE(REPLACE(meta.EntityKeyColumn(@EntityId), '[', ''), ']',''), meta.EntityKeyColumn(@EntityId), meta.SqlDataTypeHashKey(), meta.SqlDataTypeHashKeyLength(), 1, 1, @EntityId, '')
        ,('SnapshotDateShort', '[SnapshotDateShort]', 'date', 3, 3, 0, 0, '');
        
    INSERT INTO @Columns
    VALUES
      (REPLACE(REPLACE(meta.EntityKeyColumn(@ReferencedEntityId), '[', ''), ']',''), meta.EntityKeyColumn(@ReferencedEntityId), meta.SqlDataTypeHashKey(), meta.SqlDataTypeHashKeyLength(), 2, 1, @ReferencedEntityId, '')
      ,('SnapshotDate', '[SnapshotDate]', 'datetime2', 7, 2, 0, 0, '');
  END

  -- LoadDateShort for TLnk, TSat and RSat
  IF @LookupOnly = 0
    IF meta.EntityTypeId(@EntityId) IN ('TSat', 'RSat')
      OR EXISTS (
          SELECT *
          FROM meta.EDWEntityRelationship
          WHERE HubLnk = @EntityId
            AND meta.EntityTypeId(UsedBy) = 'TSat'
        )
      INSERT INTO @Columns
      VALUES
        ('LoadDateShort', '[LoadDateShort]', 'date', 3, 3, 0, 0, '')

  IF meta.EntityTypeId(@EntityId) = 'Hub'
    INSERT INTO @Columns
    SELECT AttributeName
      ,'[' + AttributeName + ']'
      ,meta.SqlDataType(DataTypeId)
      ,ISNULL(meta.DataTypeSize(DataTypeId), 0)
      ,[Order] + 10
      ,0
      ,0
      ,''
    FROM meta.EDWAttribute
    WHERE EDWEntityId = @EntityId
      AND IsStagingOnly = 0
    ORDER BY [Order];

  IF meta.EntityTypeId(@EntityId) = 'Lnk'
    INSERT INTO @Columns
	  SELECT ColumnName
      ,ColumnNameBraket
      ,DataType
      ,DataTypeSize
      ,[Order]
      ,IsHashKey
      ,ReferencedEntityId
      ,HashKeySuffix
    FROM (
	    SELECT REPLACE(REPLACE(meta.EntityKeyColumnWithSuffix(HubLnk, meta.CleanSuffix(HashKeySuffix)), '[', ''), ']','') ColumnName
        ,meta.EntityKeyColumnWithSuffix(HubLnk, meta.CleanSuffix(HashKeySuffix)) ColumnNameBraket
		    ,meta.SqlDataTypeHashKey() DataType
        ,meta.SqlDataTypeHashKeyLength() DataTypeSize
        ,EntityRelationshipId + 10 [Order]
        ,1 IsHashKey
        ,HubLnk ReferencedEntityId
        ,meta.CleanSuffix(HashKeySuffix) HashKeySuffix
      FROM meta.EDWEntityRelationship
      WHERE UsedBy = @EntityId
   
      UNION ALL 

      SELECT AttributeName
        ,'[' + AttributeName + ']'
		    ,meta.SqlDataType(DataTypeId)
        ,ISNULL(meta.DataTypeSize(DataTypeId), 0)
        ,ROW_NUMBER() OVER (ORDER BY [Order]) + 1000
        ,0
        ,0
        ,''
      FROM meta.EDWAttribute
      WHERE EDWEntityId = @EntityId
		    AND IsStagingOnly = 0
	  ) Z;

    IF meta.EntityTypeId(@EntityId) = 'SAL'
    INSERT INTO @Columns
	  SELECT ColumnName
      ,ColumnNameBraket
      ,DataType
      ,DataTypeSize
      ,[Order]
      ,IsHashKey
      ,ReferencedEntityId
      ,HashKeySuffix
    FROM (
	    SELECT REPLACE(REPLACE(meta.EntityKeyColumnMasterDuplicate(HubLnk, 1), '[', ''), ']','') ColumnName
        ,meta.EntityKeyColumnMasterDuplicate(HubLnk, 1) ColumnNameBraket
		    ,meta.SqlDataTypeHashKey() DataType
        ,meta.SqlDataTypeHashKeyLength() DataTypeSize
        ,EntityRelationshipId + 10 [Order]
        ,1 IsHashKey
        ,HubLnk ReferencedEntityId
        ,meta.CleanSuffix(HashKeySuffix) HashKeySuffix
      FROM meta.EDWEntityRelationship
      WHERE UsedBy = @EntityId
   
      UNION ALL 

	    SELECT REPLACE(REPLACE(meta.EntityKeyColumnMasterDuplicate(HubLnk, 0), '[', ''), ']','') ColumnName
        ,meta.EntityKeyColumnMasterDuplicate(HubLnk, 0) ColumnNameBraket
		    ,meta.SqlDataTypeHashKey() DataType
        ,meta.SqlDataTypeHashKeyLength() DataTypeSize
        ,EntityRelationshipId + 1000 [Order]
        ,1 IsHashKey
        ,HubLnk ReferencedEntityId
        ,meta.CleanSuffix(HashKeySuffix) HashKeySuffix
      FROM meta.EDWEntityRelationship
      WHERE UsedBy = @EntityId
	  ) Z;

  IF meta.EntityTypeId(@EntityId) = 'Sat'
    INSERT INTO @Columns
    VALUES
      ('HashDiff', '[HashDiff]', meta.SqlDataTypeHashKey(), meta.SqlDataTypeHashKeyLength(), 4, 1, 0, '');

  IF meta.EntityTypeId(@EntityId) IN ('Sat', 'TSat', 'RSat')
    IF @LookupOnly = 0
      INSERT INTO @Columns
      SELECT AttributeName
        ,'[' + AttributeName + ']'
        ,meta.SqlDataType(DataTypeId)
        ,ISNULL(meta.DataTypeSize(DataTypeId), 0)
        ,[Order] + 10
        ,0
        ,0
        ,''
      FROM meta.EDWAttribute
      WHERE EDWEntityId = @EntityId
	      AND IsStagingOnly = 0;
    ELSE
      INSERT INTO @Columns
      VALUES
        (REPLACE(REPLACE(meta.EntityKeyColumn(@EntityId), '[', ''), ']',''), meta.EntityKeyColumn(@EntityId), meta.SqlDataTypeHashKey(), meta.SqlDataTypeHashKeyLength(), 1, 1, meta.ParentEntityId(@EntityId), '');

  IF meta.EntityTypeId(@EntityId) IN ('Pit', 'Br')
    IF @LookupOnly = 0
    BEGIN
      INSERT INTO @Columns
      SELECT meta.EntityName(UsedBy) + '_' + REPLACE(REPLACE(meta.EntityKeyColumn(@ReferencedEntityId), '[', ''), ']', '')
        ,'[' + meta.EntityName(UsedBy) + '_' + REPLACE(REPLACE(meta.EntityKeyColumn(@ReferencedEntityId), '[', ''), ']', '') + ']'
        ,meta.SqlDataTypeHashKey()
        ,meta.SqlDataTypeHashKeyLength()
        ,EntityRelationshipId * 2 + 1000
        ,1
        ,@ReferencedEntityId
        ,''
      FROM meta.EDWEntityRelationship
      WHERE HubLnk = @ReferencedEntityId
      AND meta.EntityTypeId(UsedBy) = 'Sat'

      UNION ALL

      SELECT meta.EntityName(UsedBy) + '_' + 'LoadDate'
        ,'[' + meta.EntityName(UsedBy) + '_' + 'LoadDate]'
        ,'datetime2'
        ,7
        ,EntityRelationshipId * 2 + 1001
        ,0
        ,0
        ,''
      FROM meta.EDWEntityRelationship 
      WHERE HubLnk = @ReferencedEntityId
      AND meta.EntityTypeId(UsedBy) = 'Sat';

    END

  SELECT ColumnName
    ,ColumnNameBraket
    ,SqlDataType
    ,DataTypeSize
    ,IsHashKey
    ,ReferencedEntityId
    ,HashKeySuffix
  FROM @Columns
  ORDER BY Sort;

END
GO
PRINT N'Creating [meta].[CreateStagingView]...';


GO
CREATE PROCEDURE [meta].[CreateStagingView]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Hubs, Links, Same-As-Link
  IF meta.EntityTypeId(@EntityId) NOT IN ('Hub', 'Lnk', 'SAL')
    RETURN;

  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = '
DECLARE @Stmt_#id# nvarchar(MAX) = ''#body#'';
EXEC sys.sp_executesql @Stmt_#id#;
'
	  ,@TemplateColumns NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('StagingView_column_names'), '''', ''''''))
	  ,@TemplateHashColumns NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('StagingView_hash_columns'), '''', ''''''))
	  ,@TemplateHash NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('StagingView_key_columns'), '''', ''''''))
	  ,@SqlDrop NVARCHAR(MAX)
    ,@Sql NVARCHAR(MAX)
	  ,@KeyColumns NVARCHAR(MAX)
	  ,@HashKeyColumns NVARCHAR(MAX)
	  ,@Columns NVARCHAR(MAX)
	  ,@ColumnsHashDiff NVARCHAR(MAX)
	  ,@HashDiff NVARCHAR(MAX)
	  ,@ForeignHashKeys NVARCHAR(MAX) = ''
    ,@HubId INT
    ,@HashKeySuffix VARCHAR(50)
    ,@TempHashKeys NVARCHAR(MAX)
    ,@Database NVARCHAR(50);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#staging_db#')
          , '#schema#', '#staging_schema#')
        , '#object_name#', '[#sat_entity_name#]')
      , '#object_type#', 'VIEW'
    );

  SET @Template = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('StagingView'), '''', ''''''))
  SET @Template = REPLACE(@Template, '#column_names#', '#column_names_#id##')
  SET @Template = REPLACE(@Template, '#hash_diff_column#', '#hash_diff_column_#id##')

  -- Search for key columns and hash key in Hub
  IF meta.EntityTypeId(@EntityId) = 'Hub'
  BEGIN
    SET @KeyColumns = (
      SELECT REPLACE(@TemplateColumns, '#column_name#', AttributeName)
      FROM meta.EDWAttribute
      WHERE EDWEntityId = @EntityId
      ORDER BY [Order]
      FOR XML PATH('')
    );

	  SET @HashKeyColumns = (
      SELECT REPLACE(@TemplateHashColumns, '#column_name#', REPLACE(meta.ColumnForHash(AttributeName, DataTypeId), '''', ''''''))
      FROM meta.EDWAttribute
      WHERE EDWEntityId = @EntityId
      ORDER BY [Order]
      FOR XML PATH('')
    );
  END
  
  -- Search for key columns and hash key in Lnk
  IF meta.EntityTypeId(@EntityId) = 'Lnk'
  BEGIN
    SET @KeyColumns = (
	    SELECT REPLACE(@TemplateColumns, '#column_name#', AttributeName)
      FROM (
	      SELECT CONCAT(meta.EntityName(A.EDWEntityId), '_', A.AttributeName, meta.CleanSuffix(ER.HashKeySuffix)) AttributeName
		      ,A.DataTypeId
          ,ROW_NUMBER() OVER (ORDER BY ER.EntityRelationshipId, A.[Order]) [Order]
        FROM meta.EDWEntityRelationship ER
          JOIN meta.EDWAttribute A ON ER.[HubLnk] = A.EDWEntityId
        WHERE UsedBy = @EntityId
   
        UNION ALL 

        SELECT A.AttributeName
		      ,A.DataTypeId
          ,ROW_NUMBER() OVER (ORDER BY [Order]) + 1000
        FROM meta.EDWAttribute A
        WHERE EDWEntityId = @EntityId
	    ) Z
	    ORDER BY [Order]
      FOR XML PATH('')
	  );

	  SET @HashKeyColumns = (
	    SELECT REPLACE(@TemplateHashColumns, '#column_name#', REPLACE(meta.ColumnForHash(AttributeName, DataTypeId), '''', ''''''))
      FROM (
	      SELECT CONCAT(meta.EntityName(A.EDWEntityId), '_', A.AttributeName, meta.CleanSuffix(ER.HashKeySuffix)) AttributeName
		      ,A.DataTypeId
          ,ROW_NUMBER() OVER (ORDER BY ER.EntityRelationshipId, A.[Order]) [Order]
        FROM meta.EDWEntityRelationship ER
          JOIN meta.EDWAttribute A ON ER.[HubLnk] = A.EDWEntityId
        WHERE UsedBy = @EntityId
   
        UNION ALL 

        SELECT A.AttributeName
		      ,A.DataTypeId
          ,ROW_NUMBER() OVER (ORDER BY [Order]) + 1000
        FROM meta.EDWAttribute A
        WHERE EDWEntityId = @EntityId
	    ) Z
	    ORDER BY [Order]
      FOR XML PATH('')
	  );

	  -- Replace foreign Hask Keys for Links
	  DECLARE ent CURSOR FOR 
	    SELECT HubLnk
        ,HashKeySuffix
      FROM meta.EDWEntityRelationship 
      WHERE UsedBy = @EntityId
      ORDER BY EntityRelationshipId;
	  OPEN ent;
	  FETCH NEXT FROM ent INTO @HubId, @HashKeySuffix;
	  WHILE @@FETCH_STATUS = 0
	  BEGIN
	    SET @TempHashKeys = (
	      SELECT REPLACE(@TemplateHashColumns, '#column_name#',  REPLACE(meta.ColumnForHash(CONCAT(meta.EntityName(@HubId), '_', AttributeName, meta.CleanSuffix(@HashKeySuffix)), DataTypeId), '''', ''''''))
        FROM meta.EDWAttribute
        WHERE EDWEntityId = @HubId
          AND IsStagingOnly = 0
        ORDER BY [Order]
		    FOR XML PATH('')
	    )

	    SET @ForeignHashKeys += REPLACE(REPLACE(@TemplateHash, '#key_column#', meta.EntityKeyColumnWithSuffix(@HubId, meta.CleanSuffix(@HashKeySuffix))), '#hash_columns#', @TempHashKeys) + CHAR(13) + CHAR(10);
	  
	    FETCH NEXT FROM ent INTO @HubId, @HashKeySuffix;
	  END
	  CLOSE ent;
	  DEALLOCATE ent;
  END

  -- Search for key columns and hash key in SAL
  IF meta.EntityTypeId(@EntityId) = 'SAL'
  BEGIN
    SET @KeyColumns = (
	    SELECT REPLACE(@TemplateColumns, '#column_name#', AttributeName)
      FROM (
	      SELECT CONCAT(meta.EntityName(A.EDWEntityId), '_', meta.AttributeNameMasterDuplicate(A.AttributeId, 1)) AttributeName
		      ,A.DataTypeId
          ,ROW_NUMBER() OVER (ORDER BY ER.EntityRelationshipId, A.[Order]) [Order]
        FROM meta.EDWEntityRelationship ER
          JOIN meta.EDWAttribute A ON ER.[HubLnk] = A.EDWEntityId
        WHERE UsedBy = @EntityId
   
        UNION ALL 

	      SELECT CONCAT(meta.EntityName(A.EDWEntityId), '_', meta.AttributeNameMasterDuplicate(A.AttributeId, 0)) AttributeName
		      ,A.DataTypeId
          ,ROW_NUMBER() OVER (ORDER BY ER.EntityRelationshipId, A.[Order]) + 1000 [Order]
        FROM meta.EDWEntityRelationship ER
          JOIN meta.EDWAttribute A ON ER.[HubLnk] = A.EDWEntityId
        WHERE UsedBy = @EntityId
	    ) Z
	    ORDER BY [Order]
      FOR XML PATH('')
	  );

	  SET @HashKeyColumns = (
	    SELECT REPLACE(@TemplateHashColumns, '#column_name#', REPLACE(meta.ColumnForHash(AttributeName, DataTypeId), '''', ''''''))
      FROM (
	      SELECT CONCAT(meta.EntityName(A.EDWEntityId), '_', meta.AttributeNameMasterDuplicate(A.AttributeId, 1)) AttributeName
		      ,A.DataTypeId
          ,ROW_NUMBER() OVER (ORDER BY ER.EntityRelationshipId, A.[Order]) [Order]
        FROM meta.EDWEntityRelationship ER
          JOIN meta.EDWAttribute A ON ER.[HubLnk] = A.EDWEntityId
        WHERE UsedBy = @EntityId
   
        UNION ALL 

	      SELECT CONCAT(meta.EntityName(A.EDWEntityId), '_', meta.AttributeNameMasterDuplicate(A.AttributeId, 0)) AttributeName
		      ,A.DataTypeId
          ,ROW_NUMBER() OVER (ORDER BY ER.EntityRelationshipId, A.[Order]) + 1000 [Order]
        FROM meta.EDWEntityRelationship ER
          JOIN meta.EDWAttribute A ON ER.[HubLnk] = A.EDWEntityId
        WHERE UsedBy = @EntityId
	    ) Z
	    ORDER BY [Order]
      FOR XML PATH('')
	  );

	  -- Replace foreign Hask Keys for Links
	  DECLARE ent CURSOR FOR 
	    SELECT HubLnk
      FROM meta.EDWEntityRelationship 
      WHERE UsedBy = @EntityId
      ORDER BY EntityRelationshipId;
	  OPEN ent;
	  FETCH NEXT FROM ent INTO @HubId;
	  WHILE @@FETCH_STATUS = 0
	  BEGIN
	    SET @TempHashKeys = (
	      SELECT REPLACE(@TemplateHashColumns, '#column_name#', REPLACE(meta.ColumnForHash(CONCAT(meta.EntityName(@HubId), '_', meta.AttributeNameMasterDuplicate(AttributeId, 1)), DatatypeId), '''', ''''''))
        FROM meta.EDWAttribute
        WHERE EDWEntityId = @HubId
          AND IsStagingOnly = 0
        ORDER BY [Order]
		    FOR XML PATH('')
	    )

	    SET @ForeignHashKeys = @ForeignHashKeys + REPLACE(REPLACE(@TemplateHash, '#key_column#', meta.EntityKeyColumnMasterDuplicate(@HubId, 1)), '#hash_columns#', @TempHashKeys) + CHAR(13) + CHAR(10);

      SET @TempHashKeys = (
	      SELECT REPLACE(@TemplateHashColumns, '#column_name#', REPLACE(meta.ColumnForHash(CONCAT(meta.EntityName(@HubId), '_', meta.AttributeNameMasterDuplicate(AttributeId, 0)), DataTypeId), '''', ''''''))
        FROM meta.EDWAttribute
        WHERE EDWEntityId = @HubId
          AND IsStagingOnly = 0
        ORDER BY [Order]
		    FOR XML PATH('')
	    )

	    SET @ForeignHashKeys = @ForeignHashKeys + REPLACE(REPLACE(@TemplateHash, '#key_column#', meta.EntityKeyColumnMasterDuplicate(@HubId, 0)), '#hash_columns#', @TempHashKeys) + CHAR(13) + CHAR(10);
	  
	    FETCH NEXT FROM ent INTO @HubId;
	  END
	  CLOSE ent;
	  DEALLOCATE ent;
  END

  -- Search for Satellite columns
  IF EXISTS (
    SELECT *
	  FROM meta.EDWEntityRelationship
	  WHERE [HubLnk] = @EntityId
	    AND meta.EntityTypeId(UsedBy) IN ('Sat', 'TSat')
  )
  BEGIN
    SET @SqlDrop = (
      SELECT REPLACE(@TemplateDrop, '#sat_entity_name#', meta.EntityViewName(UsedBy))
      FROM meta.EDWEntityRelationship 
      WHERE [HubLnk] = @EntityId
	      AND meta.EntityTypeId(UsedBy) IN ('Sat', 'TSat')
      FOR XML PATH('')
    );

    SET @Sql = (
      SELECT REPLACE(REPLACE(REPLACE(@Template, '#entity_view_name#', meta.EntityViewNameStaging(UsedBy)), '#entity_table_name#', meta.EntityTableNameStaging(UsedBy)), '#id#', UsedBy)
      FROM meta.EDWEntityRelationship 
      WHERE [HubLnk] = @EntityId
	      AND meta.EntityTypeId(UsedBy) IN ('Sat', 'TSat')
      FOR XML PATH('')
    );

	  -- Replace columns
	  DECLARE @SatEntityId int;
	  DECLARE cols CURSOR FOR 
	    SELECT UsedBy
	    FROM meta.EDWEntityRelationship 
      WHERE [HubLnk] = @EntityId
	      AND meta.EntityTypeId(UsedBy) IN ('Sat', 'TSat');
	  OPEN cols;
	  FETCH NEXT FROM cols INTO @SatEntityId;
	  WHILE @@FETCH_STATUS = 0
	  BEGIN
	    SET @Columns = (
        SELECT REPLACE(@TemplateColumns, '#column_name#', AttributeName)
        FROM meta.EDWAttribute
        WHERE EDWEntityId = @SatEntityId
        ORDER BY [Order]
        FOR XML PATH('')
      );

	    SET @Sql = REPLACE(@Sql, replace('#column_names_#id##', '#id#', @SatEntityId), @Columns);

	    -- Replace HashDiff
	    IF meta.EntityTypeId(@SatEntityId) = 'Sat'
	    BEGIN
	      SET @ColumnsHashDiff = (
          SELECT REPLACE(@TemplateHashColumns, '#column_name#', REPLACE(meta.ColumnForHash(AttributeName, DataTypeId), '''', ''''''))
          FROM meta.EDWAttribute
          WHERE EDWEntityId = @SatEntityId
		        AND IsStagingOnly = 0
          ORDER BY [Order]
          FOR XML PATH('')
        );
	    
		    SET @HashDiff = REPLACE(REPLACE(@TemplateHash, '#key_column#', '[HashDiff]'), '#hash_columns#', @ColumnsHashDiff);
	    END
	    ELSE
	      SET @HashDiff = '';

	    SET @Sql = REPLACE(@Sql, replace('#hash_diff_column_#id##', '#id#', @SatEntityId), @HashDiff);

	    FETCH NEXT FROM cols INTO @SatEntityId;
	  END
	  CLOSE cols;
	  DEALLOCATE cols;
  END
  ELSE
  BEGIN
	  SET @SqlDrop = @TemplateDrop;
    SET @Sql = REPLACE(REPLACE(REPLACE(@Template, '#hash_diff_column_#id##', ''), '#column_names_#id##', ''), '#id#', @EntityId);
  END

  -- Replace Placeholders
  SET @SqlDrop = REPLACE(@SqlDrop, '#sat_entity_name#', meta.EntityViewName(@EntityId));
  SET @SqlDrop = REPLACE(@SqlDrop, '#meta_db#', meta.MetaDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#edw_db#', meta.WarehouseDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#staging_db#', meta.StagingDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @SqlDrop = REPLACE(@SqlDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @SqlDrop = REPLACE(@SqlDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#staging_schema#', meta.StagingSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#printonly#', @PrintOnly);
  SET @SqlDrop = REPLACE(@SqlDrop, '&#x0D;', '');

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@SqlDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Sql, '#entity_view_name#', meta.EntityViewNameStaging(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.EntityTableNameStaging(@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_column#', meta.EntityKeyColumn(@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_columns#', @KeyColumns);
  SET @Sql = REPLACE(@Sql, '#hash_columns#', @HashKeyColumns);
  SET @Sql = REPLACE(@Sql, '#foreign_hash_keys#', @ForeignHashKeys);
  SET @Sql = REPLACE(@Sql, '#staging_db#', meta.StagingDbName());
  SET @Sql = REPLACE(@Sql, '#staging_schema#', meta.StagingSchema());
  SET @Sql = REPLACE(@Sql, '#meta_db#', meta.MetaDbName());
  SET @Sql = REPLACE(@Sql, '#hash_delimiter#', meta.HashDelimiter());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.StagingDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateStagingTable]...';


GO
CREATE PROCEDURE [meta].[CreateStagingTable]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Hubs, Links, Same-As-Link
  IF meta.EntityTypeId(@EntityId) NOT IN ('Hub', 'Lnk', 'SAL')
    RETURN;

  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = '
DECLARE @Stmt_#id# nvarchar(MAX) = ''#body#'';
EXEC sys.sp_executesql @Stmt_#id#;
'
    ,@TemplateKeyColumns NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('StagingTable_key_columns'), '''', ''''''))
	  ,@TemplateColumns NVARCHAR(MAX) = (SELECT REPLACE(meta.TemplateText('StagingTable_column_names'), '''', ''''''))
	  ,@SqlDrop NVARCHAR(MAX)
    ,@Sql NVARCHAR(MAX)
	  ,@KeyColumns NVARCHAR(MAX)
	  ,@Columns NVARCHAR(MAX)
    ,@Database NVARCHAR(50);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#staging_db#')
          , '#schema#', '#staging_schema#')
        , '#object_name#', '[#sat_entity_name#]')
      , '#object_type#', 'TABLE'
    );

  SET @Template = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('StagingTable'), '''', ''''''))
  SET @Template = REPLACE(@Template, '#column_names#', '#column_names_#id##')

  -- Search for key columns in Hub
  IF meta.EntityTypeId(@EntityId) = 'Hub'
    SET @KeyColumns = (
      SELECT REPLACE(REPLACE(@TemplateKeyColumns, '#column_name#', AttributeName), '#data_type#', meta.SqlDataType(DataTypeId))
      FROM meta.EDWAttribute
      WHERE EDWEntityId = @EntityId
      ORDER BY [Order]
      FOR XML PATH('')
    );

  -- Search for key columns in Lnk
  IF meta.EntityTypeId(@EntityId) = 'Lnk'
    SET @KeyColumns = (
	    SELECT REPLACE(REPLACE(@TemplateKeyColumns, '#column_name#', AttributeName), '#data_type#', meta.SqlDataType(DataTypeId))
      FROM (
	      SELECT CONCAT(meta.EntityName(A.EDWEntityId), '_', A.AttributeName, meta.CleanSuffix(ER.HashKeySuffix)) AttributeName
		      ,A.DataTypeId
          ,ROW_NUMBER() OVER (ORDER BY ER.EntityRelationshipId, A.[Order]) [Order]
        FROM meta.EDWEntityRelationship ER
          JOIN meta.EDWAttribute A ON ER.[HubLnk] = A.EDWEntityId
        WHERE UsedBy = @EntityId
   
        UNION ALL 

        SELECT A.AttributeName
		      ,A.DataTypeId
          ,ROW_NUMBER() OVER (ORDER BY [Order]) + 1000
        FROM meta.EDWAttribute A
        WHERE EDWEntityId = @EntityId
	    ) Z
	    ORDER BY [Order]
      FOR XML PATH('')
	  );

  -- Search for key columns in SAL
  IF meta.EntityTypeId(@EntityId) = 'SAL'
    SET @KeyColumns = (
	    SELECT REPLACE(REPLACE(@TemplateKeyColumns, '#column_name#', AttributeName), '#data_type#', meta.SqlDataType(DataTypeId))
      FROM (
	      SELECT CONCAT(meta.EntityName(A.EDWEntityId), '_', meta.AttributeNameMasterDuplicate(A.AttributeId, 1)) AttributeName
		      ,A.DataTypeId
          ,ROW_NUMBER() OVER (ORDER BY ER.EntityRelationshipId, A.[Order]) [Order]
        FROM meta.EDWEntityRelationship ER
          JOIN meta.EDWAttribute A ON ER.[HubLnk] = A.EDWEntityId
        WHERE UsedBy = @EntityId

        UNION ALL

        SELECT CONCAT(meta.EntityName(A.EDWEntityId), '_', meta.AttributeNameMasterDuplicate(A.AttributeId, 0)) AttributeName
		      ,A.DataTypeId
          ,ROW_NUMBER() OVER (ORDER BY ER.EntityRelationshipId, A.[Order]) + 1000 [Order]
        FROM meta.EDWEntityRelationship ER
          JOIN meta.EDWAttribute A ON ER.[HubLnk] = A.EDWEntityId
        WHERE UsedBy = @EntityId
	    ) Z
	    ORDER BY [Order]
      FOR XML PATH('')
	  );

  -- Search for Satellite columns
  IF EXISTS (
    SELECT *
	  FROM meta.EDWEntityRelationship
	  WHERE [HubLnk] = @EntityId
	    AND meta.EntityTypeId(UsedBy) IN ('Sat', 'TSat')
  )
  BEGIN
    SET @SqlDrop = (
      SELECT REPLACE(@TemplateDrop, '#sat_entity_name#', meta.EntityName(UsedBy))
      FROM meta.EDWEntityRelationship 
      WHERE [HubLnk] = @EntityId
	      AND meta.EntityTypeId(UsedBy) IN ('Sat', 'TSat')
      FOR XML PATH('')
    )

    SET @Sql = (
      SELECT REPLACE(REPLACE(@Template, '#entity_table_name#', meta.EntityTableNameStaging(UsedBy)), '#id#', UsedBy)
      FROM meta.EDWEntityRelationship 
      WHERE [HubLnk] = @EntityId
	      AND meta.EntityTypeId(UsedBy) IN ('Sat', 'TSat')
      FOR XML PATH('')
    )

	  -- Replace columns
	  DECLARE @SatEntityId int;
	  DECLARE cols CURSOR FOR 
	    SELECT UsedBy
	    FROM meta.EDWEntityRelationship 
        WHERE [HubLnk] = @EntityId
	        AND meta.EntityTypeId(UsedBy) IN ('Sat', 'TSat');
	  OPEN cols;
	  FETCH NEXT FROM cols INTO @SatEntityId;
	  WHILE @@FETCH_STATUS = 0
	  BEGIN
	    SET @Columns = (
        SELECT REPLACE(REPLACE(@TemplateColumns, '#column_name#', AttributeName), '#data_type#', meta.SqlDataType(DataTypeId))
        FROM meta.EDWAttribute
        WHERE EDWEntityId = @SatEntityId
        ORDER BY [Order]
        FOR XML PATH('')
      )

	    SET @Sql = REPLACE(@Sql, replace('#column_names_#id##', '#id#', @SatEntityId), @Columns);

	    FETCH NEXT FROM cols INTO @SatEntityId;
	  END
	  CLOSE cols;
	  DEALLOCATE cols;
  END
  ELSE
  BEGIN
    SET @SqlDrop = @TemplateDrop;
    SET @Sql = REPLACE(REPLACE(@Template, '#column_names_#id##', ''), '#id#', @EntityId);
  END

  -- Replace Placeholders
  SET @SqlDrop = REPLACE(@SqlDrop, '#sat_entity_name#', meta.EntityName(@EntityId));
  SET @SqlDrop = REPLACE(@SqlDrop, '#meta_db#', meta.MetaDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#edw_db#', meta.WarehouseDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#staging_db#', meta.StagingDbName());
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @SqlDrop = REPLACE(@SqlDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @SqlDrop = REPLACE(@SqlDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @SqlDrop = REPLACE(@SqlDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#staging_schema#', meta.StagingSchema());
  SET @SqlDrop = REPLACE(@SqlDrop, '#printonly#', @PrintOnly);
  SET @SqlDrop = REPLACE(@SqlDrop, '&#x0D;', '');

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@SqlDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.EntityTableNameStaging(@EntityId));
  SET @Sql = REPLACE(@Sql, '#key_columns#', @KeyColumns);
  SET @Sql = REPLACE(@Sql, '#filegroup_data#', meta.FileGroupData());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.StagingDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateEDWUpdateLoadEndDateProc]...';


GO
CREATE PROCEDURE [meta].[CreateEDWUpdateLoadEndDateProc] 
  @EntityId int,
  @PrintOnly bit = 0

AS

BEGIN
  SET NOCOUNT ON;

  -- Check if Environment is set to Develoment
  EXEC meta.CheckEnvironment;

  -- Valid for Satellites only
  IF meta.EntityTypeId(@EntityId) NOT IN ('Sat') 
    RETURN;

  DECLARE 
    @TemplateDrop NVARCHAR(MAX) = (SELECT meta.TemplateText('DropObject'))
    ,@Template NVARCHAR(MAX) = '
DECLARE @Stmt nvarchar(MAX) = ''#body#'';   
EXEC sys.sp_executesql @Stmt;
'
    ,@Sql NVARCHAR(MAX)
    ,@Database NVARCHAR(50);

  SET @TemplateDrop = 
    REPLACE(
      REPLACE(
        REPLACE(
          REPLACE(@TemplateDrop
            , '#db_name#', '#edw_db#')
          , '#schema#', '#edw_schema#')
        , '#object_name#', '[UpdateLoadEndDate_#entity_type#_#entity_name#]')
      , '#object_type#', 'PROCEDURE'
    );

  SET @Template = REPLACE(@Template, '#body#', REPLACE(meta.TemplateText('EDWUpdateLoadEndDateProc'), '''', ''''''))

  -- Replace Placeholders
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#meta_db#', meta.MetaDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_db#', meta.WarehouseDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_db#', meta.StagingDbName());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_prefix#', CASE meta.EntityTypeId(@EntityId) WHEN 'Sat' THEN 'tbl_' ELSE '' END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#entity_name#', meta.EntityName(@EntityId));
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#schema#', CASE WHEN meta.EntityTypeId(@EntityId) IN ('Pit', 'Br') THEN meta.WarehouseBusinessSchema() ELSE meta.WarehouseRawSchema() END);
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#edw_schema#', meta.WarehouseRawSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#biz_schema#', meta.WarehouseBusinessSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#error_schema#', meta.WarehouseErrorSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#staging_schema#', meta.StagingSchema());
  SET @TemplateDrop = REPLACE(@TemplateDrop, '#printonly#', @PrintOnly);

  SET @Database = '';
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@TemplateDrop
	  ,@PrintOnly;

  SET @Sql = REPLACE(@Template, '#entity_type#', meta.EntityTypeId(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_name#', meta.EntityName(@EntityId));
  SET @Sql = REPLACE(@Sql, '#entity_table_name#', meta.[EntityTableName](@EntityId));
  SET @Sql = REPLACE(@Sql, '#edw_schema#', meta.WarehouseRawSchema());
  SET @Sql = REPLACE(@Sql, '#key_column#', meta.EntityKeyColumn(@EntityId));
  SET @Sql = REPLACE(@Sql, '#date_range_end#', meta.DateRangeEnd());
  SET @Sql = REPLACE(@Sql, '#printonly#', @PrintOnly);
  SET @Sql = REPLACE(@Sql, '&#x0D;', '');

  SET @Database = meta.WarehouseDbName();
  EXEC dbo.ExecuteOrPrint
    @Database
	  ,@Sql
	  ,@PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateBizIndexes]...';


GO
CREATE PROCEDURE [meta].[CreateBizIndexes]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- RowStore
  IF meta.StorageTypeId(@EntityId) = 'Row'
    EXEC meta.CreateBizIndexesRowStore @EntityId, @PrintOnly

  -- ColumnStore
  IF meta.StorageTypeId(@EntityId) = 'Col'
    EXEC meta.CreateBizIndexesColumnStore @EntityId, @PrintOnly

  -- ColumnStore and RowStore
  IF meta.StorageTypeId(@EntityId) = 'CR'
    EXEC meta.CreateBizIndexesColumnRowStore @EntityId, @PrintOnly

END
GO
PRINT N'Creating [meta].[CreateIndexes]...';


GO
CREATE PROCEDURE [meta].[CreateIndexes]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- EDW Entities
  IF meta.EntityTypeId(@EntityId) IN ('Hub', 'Lnk', 'Sat', 'TSat', 'RSat', 'SAL')
    EXEC meta.CreateEDWIndexes @EntityId, @PrintOnly

  -- Business Entities
  IF meta.EntityTypeId(@EntityId) IN ('Pit', 'Br')
    EXEC meta.CreateBizIndexes @EntityId, @PrintOnly

  -- Lookup Error Entities
  IF meta.EntityTypeId(@EntityId) IN ('Lnk', 'Sat')
    EXEC meta.CreateLookupErrorIndexes @EntityId, @PrintOnly

END
GO
PRINT N'Creating [meta].[CreateTable]...';


GO
CREATE PROCEDURE [meta].[CreateTable]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- EDW Entities
  IF meta.EntityTypeId(@EntityId) IN ('Hub', 'Lnk', 'Sat', 'TSat', 'RSat', 'SAL')
    EXEC meta.CreateEDWTable @EntityId, @PrintOnly;

  -- Business Entities
  IF meta.EntityTypeId(@EntityId) IN ('Pit')
    EXEC meta.CreateBizPitTable @EntityId, @PrintOnly;

  IF meta.EntityTypeId(@EntityId) IN ('Br')
    EXEC meta.CreateBizBrTable @EntityId, @PrintOnly;

  -- Lookup Error Entities
  IF meta.EntityTypeId(@EntityId) IN ('Lnk', 'Sat')
	  EXEC meta.CreateLookupErrorTable @EntityId, @PrintOnly;

END
GO
PRINT N'Creating [meta].[CreateAllObjectsForEntity]...';


GO
CREATE PROCEDURE [meta].[CreateAllObjectsForEntity]
  @EntityId int,
  @PrintOnly bit = 0

AS
BEGIN
  SET NOCOUNT ON;

  -- Create Staging entities
  IF meta.EntityTypeId(@EntityId) IN ('Hub', 'Lnk', 'SAL')
  BEGIN
	  PRINT '-- ***   Creating staging table ***';
    EXEC meta.CreateStagingTable @EntityId, @PrintOnly;

	  PRINT '-- ***   Creating staging view ***';
    EXEC meta.CreateStagingView @EntityId, @PrintOnly;
  END
  
  IF meta.EntityTypeId(@EntityId) IN ('Sat', 'TSat')
  BEGIN
    DECLARE @ParentEntityId int = (SELECT meta.ParentEntityId(@EntityId));

	  PRINT '-- ***   Creating parent staging table ***';
	  EXEC meta.CreateStagingTable @ParentEntityId, @PrintOnly;

	  PRINT '-- ***   Creating parent staging view ***';
    EXEC meta.CreateStagingView @ParentEntityId, @PrintOnly;
  END

  -- Create EDW or Biz table partitioning
  PRINT '-- ***   Creating partitioning objects ***';
  EXEC meta.CreateTablePartitioning @EntityId, @PrintOnly;

  -- Create EDW, Biz, Error tables
  IF meta.CreateEntity(@EntityId) = 1
  BEGIN
    PRINT '-- ***   Creating edw table(s) ***';
    EXEC meta.CreateTable @EntityId, @PrintOnly;
  END
  ELSE
    PRINT '-- ***   Skipping edw table creation ***';

  -- Create EDW views
  IF meta.CreateEntity(@EntityId) = 1
  BEGIN
    PRINT '-- ***   Creating edw view(s) ***';
    EXEC meta.CreateEDWView @EntityId, @PrintOnly;
  END
  ELSE
    PRINT '-- ***   Skipping edw view creation ***';

  -- Create indexes and constraints for EDW or Biz table;
  IF meta.CreateEntity(@EntityId) = 1
  BEGIN
    PRINT '-- ***   Creating indexes ***';
    EXEC meta.CreateIndexes @EntityId, @PrintOnly;
  END
  ELSE
    PRINT '-- ***   Skipping indexes creation ***';

  -- Create EDW UpdateEndDate procedure
  PRINT '-- ***   Creating upload end date procedure ***';
  EXEC meta.CreateEDWUpdateLoadEndDateProc @EntityId, @PrintOnly;

  -- Create PIT extract procedure
  PRINT '-- ***   Creating point in time extract procedure ***';
  EXEC meta.CreateEDWGetPitProc @EntityId, @PrintOnly;

  -- Create EDW or Biz initialization procedure for partitioning
  PRINT '-- ***   Creating initialize entity procedure ***';
  EXEC meta.CreateInitializeEntityProc @EntityId, @PrintOnly;

  -- Create EDW or Biz finalization procedure for statistics management
  PRINT '-- ***   Creating finalize entity procedure ***';
  EXEC meta.CreateFinalizeEntityProc @EntityId, @PrintOnly;

  -- Insert edw ghost record
  PRINT '-- ***   Creating ghost records handling procedures ***';
  EXEC meta.CreateEDWGhostRecordInsertProc @EntityId, @PrintOnly;
  EXEC meta.CreateEDWGhostRecordDeleteProc @EntityId, @PrintOnly;
END
GO
/*
Post-Deployment Script
*/
SET NOCOUNT ON;

/* [meta].[Environment] */
DECLARE @Environment VARCHAR(50) = 'Development';
DECLARE @SchemaVersion VARCHAR(50) = '1.1.0.1';

CREATE TABLE [#Environment]
(
  [Id] VARCHAR(50) NOT NULL , 
  [Value] VARCHAR(50) NOT NULL
)

INSERT INTO [#Environment]
(
  [Id]
  ,[Value]
)
VALUES
	('Environment', @Environment)
  ,('SchemaVersion', @SchemaVersion);

MERGE INTO [meta].[Environment] t
USING [#Environment] s
  ON t.[Id] = s.[Id]
WHEN NOT MATCHED BY TARGET  
THEN
  INSERT ([Id], [Value])
  VALUES (s.[Id], s.[Value]);
GO

/* [meta].[Configuration] */
CREATE TABLE [#Configuration]
(
  [Id] VARCHAR(50) NOT NULL, 
  [Value] VARCHAR(50) NOT NULL,
  [Description] VARCHAR(MAX) NULL
);

INSERT INTO [#Configuration]
(
  [Id]
  ,[Value]
  ,[Description]
)
VALUES
  ('FileGroupData', 'DATA', 'Database filegroup used for data storage.')
  ,('FileGroupIndex', 'INDEX', 'Database filegroup used for index storage.')
  ,('HashAlgorithm', 'SHA1', 'Hash algorithm used for business keys and diff hashing.')
  ,('HashCulture', 'en-US', 'Local culture used for hashing numeric data types.')
  ,('HashDelimiter', '|', 'Field delimiter used for hashing.')
  ,('StagingDbName', 'TEMP_DVStaging', 'Database target name for publishing staging entities. Database must be on the same DVMeta instance.')
  ,('StagingSchema', 'dsa', 'Schema used to publish entities in staging database.')
  ,('WarehouseBusinessSchema', 'business', 'Schema used to publish business vault entities in vault database.')
  ,('WarehouseDbName', 'TEMP_DV', 'Database target name for publishing raw and business vault entities. Database must be on the same DVMeta instance.')
  ,('WarehouseRawSchema', 'edw', 'Schema used to publish raw vault entities in vault database.')
  ,('WarehouseErrorSchema', 'error', 'Schema used to publish error entities in vault database.')
  ,('VirtualizedLoadEndDate', 'true', 'Enable use of on-the-fly calculated LoadEndDate for Satellites. It avoids updates during satellites loading.')
  ,('DisabledForeignKey', 'false', 'Enable/disable foreign key constraints in vault database.')
  ,('CompressRowStore', 'true', 'Enable/disable ROW level compression for RowStore tables in vault database.');

MERGE INTO [meta].[Configuration] t
USING [#Configuration] s
  ON t.[Id] = s.[Id]
WHEN NOT MATCHED BY TARGET  
THEN
  INSERT ([Id], [Value], [Description])
  VALUES (s.[Id], s.[Value], s.[Description]);
GO

/* [meta].[DataType] */
CREATE TABLE [#DataType]
(
  [DataTypeId] INT NOT NULL, 
  [DataTypeName] VARCHAR(50) NOT NULL, 
  [Size] INT NULL,
  [Precision] INT NULL,
  [Scale] INT NULL,
  [LastUpdateTime] DATETIME2 NOT NULL, 
  [LastChangeUserName] NVARCHAR(128) NULL
);

INSERT INTO [#DataType]
(
	[DataTypeId]
	,[DataTypeName]
	,[Size]
	,[Precision]
  ,[Scale]
	,[LastUpdateTime]
)
VALUES
  (1, 'Integer', NULL, NULL, NULL, meta.DateRangeStart())
  ,(2, 'Small Integer', NULL, NULL, NULL, meta.DateRangeStart())
  ,(3, 'Tiny Integer', NULL, NULL, NULL, meta.DateRangeStart())
  ,(4, 'Boolean', NULL, NULL, NULL, meta.DateRangeStart())
  ,(5, 'Short Text (Unicode)', 20, NULL, NULL, meta.DateRangeStart())
  ,(6, 'Medium Text (Unicode)', 50, NULL, NULL, meta.DateRangeStart())
  ,(7, 'Long Text (Unicode)', 255, NULL, NULL, meta.DateRangeStart())
  ,(8, 'Very Long Text (Unicode)', NULL, NULL, NULL, meta.DateRangeStart())
  ,(9, 'Short Text', 20, NULL, NULL, meta.DateRangeStart())
  ,(10, 'Medium Text', 50, NULL, NULL, meta.DateRangeStart())
  ,(11, 'Long Text', 255, NULL, NULL, meta.DateRangeStart())
  ,(12, 'Very Long Text', NULL, NULL, NULL, meta.DateRangeStart())
  ,(13, 'Real', NULL, NULL, NULL, meta.DateRangeStart())
  ,(14, 'Float', NULL, NULL, NULL, meta.DateRangeStart())
  ,(15, 'Short Date Time', NULL, NULL, NULL, meta.DateRangeStart())
  ,(16, 'Date Time', NULL, NULL, NULL, meta.DateRangeStart())
  ,(17, 'Date Time 2', NULL, NULL, NULL, meta.DateRangeStart())
  ,(18, 'Date', NULL, NULL, NULL, meta.DateRangeStart())
  ,(19, 'Time', NULL, NULL, NULL, meta.DateRangeStart())
  ,(20, 'HashKey', 40, NULL, NULL, meta.DateRangeStart())
  ,(21, 'Big Integer', NULL, NULL, NULL, meta.DateRangeStart())
  ,(22, 'Numeric', NULL, 28, 18, meta.DateRangeStart());

MERGE INTO [meta].[DataType] t
USING [#DataType] s
  ON t.[DataTypeId] = s.[DataTypeId]
WHEN NOT MATCHED BY TARGET  
THEN
  INSERT ([DataTypeId], [DataTypeName], [Size], [Precision], [Scale], [LastUpdateTime])
  VALUES (s.[DataTypeId], s.[DataTypeName], s.[Size], s.[Precision], s.[Scale], s.[LastUpdateTime]);
GO

/* [meta].[DataTypeMapping] */
CREATE TABLE [#DataTypeMapping] (
  [DataTypeId]  INT NOT NULL,
  [SqlDataType] VARCHAR(50) NOT NULL
);

INSERT INTO [#DataTypeMapping]
(
    [DataTypeId]
    ,[SqlDataType]
)
VALUES
  (1, 'int')
  ,(2, 'smallint')
  ,(3, 'tinyint')
  ,(4, 'bit')
  ,(5, 'nvarchar(20)')
  ,(6, 'nvarchar(50)')
  ,(7, 'nvarchar(255)')
  ,(8, 'nvarchar(MAX)')
  ,(9, 'varchar(20)')
  ,(10, 'varchar(50)')
  ,(11, 'varchar(255)')
  ,(12, 'varchar(MAX)')
  ,(13, 'real')
  ,(14, 'float')
  ,(15, 'smalldatetime')
  ,(16, 'datetime')
  ,(17, 'datetime2')
  ,(18, 'date')
  ,(19, 'time')
  ,(20, 'char(40)')
  ,(21, 'bigint')
  ,(22, 'numeric(28,18)');

MERGE INTO [meta].[DataTypeMapping] t
USING [#DataTypeMapping] s
  ON t.[DataTypeId] = s.[DataTypeId]
WHEN NOT MATCHED BY TARGET  
THEN
  INSERT ([DataTypeId], [SqlDataType])
  VALUES (s.[DataTypeId], s.[SqlDataType]);
GO

/* [meta].[EntityType] */
CREATE TABLE [#EntityType]
(
  [EntityTypeId] VARCHAR(4) NOT NULL, 
  [EntityTypeName] VARCHAR(50) NOT NULL, 
  [LastUpdateTime] DATETIME2 NOT NULL, 
  [LastChangeUserName] NVARCHAR(128) NULL
);

INSERT INTO [#EntityType]
(
	[EntityTypeId]
	,[EntityTypeName]
	,[LastUpdateTime]
)
VALUES
  ('Br', 'Bridge', meta.DateRangeStart())
  ,('Hub', 'Hub', meta.DateRangeStart())
  ,('Lnk', 'Link', meta.DateRangeStart())
  ,('Pit', 'Point In Time', meta.DateRangeStart())
  ,('RSat', 'Record Tracking Satellite', meta.DateRangeStart())
  ,('Sat', 'Satellite', meta.DateRangeStart())
  ,('TSat', 'Satellite (No history)', meta.DateRangeStart())
  ,('SAL', 'Same As Link', meta.DateRangeStart());

MERGE INTO [meta].[EntityType] t
USING [#EntityType] s
  ON t.[EntityTypeId] = s.[EntityTypeId]
WHEN NOT MATCHED BY TARGET  
THEN
  INSERT ([EntityTypeId], [EntityTypeName], [LastUpdateTime])
  VALUES (s.[EntityTypeId], s.[EntityTypeName], s.[LastUpdateTime]);
GO

/* [meta].[PartitioningType] */
CREATE TABLE [#PartitioningType]
(
  [PartitioningTypeId] CHAR(1) NOT NULL, 
  [PartitioningTypeName] VARCHAR(50) NOT NULL, 
  [LastUpdateTime] DATETIME2 NOT NULL, 
  [LastChangeUserName] NVARCHAR(128) NULL
);

INSERT INTO [#PartitioningType]
(
	[PartitioningTypeId]
	,[PartitioningTypeName]
	,[LastUpdateTime]
)
VALUES
  ('D', 'Daily', meta.DateRangeStart())
  ,('H', 'Hourly', meta.DateRangeStart())
  ,('M', 'Monthly', meta.DateRangeStart())
  ,('N', 'None', meta.DateRangeStart());

MERGE INTO [meta].[PartitioningType] t
USING [#PartitioningType] s
  ON t.[PartitioningTypeId] = s.[PartitioningTypeId]
WHEN NOT MATCHED BY TARGET  
THEN
  INSERT ([PartitioningTypeId], [PartitioningTypeName], [LastUpdateTime])
  VALUES (s.[PartitioningTypeId], s.[PartitioningTypeName], s.[LastUpdateTime]);
GO

/* [meta].[ProcessType] */
CREATE TABLE [#ProcessType]
(
  [ProcessTypeId] VARCHAR(3) NOT NULL, 
  [ProcessTypeName] VARCHAR(50) NOT NULL, 
  [LastUpdateTime] DATETIME2 NOT NULL, 
  [LastChangeUserName] NVARCHAR(128) NULL
);

INSERT INTO [#ProcessType]
(
	[ProcessTypeId]
	,[ProcessTypeName]
	,[LastUpdateTime]
)
VALUES
  ('EDW', 'Raw Data', meta.DateRangeStart())
  ,('BIZ', 'Business', meta.DateRangeStart());

MERGE INTO [meta].[ProcessType] t
USING [#ProcessType] s
  ON t.[ProcessTypeId] = s.[ProcessTypeId]
WHEN NOT MATCHED BY TARGET  
THEN
  INSERT ([ProcessTypeId], [ProcessTypeName], [LastUpdateTime])
  VALUES (s.[ProcessTypeId], s.[ProcessTypeName], s.[LastUpdateTime]);
GO

/* [meta].[SourceSystemType] */
CREATE TABLE [#SourceSystemType]
(
  [SourceSystemTypeId] VARCHAR(3) NOT NULL, 
  [SourceSystemTypeName] VARCHAR(50) NOT NULL, 
  [LastUpdateTime] DATETIME2 NOT NULL, 
  [LastChangeUserName] NVARCHAR(128) NULL
);

INSERT INTO [#SourceSystemType]
(
	[SourceSystemTypeId]
	,[SourceSystemTypeName]
	,[LastUpdateTime]
)
VALUES
  ('NA', 'N/A', meta.DateRangeStart())
  ,('CSV', 'CSV file(s)', meta.DateRangeStart())
  ,('SP', 'MS SharePoint', meta.DateRangeStart())
  ,('SQL', 'Relational Database', meta.DateRangeStart())
  ,('WEB', 'Web Service', meta.DateRangeStart())
  ,('XLS', 'Excel file(s)', meta.DateRangeStart())
  ,('XML', 'XML file(s)', meta.DateRangeStart())
  ,('OTH', 'Other', meta.DateRangeStart());

MERGE INTO [meta].[SourceSystemType] t
USING [#SourceSystemType] s
  ON t.[SourceSystemTypeId] = s.[SourceSystemTypeId]
WHEN NOT MATCHED BY TARGET  
THEN
  INSERT ([SourceSystemTypeId], [SourceSystemTypeName], [LastUpdateTime])
  VALUES (s.[SourceSystemTypeId], s.[SourceSystemTypeName], s.[LastUpdateTime]);
GO

/* [meta].[StorageType] */
CREATE TABLE [#StorageType]
(
  [StorageTypeId] VARCHAR(3) NOT NULL, 
  [StorageTypeName] VARCHAR(50) NOT NULL, 
  [LastUpdateTime] DATETIME2 NOT NULL, 
  [LastChangeUserName] NVARCHAR(128) NULL
);

INSERT INTO [#StorageType]
(
	[StorageTypeId]
	,[StorageTypeName]
	,[LastUpdateTime]
)
VALUES
  ('Col', 'ColumnStore', meta.DateRangeStart())
  ,('CR', 'ColumnStore + RowStore', meta.DateRangeStart())
  ,('Row', 'RowStore', meta.DateRangeStart());

MERGE INTO [meta].[StorageType] t
USING [#StorageType] s
  ON t.[StorageTypeId] = s.[StorageTypeId]
WHEN NOT MATCHED BY TARGET  
THEN
  INSERT ([StorageTypeId], [StorageTypeName], [LastUpdateTime])
  VALUES (s.[StorageTypeId], s.[StorageTypeName], s.[LastUpdateTime]);
GO

/* [meta].[Template] */
IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'BizBridgeTable')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'BizBridgeTable'
    ,'Bridge table creation script'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE TABLE #entity_table_name# (
  [SnapshotDate] [datetime2] NOT NULL
#key_columns#
#column_names#
) ON #filegroup_data#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'BizBridgeTable_key_columns')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'BizBridgeTable_key_columns'
    ,'Bridge table creation script: key columns'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,#referenced_key_column# #data_type_hash_key# NOT NULL
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'BizBridgeTable_column_names')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'BizBridgeTable_column_names'
    ,'Bridge table creation script: column names'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,[#referenced_entity_name#_#referenced_column#] #data_type# NOT NULL
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'BizPitTable')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'BizPitTable'
    ,'Point In Time table creation script'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE TABLE #entity_table_name# (
  #key_column# #data_type_hash_key# NOT NULL
  ,#referenced_key_column# #data_type_hash_key# NOT NULL
  ,[SnapshotDate] [datetime2] NOT NULL
  ,[SnapshotDateShort] [date] NULL
#column_names#
) ON #filegroup_data#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'BizPitTable_column_names')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'BizPitTable_column_names'
    ,'Point In Time table creation script: column names'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
  ,[#referenced_entity_name#_#referenced_key_column#] #data_type_hash_key# NOT NULL
  ,[#referenced_entity_name#_LoadDate] [datetime2] NOT NULL
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWTable')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWTable'
    ,'EDW entity creation script'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE TABLE #entity_table_name# (
  #key_column# #data_type_hash_key# NOT NULL
  ,[LoadDate] [datetime2] NOT NULL
#load_date_short_column#
#load_end_date_column#
  ,[RecordSource] [varchar](50) NOT NULL
#hash_diff_column#
#column_names#
) ON #filegroup_data#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWTable_key_columns')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWTable_key_columns'
    ,'EDW entity creation script: key columns'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,[#column_name#] #data_type# NOT NULL
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWTable_column_names')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWTable_column_names'
    ,'EDW entity creation script: column names'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,[#column_name#] #data_type# NULL
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'LookupErrorIndexes')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'LookupErrorIndexes'
    ,'Indexes creation script for Lookup Error tables'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE CLUSTERED INDEX [IX_#entity_type#_#entity_name##_##hub_name#_LoadDate] ON #error_schema#.[#entity_type#_#entity_name##_##hub_name#] ([LoadDate]) WITH (#index_options#) ON #filegroup_data#;
ALTER TABLE #error_schema#.[#entity_type#_#entity_name##_##hub_name#] ADD CONSTRAINT [PK_#entity_type#_#entity_name##_##hub_name#] PRIMARY KEY NONCLUSTERED ([Id] ASC) WITH (#index_options#) ON #filegroup_index#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'TablePartitioning')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'TablePartitioning'
    ,'Partitioning creation script for entities'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE PARTITION FUNCTION #partition_function#([datetime2]) AS RANGE LEFT FOR VALUES (''#date_range_start#'');
CREATE PARTITION SCHEME #partition_scheme_data# AS PARTITION #partition_function# ALL TO (#filegroup_data#);
CREATE PARTITION SCHEME #partition_scheme_index# AS PARTITION #partition_function# ALL TO (#filegroup_index#);
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'Databases')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'Databases'
    ,'Deployment script for staging and EDW databases'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
IF NOT EXISTS
(
  SELECT *
  FROM sys.databases
  WHERE [name] = ''#staging_db_no_brackets#''
)
  CREATE DATABASE #staging_db#
  ON PRIMARY 
  (NAME = N''#staging_db_no_brackets#'', FILENAME = N''#physical_filename_staging#'')
  LOG ON 
  (NAME = N''#staging_db_no_brackets#_log'', FILENAME = N''#physical_filename_staging_log#'');

IF NOT EXISTS
(
  SELECT *
  FROM sys.databases
  WHERE [name] = ''#edw_db_no_brackets#''
)
  CREATE DATABASE #edw_db#
  ON PRIMARY 
  (NAME = N''#edw_db_no_brackets#'', FILENAME = N''#physical_filename_edw#'')
  LOG ON 
  (NAME = N''#edw_db_no_brackets#_log'', FILENAME = N''#physical_filename_edw_log#'');
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'FileGroups')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'FileGroups'
    ,'Deployment script for database filegroups'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
DECLARE @Stmt nvarchar(MAX);

IF NOT EXISTS
(
  SELECT *
  FROM #staging_db#.sys.filegroups
  WHERE [name] = ''#filegroup_data_no_brackets#''
)
BEGIN
  USE #staging_db#;

  SET @Stmt = ''
ALTER DATABASE #staging_db# ADD FILEGROUP #filegroup_data#;
ALTER DATABASE #staging_db# ADD FILE (NAME = N''''#logical_filename_staging_data#'''', FILENAME = N''''#physical_filename_staging_data#'''') TO FILEGROUP #filegroup_data#;
ALTER DATABASE #staging_db# MODIFY FILEGROUP #filegroup_data# DEFAULT;
'';

  EXEC sys.sp_executesql @Stmt;
END

IF NOT EXISTS
(
  SELECT *
  FROM #staging_db#.sys.filegroups
  WHERE [name] = ''#filegroup_index_no_brackets#''
)
BEGIN
  USE #staging_db#;

  SET @Stmt = ''
ALTER DATABASE #staging_db# ADD FILEGROUP #filegroup_index#;
ALTER DATABASE #staging_db# ADD FILE (NAME = N''''#logical_filename_staging_index#'''', FILENAME = N''''#physical_filename_staging_index#'''') TO FILEGROUP #filegroup_index#;
'';

  EXEC sys.sp_executesql @Stmt;
END

IF NOT EXISTS
(
  SELECT *
  FROM #edw_db#.sys.filegroups
  WHERE [name] = ''#filegroup_data_no_brackets#''
)
BEGIN
  USE #edw_db#;

  SET @Stmt = ''
ALTER DATABASE #edw_db# ADD FILEGROUP #filegroup_data#;
ALTER DATABASE #edw_db# ADD FILE (NAME = N''''#logical_filename_edw_data#'''', FILENAME = N''''#physical_filename_edw_data#'''') TO FILEGROUP #filegroup_data#;
ALTER DATABASE #edw_db# MODIFY FILEGROUP #filegroup_data# DEFAULT;
'';

  EXEC sys.sp_executesql @Stmt;
END

IF NOT EXISTS
(
  SELECT *
  FROM #edw_db#.sys.filegroups
  WHERE [name] = ''#filegroup_index_no_brackets#''
)
BEGIN
  USE #edw_db#;

  SET @Stmt = ''
ALTER DATABASE #edw_db# ADD FILEGROUP #filegroup_index#;
ALTER DATABASE #edw_db# ADD FILE (NAME = N''''#logical_filename_edw_index#'''', FILENAME = N''''#physical_filename_edw_index#'''') TO FILEGROUP #filegroup_index#;
'';

  EXEC sys.sp_executesql @Stmt;
END

'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'Schemata')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'Schemata'
    ,'Deployment script for database schemas'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
DECLARE @Stmt nvarchar(MAX);

IF NOT EXISTS
(
  SELECT *
  FROM INFORMATION_SCHEMA.SCHEMATA
  WHERE SCHEMA_NAME = ''#schema_no_brackets#''
)
BEGIN
  SET @Stmt = ''
CREATE SCHEMA #schema# AUTHORIZATION [dbo];
'';

  EXEC sys.sp_executesql @Stmt;
END
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'DatabaseOptions')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'DatabaseOptions'
    ,'Deployment script for database options'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
ALTER DATABASE #db_name# SET AUTO_CREATE_STATISTICS ON #incremental_statistics#;
ALTER DATABASE #db_name# SET READ_COMMITTED_SNAPSHOT ON WITH NO_WAIT;

'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWGetPitProc')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWGetPitProc'
    ,'Creation script for populating PIT procedure'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE PROCEDURE #edw_schema#.[Get_#entity_type#_#entity_name#]
  @SnapshotDate datetime2

WITH RECOMPILE
AS

SELECT 
  #key_column# = 
    dbo.GetHash(
      CONCAT(
	      ''''
#hash_columns#
	    )
    )
  ,#referenced_entity_type#.#referenced_key_column#
  ,[SnapshotDate] = @SnapshotDate
  ,[SnapshotDateShort] = CONVERT(date, @SnapshotDate)
#column_names#
FROM #referenced_entity_table_name# #referenced_entity_type#
#join_conditions#
ORDER BY #referenced_entity_type#.#referenced_key_column#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWGetPitProc_column_names')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWGetPitProc_column_names'
    ,'Creation script for populating PIT procedure: column names'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
  ,[#referenced_entity_name#_#key_column#] = ISNULL(#referenced_entity_type#_#referenced_entity_id#.[#key_column#], REPLICATE(''0'', #hash_type_len#))
  ,[#referenced_entity_name#_LoadDate] = ISNULL(#referenced_entity_type#_#referenced_entity_id#.[LoadDate], ''#date_range_start#'')'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWGetPitProc_columns_hash')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWGetPitProc_columns_hash'
    ,'Creation script for populating PIT procedure: hash columns'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'        ,CONCAT(#column_name#, ''#hash_delimiter#'')
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWGetPitProc_join_conditions')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWGetPitProc_join_conditions'
    ,'Creation script for populating PIT procedure: join conditions'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
  LEFT JOIN #edw_schema#.[#referenced_entity_type#_#referenced_entity_name#] #referenced_entity_type#_#referenced_entity_id# ON #entity_type#.[#key_column#] = #referenced_entity_type#_#referenced_entity_id#.[#key_column#]
    AND @SnapshotDate BETWEEN #referenced_entity_type#_#referenced_entity_id#.[LoadDate] AND #referenced_entity_type#_#referenced_entity_id#.[LoadEndDate]'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWGhostRecordDeleteProc')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWGhostRecordDeleteProc'
    ,'Creation script for Ghost Record delete procedure'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE PROCEDURE #edw_schema#.[GhostRecordDelete_#entity_type#_#entity_name#]

AS

SET NOCOUNT ON;

DELETE FROM #entity_table_name# WHERE #key_column# = CONVERT(#data_type_hash_key#, ''#default_hash_key#'');
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWGhostRecordInsertProc')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWGhostRecordInsertProc'
    ,'Creation script for Ghost Record insert procedure'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE PROCEDURE #edw_schema#.[GhostRecordInsert_#entity_type#_#entity_name#]

AS

SET NOCOUNT ON;

IF NOT EXISTS 
(
  SELECT *
  FROM #entity_table_name# 
  WHERE #key_column# = CONVERT(#data_type_hash_key#, ''#default_hash_key#'')
)
  INSERT INTO #entity_table_name#
  (
    #key_column#
    ,[LoadDate]
  #load_end_date_column#
    ,[RecordSource]
  #hash_diff_column#
  #column_names#
  )
  VALUES
  (
    CONVERT(#data_type_hash_key#, ''#default_hash_key#'')
    ,''#date_range_start#''
  #end_date_value#
    ,''SYSTEM''
  #hash_diff_value#
  #column_values#
  );
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWGhostRecordInsertProc_column_names')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWGhostRecordInsertProc_column_names'
    ,'Creation script for Ghost Record insert procedure: column names'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,[#column_name#]
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWGhostRecordInsertProc_column_values')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWGhostRecordInsertProc_column_values'
    ,'Creation script for Ghost Record insert procedure: column values'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,#column_value#
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWUpdateLoadEndDateProc')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWUpdateLoadEndDateProc'
    ,'Creation script for Upload End Date procedure'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE PROCEDURE #edw_schema#.[UpdateLoadEndDate_#entity_type#_#entity_name#]
    @LoadDate DATETIME2

AS

UPDATE Sat
SET [LoadEndDate] = DATEADD(ss, -1, @LoadDate) 
FROM #entity_table_name# Sat
  JOIN #entity_table_name# Sat_current ON Sat.#key_column# = Sat_current.#key_column# 
    AND Sat.[LoadEndDate] = Sat_current.[LoadEndDate]
WHERE Sat_current.[LoadDate] = @LoadDate
  AND Sat.[LoadDate] < @LoadDate
  AND Sat.[LoadEndDate] = ''#date_range_end#'';
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'FinalizeEntityProc_partitioned')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'FinalizeEntityProc_partitioned'
    ,'Creation script for Finalize entity procedure (partitioned)'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE PROCEDURE #schema#.[FinalizeEntity_#entity_type#_#entity_name#]
    @LoadDate DATETIME2

AS

DECLARE @Sql NVARCHAR(MAX) = ''
UPDATE STATISTICS #entity_table_name# WITH RESAMPLE ON PARTITIONS(#partition_number#), ALL, NORECOMPUTE;
'';

SET @Sql = REPLACE(@Sql, ''#partition_number#'', $PARTITION.#partition_function#(@LoadDate));

EXEC sys.sp_executesql @Sql;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'FinalizeEntityProc_nonpartitioned')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'FinalizeEntityProc_nonpartitioned'
    ,'Creation script for Finalize entity procedure (non-partitioned)'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE PROCEDURE #schema#.[FinalizeEntity_#entity_type#_#entity_name#]
    @LoadDate DATETIME2

AS

UPDATE STATISTICS #entity_table_name# WITH ALL, NORECOMPUTE;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'InitializeEntityProc_partitioned')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'InitializeEntityProc_partitioned'
    ,'Creation script for Initialize entity procedure (partitioned)'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE PROCEDURE #schema#.[InitializeEntity_#entity_type#_#entity_name#]
    @LoadDate DATETIME2

AS

DECLARE @PartitionDate #date_data_type# = #date_value#;

IF NOT EXISTS (
  SELECT *
  FROM sys.partition_range_values prv
    JOIN sys.partition_functions pf ON prv.function_id = pf.function_id
  WHERE pf.name = ''#partition_function_no_brackets#''
    AND prv.value = @PartitionDate
)
BEGIN
  ALTER PARTITION SCHEME #partition_scheme_data# NEXT USED #filegroup_data#;
  ALTER PARTITION SCHEME #partition_scheme_index# NEXT USED #filegroup_index#;
  ALTER PARTITION FUNCTION #partition_function#() SPLIT RANGE (@PartitionDate);
END
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'InitializeEntityProc_nonpartitioned')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'InitializeEntityProc_nonpartitioned'
    ,'Creation script for Initialize entity procedure (non-partitioned)'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE PROCEDURE #schema#.[InitializeEntity_#entity_type#_#entity_name#]
    @LoadDate DATETIME2

AS

RETURN
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWView')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWView'
    ,'EDW entity view creation script'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE VIEW #edw_schema#.[#entity_type#_#entity_name#]

AS

SELECT
  #key_column#
  ,[LoadDate]
#load_end_date_column#
  ,[RecordSource]
#hash_diff_column#
#column_names#
FROM #entity_table_name#
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWView_column_names')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWView_column_names'
    ,'EDW entity view creation script: column names'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,[#column_name#]
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWView_virtualized_load_end_date_column')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWView_virtualized_load_end_date_column'
    ,'EDW entity view creation script: virtualized load end date column'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,[LoadEndDate] = ISNULL(DATEADD(ss, -1, LAG([LoadDate]) OVER(PARTITION BY #key_column# ORDER BY [LoadDate] DESC)), ''#date_range_end#'')
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'LookupErrorTable')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'LookupErrorTable'
    ,'Lookup error table creation script'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE TABLE #error_schema#.[#entity_type#_#entity_name##_##hub_name#] (
  [Id] [bigint] IDENTITY(1,1) NOT NULL
  ,#key_column# #key_datatype# NOT NULL
  ,[LoadDate] [datetime2](7) NOT NULL
  ,[RecordSource] [varchar](50) NOT NULL
#key_or_hashkey_columns#
) ON #filegroup_data#
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'LookupErrorTable_key_columns')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'LookupErrorTable_key_columns'
    ,'Lookup error table creation script: key columns'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,[#column_name#] #data_type# NOT NULL
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'LookupErrorTable_columns_hash')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'LookupErrorTable_columns_hash'
    ,'Lookup error table creation script: hash columns'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,#key_column# #key_datatype# NOT NULL'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'StagingTable')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'StagingTable'
    ,'Staging table creation script'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE TABLE #entity_table_name# (
  [Id] [int] IDENTITY(1,1) NOT NULL
  ,[LoadDate] [datetime2] NOT NULL
  ,[RecordSource] [varchar](50) NOT NULL
#key_columns#
#column_names#
) ON #filegroup_data#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'StagingTable_key_columns')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'StagingTable_key_columns'
    ,'Staging table creation script: key columns'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,[#column_name#] #data_type# NOT NULL
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'StagingTable_column_names')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'StagingTable_column_names'
    ,'Staging table creation script: column names'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,[#column_name#] #data_type# NULL
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'StagingView')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'StagingView'
    ,'Staging view creation script'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE VIEW #entity_view_name#

AS

SELECT
  [Id]
  ,#key_column# = 
    dbo.GetHash(
      CONCAT(
       ''''
#hash_columns#
      )
    )
  ,[LoadDate]
  ,[LoadDateShort] = CONVERT(date, [LoadDate])
  ,[RecordSource]
#hash_diff_column#
#foreign_hash_keys#
#key_columns#
#column_names#
FROM #entity_table_name#
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'StagingView_column_names')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'StagingView_column_names'
    ,'Staging view creation script: column names'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,[#column_name#]
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'StagingView_hash_columns')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'StagingView_hash_columns'
    ,'Staging view creation script: hash columns'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'        ,CONCAT(#column_name#, ''#hash_delimiter#'')
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'StagingView_key_columns')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'StagingView_key_columns'
    ,'Staging view creation script: key columns'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'  ,#key_column# = 
    dbo.GetHash(
      CONCAT(
	      ''''
#hash_columns#
	    )
    )'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'Utilities_get_hash_actual')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'Utilities_get_hash_actual'
    ,'Utility procedure creation script: GetHash (current)'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE FUNCTION [dbo].[GetHash]
(
	@value NVARCHAR(MAX)
)
RETURNS #data_type_hash_key#
AS
BEGIN
	RETURN CONVERT(#data_type_hash_key#, HASHBYTES(''#hash_algorithm#'', UPPER(@value)), 2)
END
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'Utilities_get_hash_legacy')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'Utilities_get_hash_legacy'
    ,'Utility procedure creation script: GetHash (legacy)'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE FUNCTION [dbo].[GetHash]
(
	@value VARCHAR(8000)
)
RETURNS #data_type_hash_key#
AS
BEGIN
	RETURN CONVERT(#data_type_hash_key#, HASHBYTES(''#hash_algorithm#'', UPPER(@value)), 2)
END
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'Utilities_insert_ghost_records')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'Utilities_insert_ghost_records'
    ,'Utility procedure creation script: InsertGhostRecords'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE PROCEDURE [dbo].[InsertGhostRecords]
  @Force bit = 0

AS

SET NOCOUNT ON;

DECLARE 
  @TemplateInsert nvarchar(MAX) = ''
EXEC #schema#.#ghost_insert_proc_name#;
''
  ,@TemplateDelete nvarchar(MAX) = ''
EXEC #schema#.#ghost_delete_proc_name#;
''
  ,@Sql nvarchar(MAX);

SET @Sql = (
  SELECT REPLACE(REPLACE(@TemplateInsert, ''#schema#'', SCHEMA_NAME(schema_id)), ''#ghost_insert_proc_name#'', [name])
  FROM sys.objects
  WHERE [type] = ''P''
    AND [name] LIKE ''GhostRecordInsert%''
  ORDER BY [name]
  FOR XML PATH('''')
)

IF @Force = 1
  SET @Sql = (
    SELECT REPLACE(REPLACE(@TemplateDelete, ''#schema#'', SCHEMA_NAME(schema_id)), ''#ghost_delete_proc_name#'', [name])
    FROM sys.objects
    WHERE [type] = ''P''
      AND [name] LIKE ''GhostRecordDelete%''
    ORDER BY [name] DESC
    FOR XML PATH('''')
  )
	+ @Sql;

SET @Sql = REPLACE(@Sql, ''&#x0D;'', '''');

IF (@Sql IS NOT NULL)
    EXEC sys.sp_executesql @Sql;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'IndexOptionsRowStore_partitioned')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'IndexOptionsRowStore_partitioned'
    ,'Options for RowStore partitioned indexes'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'DATA_COMPRESSION = #rowstore_compression#, STATISTICS_INCREMENTAL = ON'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'IndexOptionsRowStore_nonpartitioned')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'IndexOptionsRowStore_nonpartitioned'
    ,'Options for RowStore non-partitioned indexes'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'DATA_COMPRESSION = #rowstore_compression#'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'BizIndexesColumnRowStore_pit')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'BizIndexesColumnRowStore_pit'
    ,'Index creation script for ColumnStore/RowStore: PIT table'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE CLUSTERED COLUMNSTORE INDEX [CCI_#entity_type#_#entity_name#] ON #entity_table_name# ON #filegroup_data#;
CREATE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_SnapshotDate] ON #entity_table_name# ([SnapshotDate] ASC) WITH (#index_options#) ON #filegroup_index#;
CREATE UNIQUE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_Key] ON #entity_table_name# (#referenced_key_column# ASC, [SnapshotDate] ASC) INCLUDE (#key_column#) WITH (#index_options#) ON #filegroup_index#;
ALTER TABLE #entity_table_name# ADD CONSTRAINT [PK_#entity_type#_#entity_name#] PRIMARY KEY NONCLUSTERED (#key_column# ASC) WITH (#index_options#) ON #filegroup_index#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'BizIndexesColumnRowStore_bridge')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'BizIndexesColumnRowStore_bridge'
    ,'Index creation script for ColumnStore/RowStore: Bridge table'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE CLUSTERED COLUMNSTORE INDEX [CCI_#entity_type#_#entity_name#] ON #entity_table_name# ON #filegroup_data#;
CREATE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_SnapshotDate] ON #entity_table_name# ([SnapshotDate] ASC) WITH (#index_options#) ON #filegroup_index#;
CREATE UNIQUE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_Key] ON #entity_table_name# (#referenced_key_column# ASC, [SnapshotDate] ASC) INCLUDE (#key_column#) WITH (#index_options#) ON #filegroup_index#;
ALTER TABLE #entity_table_name# ADD CONSTRAINT [PK_#entity_type#_#entity_name#] PRIMARY KEY NONCLUSTERED (#key_column# ASC) WITH (#index_options#) ON #filegroup_index#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'BizIndexesColumnRowStore_common')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'BizIndexesColumnRowStore_common'
    ,'Index creation script for ColumnStore/RowStore: common script'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_#referenced_entity_name#] ON #entity_table_name# ([#referenced_entity_name#_#referenced_key_column#] ASC, [#referenced_entity_name#_LoadDate] ASC) INCLUDE (#key_column#) WITH (#index_options#) ON #filegroup_index#;
ALTER TABLE #entity_table_name# ADD CONSTRAINT [DF_#entity_type#_#entity_name#_#referenced_entity_name#_#referenced_key_column#] DEFAULT (''#default_hash_key#'') FOR [#referenced_entity_name#_#referenced_key_column#];
ALTER TABLE #entity_table_name# ADD CONSTRAINT [DF_#entity_type#_#entity_name#_#referenced_entity_name#_LoadDate] DEFAULT (''#date_range_start#'') FOR [#referenced_entity_name#_LoadDate];
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'BizIndexesColumnStore_all')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'BizIndexesColumnStore_all'
    ,'Index creation script for ColumnStore: all tables'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE CLUSTERED COLUMNSTORE INDEX [CCI_#entity_type#_#entity_name#] ON #entity_table_name# ON #filegroup_data#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'BizIndexesColumnStore_common')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'BizIndexesColumnStore_common'
    ,'Index creation script for ColumnStore: common script'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
ALTER TABLE #entity_table_name# ADD CONSTRAINT [DF_#entity_type#_#entity_name#_#referenced_entity_name#_#referenced_key_column#] DEFAULT (''#default_hash_key#'') FOR [#referenced_entity_name#_#referenced_key_column#];
ALTER TABLE #entity_table_name# ADD CONSTRAINT [DF_#entity_type#_#entity_name#_#referenced_entity_name#_LoadDate] DEFAULT (''#date_range_start#'') FOR [#referenced_entity_name#_LoadDate];
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'BizIndexesRowStore_pit')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'BizIndexesRowStore_pit'
    ,'Index creation script for RowStore: PIT table'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE CLUSTERED INDEX [IX_#entity_type#_#entity_name#_SnapshotDate] ON #entity_table_name# ([SnapshotDate] ASC) WITH (#index_options#) ON #filegroup_data#;
CREATE UNIQUE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_Key] ON #entity_table_name# (#referenced_key_column# ASC, [SnapshotDate] ASC) INCLUDE (#key_column#) WITH (#index_options#) ON #filegroup_index#;
ALTER TABLE #entity_table_name# ADD CONSTRAINT [PK_#entity_type#_#entity_name#] PRIMARY KEY NONCLUSTERED (#key_column# ASC) WITH (#index_options#) ON #filegroup_index#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'BizIndexesRowStore_bridge')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'BizIndexesRowStore_bridge'
    ,'Index creation script for RowStore: Bridge table'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE CLUSTERED INDEX [IX_#entity_type#_#entity_name#_SnapshotDate] ON #entity_table_name# ([SnapshotDate] ASC) WITH (#index_options#) ON #filegroup_data#;
ALTER TABLE #entity_table_name# ADD CONSTRAINT [PK_#entity_type#_#entity_name#] PRIMARY KEY NONCLUSTERED (#key_columns# [SnapshotDate] ASC) WITH (#index_options#) ON #filegroup_index#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'BizIndexesRowStore_common')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'BizIndexesRowStore_common'
    ,'Index creation script for RowStore: common script'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_#referenced_entity_name#] ON #entity_table_name# ([#referenced_entity_name#_#referenced_key_column#] ASC, [#referenced_entity_name#_LoadDate] ASC) INCLUDE (#key_column#) WITH (#index_options#) ON #filegroup_index#;
ALTER TABLE #entity_table_name# ADD CONSTRAINT [DF_#entity_type#_#entity_name#_#referenced_entity_name#_#referenced_key_column#] DEFAULT (''#default_hash_key#'') FOR [#referenced_entity_name#_#referenced_key_column#];
ALTER TABLE #entity_table_name# ADD CONSTRAINT [DF_#entity_type#_#entity_name#_#referenced_entity_name#_LoadDate] DEFAULT (''#date_range_start#'') FOR [#referenced_entity_name#_LoadDate];
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWIndexesColumnRowStore_hub_link')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWIndexesColumnRowStore_hub_link'
    ,'Index creation script for ColumnStore/RowStore (raw vault): hub & link tables'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE CLUSTERED COLUMNSTORE INDEX [CCI_#entity_type#_#entity_name#] ON #entity_table_name# ON #filegroup_data#;
CREATE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_LoadDate] ON #entity_table_name# ([LoadDate]) WITH (#index_options#) ON #filegroup_index#;
CREATE UNIQUE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_Key] ON #entity_table_name# (#column_names#) INCLUDE (#key_column#) WITH (#index_options#) ON #filegroup_index#;
ALTER TABLE #entity_table_name# ADD CONSTRAINT [PK_#entity_type#_#entity_name#] PRIMARY KEY NONCLUSTERED (#key_column# ASC) WITH (#index_options#) ON #filegroup_index#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWIndexesColumnRowStore_sat')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWIndexesColumnRowStore_sat'
    ,'Index creation script for ColumnStore/RowStore (raw vault): satellite tables'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE CLUSTERED COLUMNSTORE INDEX [CCI_#entity_type#_#entity_name#] ON #entity_table_name# ON #filegroup_data#;
CREATE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_LoadDate] ON #entity_table_name# ([LoadDate]) WITH (#index_options#) ON #filegroup_data#;
CREATE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_LoadEndDate] ON #entity_table_name# (LoadEndDate, #key_column#) INCLUDE (HashDiff) WITH (#index_options#) ON #filegroup_index#;
ALTER TABLE #entity_table_name# ADD CONSTRAINT [PK_#entity_type#_#entity_name#] PRIMARY KEY NONCLUSTERED (#key_column# ASC, [LoadDate] ASC) WITH (#index_options#) ON #filegroup_index#;
ALTER TABLE #entity_table_name# WITH CHECK ADD CONSTRAINT [CK_#entity_type#_#entity_name#_LoadDate] CHECK (([LoadDate] <= [LoadEndDate]));
ALTER TABLE #entity_table_name# WITH CHECK ADD CONSTRAINT [CK_#entity_type#_#entity_name#_LoadEndDate] DEFAULT (''#date_range_end#'') FOR [LoadEndDate];
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWIndexesColumnRowStore_tsat')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWIndexesColumnRowStore_tsat'
    ,'Index creation script for ColumnStore/RowStore (raw vault): non-historized satellite tables'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE CLUSTERED COLUMNSTORE INDEX [CCI_#entity_type#_#entity_name#] ON #entity_table_name# ON #filegroup_data#;
CREATE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_LoadDate] ON #entity_table_name# ([LoadDate], #key_column#) WITH (#index_options#) ON #filegroup_data#;
ALTER TABLE #entity_table_name# ADD CONSTRAINT [PK_#entity_type#_#entity_name#] PRIMARY KEY NONCLUSTERED (#key_column# ASC, [LoadDate] ASC) WITH (#index_options#) ON #filegroup_index#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWIndexesColumnRowStore_fk')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWIndexesColumnRowStore_fk'
    ,'Index creation script for ColumnStore/RowStore (raw vault): foreign keys'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
ALTER TABLE #entity_table_name# WITH #fk_check# ADD CONSTRAINT [FK_#entity_type#_#entity_name#_#referenced_entity_type#_#referenced_entity_name##column_suffix#] FOREIGN KEY (#referencing_key_column#) REFERENCES #referenced_entity_table_name# (#referenced_key_column#);
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWIndexesColumnStore_all')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWIndexesColumnStore_all'
    ,'Index creation script for ColumnStore (raw vault): all tables'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE CLUSTERED COLUMNSTORE INDEX [CCI_#entity_type#_#entity_name#] ON #entity_table_name# ON #filegroup_data#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWIndexesColumnStore_pk')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWIndexesColumnStore_pk'
    ,'Index creation script for ColumnStore (raw vault): primary key'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
ALTER TABLE #entity_table_name# ADD CONSTRAINT [PK_#entity_type#_#entity_name#] PRIMARY KEY NONCLUSTERED (#key_column# ASC) WITH (#index_options#) ON #filegroup_index#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWIndexesColumnStore_fk')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWIndexesColumnStore_fk'
    ,'Index creation script for ColumnStore (raw vault): foreign keys'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
ALTER TABLE #entity_table_name# WITH #fk_check# ADD CONSTRAINT [FK_#entity_type#_#entity_name#_#referenced_entity_type#_#referenced_entity_name##column_suffix#] FOREIGN KEY (#referencing_key_column#) REFERENCES #referenced_entity_table_name# (#referenced_key_column#);
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWIndexesColumnStore_check')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWIndexesColumnStore_check'
    ,'Index creation script for ColumnStore (raw vault): check constraints'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
ALTER TABLE #entity_table_name# WITH CHECK ADD CONSTRAINT [CK_#entity_type#_#entity_name#_LoadDate] CHECK (([LoadDate] <= [LoadEndDate]));
ALTER TABLE #entity_table_name# WITH CHECK ADD CONSTRAINT [CK_#entity_type#_#entity_name#_LoadEndDate] DEFAULT (''#date_range_end#'') FOR [LoadEndDate];
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWIndexesRowStore_hub_link')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWIndexesRowStore_hub_link'
    ,'Index creation script for RowStore (raw vault): hub & link tables'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE CLUSTERED INDEX [IX_#entity_type#_#entity_name#_LoadDate] ON #entity_table_name# ([LoadDate]) WITH (#index_options#) ON #filegroup_data#;
CREATE UNIQUE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_Key] ON #entity_table_name# (#column_names#) INCLUDE (#key_column#) WITH (#index_options#) ON #filegroup_index#;
ALTER TABLE #entity_table_name# ADD CONSTRAINT [PK_#entity_type#_#entity_name#] PRIMARY KEY NONCLUSTERED (#key_column# ASC) WITH (#index_options#) ON #filegroup_index#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWIndexesRowStore_sat')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWIndexesRowStore_sat'
    ,'Index creation script for RowStore (raw vault): satellite tables'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE CLUSTERED INDEX [IX_#entity_type#_#entity_name#_LoadDate] ON #entity_table_name# ([LoadDate]) WITH (#index_options#) ON #filegroup_data#;
CREATE NONCLUSTERED INDEX [IX_#entity_type#_#entity_name#_LoadEndDate] ON #entity_table_name# (LoadEndDate, #key_column#) INCLUDE (HashDiff) WITH (#index_options#) ON #filegroup_index#;
ALTER TABLE #entity_table_name# ADD CONSTRAINT [PK_#entity_type#_#entity_name#] PRIMARY KEY NONCLUSTERED (#key_column# ASC, [LoadDate] ASC) WITH (#index_options#) ON #filegroup_index#;
ALTER TABLE #entity_table_name# WITH CHECK ADD CONSTRAINT [CK_#entity_type#_#entity_name#_LoadDate] CHECK (([LoadDate] <= [LoadEndDate]));
ALTER TABLE #entity_table_name# WITH CHECK ADD CONSTRAINT [CK_#entity_type#_#entity_name#_LoadEndDate] DEFAULT (''#date_range_end#'') FOR [LoadEndDate];
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWIndexesRowStore_tsat')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWIndexesRowStore_tsat'
    ,'Index creation script for RowStore (raw vault): non-historized satellite tables'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
CREATE CLUSTERED INDEX [IX_#entity_type#_#entity_name#_LoadDate] ON #entity_table_name# ([LoadDate]) WITH (#index_options#) ON #filegroup_data#;
ALTER TABLE #entity_table_name# ADD CONSTRAINT [PK_#entity_type#_#entity_name#] PRIMARY KEY NONCLUSTERED (#key_column# ASC, [LoadDate] ASC) WITH (#index_options#) ON #filegroup_index#;
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'EDWIndexesRowStore_fk')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'EDWIndexesRowStore_fk'
    ,'Index creation script for RowStore (raw vault): foreign keys'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
ALTER TABLE #entity_table_name# WITH #fk_check# ADD CONSTRAINT [FK_#entity_type#_#entity_name#_#referenced_entity_type#_#referenced_entity_name##column_suffix#] FOREIGN KEY (#referencing_key_column#) REFERENCES #referenced_entity_table_name# (#referenced_key_column#);
'
  );

IF NOT EXISTS (SELECT 1 FROM [meta].[Template] WHERE [TemplateId] = 'DropObject')
  INSERT INTO [meta].[Template]
  (
    [TemplateId]
    ,[TemplateDescription]
    ,[TemplateAttribute]
    ,[LastUpdateTime]
    ,[TemplateText]
  )
  VALUES
  (
    'DropObject'
    ,'Drop object script'
    ,'Protected'
    ,meta.DateRangeStart()
    ,'
EXEC dbo.DropObject @Database = ''#db_name#'', @ObjectSchema = ''#schema#'', @ObjectName = ''#object_name#'', @ObjectType = ''#object_type#'', @PrintOnly = #printonly#;
'
  );


/* Validating current configuration */
PRINT '-- *** Validating current configuration ***';
IF (SELECT COUNT(*) FROM meta.ValidateConfiguration()) != 0
BEGIN
  DECLARE 
    @Msg NVARCHAR(MAX) = CONCAT('Following validation rule(s) did break:', CHAR(13), CHAR(10));
  
  SELECT @Msg += 
  (
    SELECT CONCAT('RuleId: ', RuleId, CHAR(13), CHAR(10), 'RuleCategory: ', RuleCategory, CHAR(13), CHAR(10), 'RuleName: ', RuleName, CHAR(13), CHAR(10), 'Reason: ', Reason, CHAR(13), CHAR(10), 'Configuration Id: ', ConfigurationId, CHAR(13), CHAR(10), 'Current Value: ', ConfigurationValue, CHAR(13), CHAR(10), '-+-+-+-+-+-+-+-+-', CHAR(13), CHAR(10))
    FROM meta.ValidateConfiguration()
    FOR XML PATH('')
  );

  SET @Msg = REPLACE(@Msg, '&#x0D;', '');

  PRINT '-- *** There are validation errors. ***';
  THROW 60000, @Msg, 1;

  RETURN;
END
ELSE
  PRINT '-- *** Validation OK. ***';
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
